Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   139    521.9 MiB    521.9 MiB           1   @profile(stream=open('memory_profiler_handle_camera.log','w+'))
   140                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   141                                             """
   142                                             Starts, restarts and stops the camera Process when main or restart events are set.
   143                                             """
   144    521.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   145    521.9 MiB      0.0 MiB           1       faulthandler.enable()
   146    521.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   147                                         
   148    521.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   149                                         
   150    521.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   151                                         
   152    521.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   153                                         
   154    521.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   155                                         
   156    538.3 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   157    538.3 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue)
   158                                             
   159                                             # create projector object
   160                                         
   161                                             # Goes on until user stops
   162    558.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   163    538.3 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   164    538.3 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   165                                         
   166    538.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   167    538.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   168    538.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   169                                         
   170    538.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   171                                         
   172    538.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   173                                         
   174                                         
   175    538.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   176    538.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   177    538.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   178    538.3 MiB      0.0 MiB           1                                                           vidName, 
   179    538.3 MiB      0.0 MiB           1                                                           csvName, 
   180    538.3 MiB      0.0 MiB           1                                                           spec_dict), 
   181    538.3 MiB      0.0 MiB           1                                                   daemon=False)
   182    538.3 MiB      0.0 MiB           1           cam_process.start()
   183                                          
   184    538.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   185    538.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   186    538.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   187    538.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   188                                         
   189    549.3 MiB     11.0 MiB           1           disp.start_video_stream()
   190    557.5 MiB      8.2 MiB           1           disp.start_projector()
   191    557.5 MiB      0.0 MiB           1           print("Started projector")
   192                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   193    557.5 MiB      0.0 MiB           1           while True:
   194                                         
   195    572.7 MiB   -177.9 MiB        6560               disp.update_stream()
   196    572.7 MiB   -164.6 MiB        6560               disp.update_projector()
   197                                         
   198                                                     # check for command in projector queue
   199                                                     # if command
   200                                                     # issue it to projector object
   201                                                     # display image from projector object on screen
   202                                                     # try to pop img from queue from cam_function
   203                                                     # display most recent image
   204                                                     
   205    572.7 MiB   -178.8 MiB        6560               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   206    572.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   207    572.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   208    572.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   209    571.9 MiB     -0.8 MiB           1                   disp.end_stream()
   210    558.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   211    558.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   212    558.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   213    558.4 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   214    558.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   215                                                         
   216    558.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   217    558.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   218    558.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   219    558.4 MiB      0.0 MiB           1                   vprint("User ready!")
   220    558.4 MiB      0.0 MiB           1                   break    
   221                                             
   222    558.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   144    521.8 MiB    521.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   145                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   146                                             """
   147                                             Starts, restarts and stops the camera Process when main or restart events are set.
   148                                             """
   149    521.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   150    521.8 MiB      0.0 MiB           1       faulthandler.enable()
   151    521.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   152                                         
   153    521.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   154                                         
   155    521.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   156                                         
   157    521.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   158                                         
   159    521.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   160                                         
   161    538.3 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   162    538.3 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   163    538.3 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue)
   164    538.3 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   165                                             # create projector object
   166                                         
   167                                             # Goes on until user stops
   168   3803.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   169    538.3 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   170    538.3 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   171                                         
   172    538.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   173    538.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   174    538.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   175                                         
   176    538.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   177                                         
   178    538.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   179                                         
   180                                         
   181    538.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   182    538.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   183    538.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   184    538.3 MiB      0.0 MiB           1                                                           vidName, 
   185    538.3 MiB      0.0 MiB           1                                                           csvName, 
   186    538.3 MiB      0.0 MiB           1                                                           spec_dict), 
   187    538.3 MiB      0.0 MiB           1                                                   daemon=False)
   188    538.3 MiB      0.0 MiB           1           cam_process.start()
   189                                          
   190    538.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   191    538.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   192    538.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   193    538.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   194                                         
   195    549.2 MiB     10.9 MiB           1           disp.start_video_stream()
   196    557.4 MiB      8.2 MiB           1           disp.start_projector()
   197   3807.3 MiB   3249.9 MiB           1           disp.init_online_processing()
   198   3807.3 MiB      0.0 MiB           1           print("Started projector")
   199                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   200   3807.3 MiB      0.0 MiB           1           while True:
   201                                         
   202   3817.7 MiB      1.4 MiB        2890               disp.update_stream()
   203   3817.7 MiB      9.0 MiB        2890               disp.update_projector()
   204                                         
   205                                                     # check for command in projector queue
   206                                                     # if command
   207                                                     # issue it to projector object
   208                                                     # display image from projector object on screen
   209                                                     # try to pop img from queue from cam_function
   210                                                     # display most recent image
   211                                                     
   212   3817.7 MiB      0.0 MiB        2890               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   213   3817.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   214   3817.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   215   3817.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   216   3817.0 MiB     -0.8 MiB           1                   disp.end_stream()
   217   3803.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   218   3803.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   219   3803.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   220   3803.3 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   221   3803.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   222                                                         
   223   3803.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   224   3803.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   225   3803.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   226   3803.3 MiB      0.0 MiB           1                   vprint("User ready!")
   227   3803.3 MiB      0.0 MiB           1                   break    
   228                                             
   229   3803.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   144    521.9 MiB    521.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   145                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   146                                             """
   147                                             Starts, restarts and stops the camera Process when main or restart events are set.
   148                                             """
   149    521.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   150    521.9 MiB      0.0 MiB           1       faulthandler.enable()
   151    521.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   152                                         
   153    521.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   154                                         
   155    521.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   156                                         
   157    521.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   158                                         
   159    521.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   160                                         
   161    538.2 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   162    538.2 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   163    538.2 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue)
   164    538.2 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   165                                             # create projector object
   166                                         
   167                                             # Goes on until user stops
   168   3802.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   169    538.2 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   170    538.2 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   171                                         
   172    538.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   173    538.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   174    538.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   175                                         
   176    538.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   177                                         
   178    538.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   179                                         
   180                                         
   181    538.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   182    538.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   183    538.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   184    538.2 MiB      0.0 MiB           1                                                           vidName, 
   185    538.2 MiB      0.0 MiB           1                                                           csvName, 
   186    538.2 MiB      0.0 MiB           1                                                           spec_dict), 
   187    538.2 MiB      0.0 MiB           1                                                   daemon=False)
   188    538.2 MiB      0.0 MiB           1           cam_process.start()
   189                                          
   190    538.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   191    538.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   192    538.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   193    538.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   194                                         
   195    548.8 MiB     10.6 MiB           1           disp.start_video_stream()
   196    557.2 MiB      8.3 MiB           1           disp.start_projector()
   197   3805.9 MiB   3248.7 MiB           1           disp.init_online_processing()
   198   3805.9 MiB      0.0 MiB           1           print("Started projector")
   199                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   200   3805.9 MiB      0.0 MiB           1           while True:
   201                                         
   202   3816.4 MiB     10.5 MiB        3134               disp.update_stream()
   203   3816.4 MiB      0.0 MiB        3134               disp.update_projector()
   204                                         
   205                                                     # check for command in projector queue
   206                                                     # if command
   207                                                     # issue it to projector object
   208                                                     # display image from projector object on screen
   209                                                     # try to pop img from queue from cam_function
   210                                                     # display most recent image
   211                                                     
   212   3816.4 MiB      0.0 MiB        3134               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   213   3816.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   214   3816.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   215   3816.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   216   3816.6 MiB      0.2 MiB           1                   disp.end_stream()
   217   3802.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   218   3802.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   219   3802.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   220   3802.9 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   221   3802.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   222                                                         
   223   3802.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   224   3802.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   225   3802.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   226   3802.9 MiB      0.0 MiB           1                   vprint("User ready!")
   227   3802.9 MiB      0.0 MiB           1                   break    
   228                                             
   229   3802.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   144    521.4 MiB    521.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   145                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   146                                             """
   147                                             Starts, restarts and stops the camera Process when main or restart events are set.
   148                                             """
   149    521.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   150    521.4 MiB      0.0 MiB           1       faulthandler.enable()
   151    521.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   152                                         
   153    521.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   154                                         
   155    521.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   156                                         
   157    521.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   158                                         
   159    521.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   160                                         
   161    537.8 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   162    537.8 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   163    537.8 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue)
   164    537.8 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   165                                             # create projector object
   166                                         
   167                                             # Goes on until user stops
   168   3820.0 MiB      0.0 MiB           2       while not(main_event.is_set()):
   169    537.8 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   170    537.8 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   171                                         
   172    537.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   173    537.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   174    537.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   175                                         
   176    537.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   177                                         
   178    537.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   179                                         
   180                                         
   181    537.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   182    537.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   183    537.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   184    537.8 MiB      0.0 MiB           1                                                           vidName, 
   185    537.8 MiB      0.0 MiB           1                                                           csvName, 
   186    537.8 MiB      0.0 MiB           1                                                           spec_dict), 
   187    537.8 MiB      0.0 MiB           1                                                   daemon=False)
   188    537.8 MiB      0.0 MiB           1           cam_process.start()
   189                                          
   190    537.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   191    537.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   192    537.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   193    537.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   194                                         
   195    548.2 MiB     10.4 MiB           1           disp.start_video_stream()
   196    556.5 MiB      8.3 MiB           1           disp.start_projector()
   197   3822.8 MiB   3266.3 MiB           1           disp.init_online_processing()
   198   3822.8 MiB      0.0 MiB           1           print("Started projector")
   199                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   200   3822.8 MiB      0.0 MiB           1           while True:
   201                                         
   202   3833.5 MiB     10.7 MiB      112258               disp.update_stream()
   203   3833.5 MiB      0.0 MiB      112258               disp.update_projector()
   204                                         
   205                                                     # check for command in projector queue
   206                                                     # if command
   207                                                     # issue it to projector object
   208                                                     # display image from projector object on screen
   209                                                     # try to pop img from queue from cam_function
   210                                                     # display most recent image
   211                                                     
   212   3833.5 MiB      0.0 MiB      112258               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   213   3833.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   214   3833.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   215   3833.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   216   3833.7 MiB      0.2 MiB           1                   disp.end_stream()
   217   3819.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   218   3819.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   219   3819.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   220   3820.0 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   221   3820.0 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   222                                                         
   223   3820.0 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   224   3820.0 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   225   3820.0 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   226   3820.0 MiB      0.0 MiB           1                   vprint("User ready!")
   227   3820.0 MiB      0.0 MiB           1                   break    
   228                                             
   229   3820.0 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   144    521.9 MiB    521.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   145                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   146                                             """
   147                                             Starts, restarts and stops the camera Process when main or restart events are set.
   148                                             """
   149    521.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   150    521.9 MiB      0.0 MiB           1       faulthandler.enable()
   151    521.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   152                                         
   153    521.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   154                                         
   155    521.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   156                                         
   157    521.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   158                                         
   159    521.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   160                                         
   161    538.4 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   162    538.4 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   163    538.4 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue)
   164    538.4 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   165                                             # create projector object
   166                                         
   167                                             # Goes on until user stops
   168   3794.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   169    538.4 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   170    538.4 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   171                                         
   172    538.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   173    538.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   174    538.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   175                                         
   176    538.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   177                                         
   178    538.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   179                                         
   180                                         
   181    538.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   182    538.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   183    538.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   184    538.4 MiB      0.0 MiB           1                                                           vidName, 
   185    538.4 MiB      0.0 MiB           1                                                           csvName, 
   186    538.4 MiB      0.0 MiB           1                                                           spec_dict), 
   187    538.4 MiB      0.0 MiB           1                                                   daemon=False)
   188    538.5 MiB      0.0 MiB           1           cam_process.start()
   189                                          
   190    538.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   191    538.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   192    538.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   193    538.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   194                                         
   195    549.5 MiB     11.0 MiB           1           disp.start_video_stream()
   196    557.7 MiB      8.2 MiB           1           disp.start_projector()
   197   3797.8 MiB   3240.1 MiB           1           disp.init_online_processing()
   198   3797.8 MiB      0.0 MiB           1           print("Started projector")
   199                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   200   3797.8 MiB      0.0 MiB           1           while True:
   201                                         
   202   3809.2 MiB     10.6 MiB         932               disp.update_stream()
   203   3809.2 MiB      0.9 MiB         932               disp.update_projector()
   204                                         
   205                                                     # check for command in projector queue
   206                                                     # if command
   207                                                     # issue it to projector object
   208                                                     # display image from projector object on screen
   209                                                     # try to pop img from queue from cam_function
   210                                                     # display most recent image
   211                                                     
   212   3809.2 MiB      0.0 MiB         932               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   213   3809.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   214   3809.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   215   3809.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   216   3808.4 MiB     -0.8 MiB           1                   disp.end_stream()
   217   3794.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   218   3794.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   219   3794.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   220   3794.7 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   221   3794.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   222                                                         
   223   3794.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   224   3794.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   225   3794.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   226   3794.7 MiB      0.0 MiB           1                   vprint("User ready!")
   227   3794.7 MiB      0.0 MiB           1                   break    
   228                                             
   229   3794.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.3 MiB    522.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    538.7 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    538.7 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.7 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.7 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174   3807.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.7 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.7 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.7 MiB      0.0 MiB           1                                                           vidName, 
   191    538.7 MiB      0.0 MiB           1                                                           csvName, 
   192    538.7 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.7 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.8 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    549.7 MiB     10.9 MiB           1           disp.start_video_stream()
   202    557.9 MiB      8.2 MiB           1           disp.start_projector()
   203                                         
   204    557.9 MiB      0.0 MiB           1           if online:
   205   3813.1 MiB   3255.2 MiB           1               disp.init_online_processing()
   206                                         
   207   3813.1 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209   3813.1 MiB      0.0 MiB           1           while True:
   210                                         
   211   3822.2 MiB      9.1 MiB       11317               disp.update_stream()
   212   3822.2 MiB      0.1 MiB       11317               disp.update_projector()
   213                                                     
   214   3822.2 MiB      0.0 MiB       11317               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215   3822.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216   3822.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217   3822.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218   3821.6 MiB     -0.7 MiB           1                   disp.end_stream()
   219   3807.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   220   3807.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221   3807.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222   3807.9 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   223   3807.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225   3807.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226   3807.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227   3807.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228   3807.9 MiB      0.0 MiB           1                   vprint("User ready!")
   229   3807.9 MiB      0.0 MiB           1                   break    
   230                                             
   231   3807.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.6 MiB    521.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    538.0 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    538.0 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.0 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.0 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.0 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.0 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174   3814.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.0 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.0 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.1 MiB      0.0 MiB           1                                                           vidName, 
   191    538.1 MiB      0.0 MiB           1                                                           csvName, 
   192    538.1 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.1 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.1 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    548.5 MiB     10.5 MiB           1           disp.start_video_stream()
   202    556.8 MiB      8.3 MiB           1           disp.start_projector()
   203                                         
   204    556.8 MiB      0.0 MiB           1           if online:
   205   3818.1 MiB   3261.3 MiB           1               disp.init_online_processing()
   206                                         
   207   3818.1 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209   3818.1 MiB      0.0 MiB           1           while True:
   210                                         
   211   3828.1 MiB      9.8 MiB       42539               disp.update_stream()
   212   3828.1 MiB      0.2 MiB       42539               disp.update_projector()
   213                                                     
   214   3828.1 MiB      0.0 MiB       42539               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215   3828.1 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216   3828.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217   3828.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218   3828.2 MiB      0.1 MiB           1                   disp.end_stream()
   219   3814.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   220   3814.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221   3814.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222   3814.4 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   223   3814.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225   3814.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226   3814.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227   3814.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228   3814.4 MiB      0.0 MiB           1                   vprint("User ready!")
   229   3814.4 MiB      0.0 MiB           1                   break    
   230                                             
   231   3814.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    523.0 MiB    523.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    523.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    523.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    523.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    523.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    523.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    523.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    523.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    539.5 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    539.5 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    539.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    539.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    539.5 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    539.5 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    556.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    539.5 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    539.5 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    539.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    539.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    539.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    539.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    539.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    539.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    539.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    539.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    539.5 MiB      0.0 MiB           1                                                           vidName, 
   191    539.5 MiB      0.0 MiB           1                                                           csvName, 
   192    539.5 MiB      0.0 MiB           1                                                           spec_dict), 
   193    539.5 MiB      0.0 MiB           1                                                   daemon=False)
   194    539.5 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    539.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    539.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    539.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    539.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    550.4 MiB     10.9 MiB           1           disp.start_video_stream()
   202    558.8 MiB      8.4 MiB           1           disp.start_projector()
   203                                         
   204    558.8 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    558.8 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    558.8 MiB      0.0 MiB           1           while True:
   210                                         
   211    570.8 MiB      1.1 MiB        2199               disp.update_stream()
   212    570.8 MiB      9.4 MiB        2199               disp.update_projector()
   213                                                     
   214    570.8 MiB      1.5 MiB        2199               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    570.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    570.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    570.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    570.2 MiB     -0.6 MiB           1                   disp.end_stream()
   219    556.4 MiB    -13.7 MiB           1                   disp.stop_projector()
   220    556.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    556.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    556.7 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   223    556.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    556.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    556.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    556.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    556.7 MiB      0.0 MiB           1                   vprint("User ready!")
   229    556.7 MiB      0.0 MiB           1                   break    
   230                                             
   231    556.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.3 MiB    522.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    538.8 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    538.8 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.8 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.8 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174   3804.0 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.8 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.8 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.8 MiB      0.0 MiB           1                                                           vidName, 
   191    538.8 MiB      0.0 MiB           1                                                           csvName, 
   192    538.8 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.8 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.8 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    549.7 MiB     10.9 MiB           1           disp.start_video_stream()
   202    557.9 MiB      8.2 MiB           1           disp.start_projector()
   203                                         
   204    557.9 MiB      0.0 MiB           1           if online:
   205   3808.5 MiB   3250.6 MiB           1               disp.init_online_processing()
   206                                         
   207   3808.5 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209   3808.5 MiB      0.0 MiB           1           while True:
   210                                         
   211   3818.0 MiB      9.1 MiB        5737               disp.update_stream()
   212   3818.0 MiB      0.4 MiB        5737               disp.update_projector()
   213                                                     
   214   3818.0 MiB      0.0 MiB        5737               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215   3818.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216   3818.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217   3818.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218   3817.7 MiB     -0.3 MiB           1                   disp.end_stream()
   219   3804.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   220   3804.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221   3804.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222   3804.0 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   223   3804.0 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225   3804.0 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226   3804.0 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227   3804.0 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228   3804.0 MiB      0.0 MiB           1                   vprint("User ready!")
   229   3804.0 MiB      0.0 MiB           1                   break    
   230                                             
   231   3804.0 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.4 MiB    522.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    538.8 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    538.8 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.8 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.8 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    556.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.8 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.8 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.8 MiB      0.0 MiB           1                                                           vidName, 
   191    538.8 MiB      0.0 MiB           1                                                           csvName, 
   192    538.8 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.9 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.9 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    549.8 MiB     10.9 MiB           1           disp.start_video_stream()
   202    558.1 MiB      8.2 MiB           1           disp.start_projector()
   203                                         
   204    558.1 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    558.1 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    558.1 MiB      0.0 MiB           1           while True:
   210                                         
   211    570.8 MiB      0.9 MiB        4657               disp.update_stream()
   212    570.8 MiB     11.8 MiB        4657               disp.update_projector()
   213                                                     
   214    570.8 MiB      0.0 MiB        4657               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    570.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    570.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    570.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    570.2 MiB     -0.6 MiB           1                   disp.end_stream()
   219    556.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   220    556.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    556.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    556.6 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   223    556.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    556.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    556.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    556.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    556.6 MiB      0.0 MiB           1                   vprint("User ready!")
   229    556.6 MiB      0.0 MiB           1                   break    
   230                                             
   231    556.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.9 MiB    521.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    538.3 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    538.3 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.3 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.3 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    555.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.3 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.3 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.3 MiB      0.0 MiB           1                                                           vidName, 
   191    538.3 MiB      0.0 MiB           1                                                           csvName, 
   192    538.3 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.3 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.4 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    549.1 MiB     10.7 MiB           1           disp.start_video_stream()
   202    557.5 MiB      8.3 MiB           1           disp.start_projector()
   203                                         
   204    557.5 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    557.5 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    557.5 MiB      0.0 MiB           1           while True:
   210                                         
   211    569.5 MiB      1.1 MiB       14438               disp.update_stream()
   212    569.6 MiB     11.1 MiB       14438               disp.update_projector()
   213                                                     
   214    569.6 MiB      0.0 MiB       14438               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    569.6 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    569.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    569.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    569.0 MiB     -0.6 MiB           1                   disp.end_stream()
   219    555.3 MiB    -13.7 MiB           1                   disp.stop_projector()
   220    555.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    555.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    555.5 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   223    555.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    555.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    555.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    555.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    555.5 MiB      0.0 MiB           1                   vprint("User ready!")
   229    555.5 MiB      0.0 MiB           1                   break    
   230                                             
   231    555.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.4 MiB    521.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    537.7 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    537.7 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    537.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    537.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    537.7 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    537.7 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    554.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    537.7 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    537.7 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    537.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    537.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    537.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    537.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    537.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    537.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    537.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    537.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    537.7 MiB      0.0 MiB           1                                                           vidName, 
   191    537.7 MiB      0.0 MiB           1                                                           csvName, 
   192    537.7 MiB      0.0 MiB           1                                                           spec_dict), 
   193    537.7 MiB      0.0 MiB           1                                                   daemon=False)
   194    537.8 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    537.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    537.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    537.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    537.8 MiB      0.1 MiB           1           cam_handler_ready.set()
   200                                         
   201    548.3 MiB     10.5 MiB           1           disp.start_video_stream()
   202    556.6 MiB      8.3 MiB           1           disp.start_projector()
   203                                         
   204    556.6 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    556.6 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    556.6 MiB      0.0 MiB           1           while True:
   210                                         
   211    568.9 MiB      1.0 MiB       95050               disp.update_stream()
   212    569.0 MiB     11.2 MiB       95050               disp.update_projector()
   213                                                     
   214    569.0 MiB      0.2 MiB       95050               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    569.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    569.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    569.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    568.4 MiB     -0.6 MiB           1                   disp.end_stream()
   219    554.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   220    554.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    554.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    554.8 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   223    554.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    554.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    554.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    554.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    554.8 MiB      0.0 MiB           1                   vprint("User ready!")
   229    554.8 MiB      0.0 MiB           1                   break    
   230                                             
   231    554.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.5 MiB    521.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    537.9 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    537.9 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.0 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.0 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.0 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.0 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    555.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.0 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.0 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.0 MiB      0.0 MiB           1                                                           vidName, 
   191    538.0 MiB      0.0 MiB           1                                                           csvName, 
   192    538.0 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.0 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.0 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    548.8 MiB     10.8 MiB           1           disp.start_video_stream()
   202    557.2 MiB      8.4 MiB           1           disp.start_projector()
   203                                         
   204    557.2 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    557.2 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    557.2 MiB      0.0 MiB           1           while True:
   210                                         
   211    569.2 MiB      1.0 MiB       11778               disp.update_stream()
   212    569.2 MiB     11.1 MiB       11778               disp.update_projector()
   213                                                     
   214    569.2 MiB      0.0 MiB       11778               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    569.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    569.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    569.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    569.4 MiB      0.1 MiB           1                   disp.end_stream()
   219    555.6 MiB    -13.7 MiB           1                   disp.stop_projector()
   220    555.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    555.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    555.9 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   223    555.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    555.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    555.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    555.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    555.9 MiB      0.0 MiB           1                   vprint("User ready!")
   229    555.9 MiB      0.0 MiB           1                   break    
   230                                             
   231    555.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.0 MiB    521.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    537.4 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    537.4 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    537.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    537.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    537.4 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    537.4 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    554.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    537.4 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    537.4 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    537.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    537.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    537.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    537.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    537.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    537.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    537.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    537.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    537.4 MiB      0.0 MiB           1                                                           vidName, 
   191    537.4 MiB      0.0 MiB           1                                                           csvName, 
   192    537.4 MiB      0.0 MiB           1                                                           spec_dict), 
   193    537.4 MiB      0.0 MiB           1                                                   daemon=False)
   194    537.5 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    537.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    537.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    537.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    537.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    547.9 MiB     10.4 MiB           1           disp.start_video_stream()
   202    556.2 MiB      8.3 MiB           1           disp.start_projector()
   203                                         
   204    556.2 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    556.2 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    556.2 MiB      0.0 MiB           1           while True:
   210                                         
   211    568.2 MiB      2.7 MiB       39539               disp.update_stream()
   212    568.3 MiB      9.5 MiB       39539               disp.update_projector()
   213                                                     
   214    568.3 MiB      0.0 MiB       39539               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    568.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    568.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    568.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    568.6 MiB      0.2 MiB           1                   disp.end_stream()
   219    554.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   220    554.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    554.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    554.9 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   223    554.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    554.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    554.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    554.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    554.9 MiB      0.0 MiB           1                   vprint("User ready!")
   229    554.9 MiB      0.0 MiB           1                   break    
   230                                             
   231    554.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.0 MiB    522.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    538.5 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    538.5 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.5 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.5 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    587.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.5 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.5 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.5 MiB      0.0 MiB           1                                                           vidName, 
   191    538.5 MiB      0.0 MiB           1                                                           csvName, 
   192    538.5 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.5 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.5 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    549.4 MiB     10.9 MiB           1           disp.start_video_stream()
   202    557.8 MiB      8.3 MiB           1           disp.start_projector()
   203                                         
   204    557.8 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    557.8 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    557.8 MiB      0.0 MiB           1           while True:
   210                                         
   211    600.6 MiB      1.2 MiB        2368               disp.update_stream()
   212    600.6 MiB     41.6 MiB        2368               disp.update_projector()
   213                                                     
   214    600.6 MiB      0.0 MiB        2368               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    600.6 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    600.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    600.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    600.7 MiB      0.2 MiB           1                   disp.end_stream()
   219    587.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   220    587.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    587.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    587.3 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   223    587.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    587.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    587.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    587.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    587.3 MiB      0.0 MiB           1                   vprint("User ready!")
   229    587.3 MiB      0.0 MiB           1                   break    
   230                                             
   231    587.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.5 MiB    521.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    537.8 MiB     16.3 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    537.8 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    537.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    537.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    537.8 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    537.8 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174   3781.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    537.8 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    537.8 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    537.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    537.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    537.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    537.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    537.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    537.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    537.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    537.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    537.8 MiB      0.0 MiB           1                                                           vidName, 
   191    537.8 MiB      0.0 MiB           1                                                           csvName, 
   192    537.8 MiB      0.0 MiB           1                                                           spec_dict), 
   193    537.8 MiB      0.0 MiB           1                                                   daemon=False)
   194    537.8 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    537.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    537.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    537.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    537.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    548.5 MiB     10.6 MiB           1           disp.start_video_stream()
   202    556.9 MiB      8.4 MiB           1           disp.start_projector()
   203                                         
   204    556.9 MiB      0.0 MiB           1           if online:
   205   3786.1 MiB   3229.2 MiB           1               disp.init_online_processing()
   206                                         
   207   3786.1 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209   3786.1 MiB      0.0 MiB           1           while True:
   210                                         
   211   3795.8 MiB      9.2 MiB        2734               disp.update_stream()
   212   3795.8 MiB      0.5 MiB        2734               disp.update_projector()
   213                                                     
   214   3795.8 MiB      0.0 MiB        2734               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215   3795.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216   3795.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217   3795.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218   3795.1 MiB     -0.7 MiB           1                   disp.end_stream()
   219   3781.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   220   3781.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221   3781.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222   3781.3 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   223   3781.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225   3781.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226   3781.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227   3781.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228   3781.3 MiB      0.0 MiB           1                   vprint("User ready!")
   229   3781.3 MiB      0.0 MiB           1                   break    
   230                                             
   231   3781.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.1 MiB    521.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    537.5 MiB     16.3 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    537.5 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    537.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    537.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    537.5 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    537.5 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174   3761.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    537.5 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    537.5 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    537.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    537.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    537.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    537.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    537.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    537.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    537.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    537.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    537.5 MiB      0.0 MiB           1                                                           vidName, 
   191    537.5 MiB      0.0 MiB           1                                                           csvName, 
   192    537.5 MiB      0.0 MiB           1                                                           spec_dict), 
   193    537.5 MiB      0.0 MiB           1                                                   daemon=False)
   194    537.5 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    537.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    537.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    537.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    537.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    548.1 MiB     10.6 MiB           1           disp.start_video_stream()
   202    556.4 MiB      8.3 MiB           1           disp.start_projector()
   203                                         
   204    556.4 MiB      0.0 MiB           1           if online:
   205   3764.5 MiB   3208.1 MiB           1               disp.init_online_processing()
   206                                         
   207   3764.5 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209   3764.5 MiB      0.0 MiB           1           while True:
   210                                         
   211   3775.9 MiB     10.7 MiB       10185               disp.update_stream()
   212   3775.9 MiB      0.7 MiB       10185               disp.update_projector()
   213                                                     
   214   3775.9 MiB      0.0 MiB       10185               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215   3775.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216   3775.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217   3775.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218   3775.2 MiB     -0.7 MiB           1                   disp.end_stream()
   219   3761.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   220   3761.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221   3761.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222   3761.5 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   223   3761.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225   3761.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226   3761.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227   3761.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228   3761.5 MiB      0.0 MiB           1                   vprint("User ready!")
   229   3761.5 MiB      0.0 MiB           1                   break    
   230                                             
   231   3761.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.4 MiB    522.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    538.8 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    538.8 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    538.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    538.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    538.8 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    538.8 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174   3806.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    538.8 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    538.8 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    538.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    538.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    538.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    538.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    538.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    538.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    538.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    538.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    538.9 MiB      0.0 MiB           1                                                           vidName, 
   191    538.9 MiB      0.0 MiB           1                                                           csvName, 
   192    538.9 MiB      0.0 MiB           1                                                           spec_dict), 
   193    538.9 MiB      0.0 MiB           1                                                   daemon=False)
   194    538.9 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    538.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    538.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    538.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    538.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    549.7 MiB     10.8 MiB           1           disp.start_video_stream()
   202    558.0 MiB      8.4 MiB           1           disp.start_projector()
   203                                         
   204    558.0 MiB      0.0 MiB           1           if online:
   205   3809.6 MiB   3251.6 MiB           1               disp.init_online_processing()
   206                                         
   207   3809.6 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209   3809.6 MiB      0.0 MiB           1           while True:
   210                                         
   211   3821.1 MiB      2.1 MiB       17147               disp.update_stream()
   212   3821.2 MiB      9.5 MiB       17147               disp.update_projector()
   213                                                     
   214   3821.2 MiB      0.0 MiB       17147               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215   3821.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216   3821.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217   3821.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218   3820.5 MiB     -0.7 MiB           1                   disp.end_stream()
   219   3806.7 MiB    -13.7 MiB           1                   disp.stop_projector()
   220   3806.7 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221   3806.7 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222   3806.7 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   223   3806.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225   3806.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226   3806.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227   3806.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228   3806.7 MiB      0.0 MiB           1                   vprint("User ready!")
   229   3806.7 MiB      0.0 MiB           1                   break    
   230                                             
   231   3806.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    516.2 MiB    516.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    516.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    516.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    516.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    516.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    516.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    516.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    516.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    532.6 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    532.6 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    532.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    532.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    532.6 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    532.6 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174   3808.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    532.6 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    532.6 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    532.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    532.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    532.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    532.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    532.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    532.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    532.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    532.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    532.6 MiB      0.0 MiB           1                                                           vidName, 
   191    532.6 MiB      0.0 MiB           1                                                           csvName, 
   192    532.6 MiB      0.0 MiB           1                                                           spec_dict), 
   193    532.6 MiB      0.0 MiB           1                                                   daemon=False)
   194    532.6 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    532.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    532.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    532.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    532.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    543.5 MiB     10.9 MiB           1           disp.start_video_stream()
   202    551.8 MiB      8.2 MiB           1           disp.start_projector()
   203                                         
   204    551.8 MiB      0.0 MiB           1           if online:
   205   3811.0 MiB   3259.2 MiB           1               disp.init_online_processing()
   206                                         
   207   3811.0 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209   3811.0 MiB      0.0 MiB           1           while True:
   210                                         
   211   3822.4 MiB     10.7 MiB        1883               disp.update_stream()
   212   3822.4 MiB      0.7 MiB        1883               disp.update_projector()
   213                                                     
   214   3822.4 MiB      0.0 MiB        1883               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215   3822.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216   3822.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217   3822.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218   3822.4 MiB      0.1 MiB           1                   disp.end_stream()
   219   3808.7 MiB    -13.8 MiB           1                   disp.stop_projector()
   220   3808.7 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221   3808.7 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222   3808.7 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   223   3808.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225   3808.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226   3808.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227   3808.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228   3808.7 MiB      0.0 MiB           1                   vprint("User ready!")
   229   3808.7 MiB      0.0 MiB           1                   break    
   230                                             
   231   3808.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    516.3 MiB    516.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    516.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    516.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    516.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    516.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    516.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    516.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    516.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    532.7 MiB     16.4 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    532.7 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    532.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    532.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    532.7 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    532.7 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    550.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    532.7 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    532.7 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    532.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    532.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    532.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    532.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    532.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    532.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    532.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    532.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    532.7 MiB      0.0 MiB           1                                                           vidName, 
   191    532.7 MiB      0.0 MiB           1                                                           csvName, 
   192    532.7 MiB      0.0 MiB           1                                                           spec_dict), 
   193    532.7 MiB      0.0 MiB           1                                                   daemon=False)
   194    532.7 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    532.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    532.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    532.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    532.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    543.6 MiB     10.9 MiB           1           disp.start_video_stream()
   202    551.8 MiB      8.2 MiB           1           disp.start_projector()
   203                                         
   204    551.8 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    551.8 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    551.8 MiB      0.0 MiB           1           while True:
   210                                         
   211    564.7 MiB      1.4 MiB        2990               disp.update_stream()
   212    564.7 MiB     11.5 MiB        2990               disp.update_projector()
   213                                                     
   214    564.7 MiB      0.0 MiB        2990               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    564.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    564.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    564.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    564.0 MiB     -0.7 MiB           1                   disp.end_stream()
   219    550.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   220    550.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    550.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    550.5 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   223    550.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    550.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    550.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    550.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    550.5 MiB      0.0 MiB           1                   vprint("User ready!")
   229    550.5 MiB      0.0 MiB           1                   break    
   230                                             
   231    550.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.0 MiB    519.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    535.4 MiB     16.3 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    535.4 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    535.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    535.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    535.4 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    535.4 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    553.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    535.4 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    535.4 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    535.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    535.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    535.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    535.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    535.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    535.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    535.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    535.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    535.4 MiB      0.0 MiB           1                                                           vidName, 
   191    535.4 MiB      0.0 MiB           1                                                           csvName, 
   192    535.4 MiB      0.0 MiB           1                                                           spec_dict), 
   193    535.4 MiB      0.0 MiB           1                                                   daemon=False)
   194    535.4 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    535.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    535.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    535.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    535.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    545.8 MiB     10.4 MiB           1           disp.start_video_stream()
   202    554.2 MiB      8.3 MiB           1           disp.start_projector()
   203                                         
   204    554.2 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    554.2 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    554.2 MiB      0.0 MiB           1           while True:
   210                                         
   211    567.5 MiB      2.3 MiB       39481               disp.update_stream()
   212    567.5 MiB     11.1 MiB       39481               disp.update_projector()
   213                                                     
   214    567.5 MiB      0.0 MiB       39481               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    567.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    567.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    567.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    566.7 MiB     -0.8 MiB           1                   disp.end_stream()
   219    552.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   220    552.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    552.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    553.1 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   223    553.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    553.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    553.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    553.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    553.1 MiB      0.0 MiB           1                   vprint("User ready!")
   229    553.1 MiB      0.0 MiB           1                   break    
   230                                             
   231    553.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.9 MiB    519.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162                                             
   163                                         
   164                                             # Handles projected images
   165    536.4 MiB     16.5 MiB           1       proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   166    536.4 MiB      0.0 MiB           1       print("Setting up DisplayHandler")
   167                                         
   168    536.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   169    536.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   170    536.4 MiB      0.0 MiB           1       disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   171    536.4 MiB      0.0 MiB           1       print("DisplayHandler setup complete")
   172                                         
   173                                             # Goes on until user stops
   174    553.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   175    536.4 MiB      0.0 MiB           1           print("Starting new round of handle_camera")
   176    536.4 MiB      0.0 MiB           1           print(not(main_event.is_set()))
   177                                         
   178    536.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   179    536.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   180    536.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   181                                         
   182    536.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   183                                         
   184    536.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   185                                         
   186                                         
   187    536.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   188    536.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   189    536.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   190    536.4 MiB      0.0 MiB           1                                                           vidName, 
   191    536.4 MiB      0.0 MiB           1                                                           csvName, 
   192    536.4 MiB      0.0 MiB           1                                                           spec_dict), 
   193    536.4 MiB      0.0 MiB           1                                                   daemon=False)
   194    536.4 MiB      0.0 MiB           1           cam_process.start()
   195                                          
   196    536.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   197    536.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   198    536.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   199    536.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   200                                         
   201    547.4 MiB     11.0 MiB           1           disp.start_video_stream()
   202    555.6 MiB      8.2 MiB           1           disp.start_projector()
   203                                         
   204    555.6 MiB      0.0 MiB           1           if online:
   205                                                     disp.init_online_processing()
   206                                         
   207    555.6 MiB      0.0 MiB           1           print("Started projector")
   208                                                 # Waits for main or restart events to be set. Sleeps for 1 sec to allow for other threads to get more attention.
   209    555.6 MiB      0.0 MiB           1           while True:
   210                                         
   211    567.5 MiB      0.9 MiB        6649               disp.update_stream()
   212    567.5 MiB     11.0 MiB        6649               disp.update_projector()
   213                                                     
   214    567.5 MiB      0.0 MiB        6649               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   215    567.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   216    567.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   217    567.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   218    566.9 MiB     -0.6 MiB           1                   disp.end_stream()
   219    553.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   220    553.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   221    553.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   222    553.4 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   223    553.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   224                                                         
   225    553.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   226    553.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   227    553.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   228    553.4 MiB      0.0 MiB           1                   vprint("User ready!")
   229    553.4 MiB      0.0 MiB           1                   break    
   230                                             
   231    553.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.3 MiB    519.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3883.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.6 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.6 MiB      0.0 MiB           1                                                           vidName, 
   188    535.6 MiB      0.0 MiB           1                                                           csvName, 
   189    535.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.2 MiB     10.6 MiB           1           disp.start_video_stream()
   199    555.3 MiB      9.1 MiB           1           disp.start_projector()
   200                                         
   201    555.3 MiB      0.0 MiB           1           if online:
   202   3886.6 MiB   3331.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3886.6 MiB      0.0 MiB           1           print("Started projector")
   205                                                 # Waits for main or restart events to be set
   206   3886.6 MiB      0.0 MiB           1           while True:
   207                                         
   208   3897.8 MiB     10.0 MiB        1584               disp.update_stream()
   209   3897.9 MiB      0.3 MiB        1584               disp.update_projector()
   210                                                     
   211   3897.9 MiB     -0.4 MiB        1584               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   212   3897.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   213   3897.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   214   3897.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   215   3897.3 MiB     -0.6 MiB           1                   disp.end_stream()
   216   3883.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   217   3883.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   218   3883.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   219   3883.5 MiB     -0.0 MiB           1                   cam_process.join() # Wrap up recording process
   220   3883.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   221                                                         
   222   3883.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   223   3883.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   224   3883.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   225   3883.5 MiB      0.0 MiB           1                   vprint("User ready!")
   226   3883.5 MiB      0.0 MiB           1                   break    
   227                                             
   228   3883.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.8 MiB    521.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3796.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.1 MiB      0.0 MiB           1                                                           vidName, 
   188    538.1 MiB      0.0 MiB           1                                                           csvName, 
   189    538.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.7 MiB     10.5 MiB           1           disp.start_video_stream()
   199    557.0 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    557.0 MiB      0.0 MiB           1           if online:
   202   3799.2 MiB   3242.1 MiB           1               disp.init_online_processing()
   203                                         
   204   3799.2 MiB      0.0 MiB           1           print("Started projector")
   205                                                 # Waits for main or restart events to be set
   206   3799.2 MiB      0.0 MiB           1           while True:
   207                                         
   208   3810.7 MiB      1.4 MiB        4134               disp.update_stream()
   209   3810.7 MiB     10.1 MiB        4134               disp.update_projector()
   210                                                     
   211   3810.7 MiB      0.0 MiB        4134               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   212   3810.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   213   3810.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   214   3810.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   215   3809.9 MiB     -0.8 MiB           1                   disp.end_stream()
   216   3796.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   217   3796.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   218   3796.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   219   3796.2 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   220   3796.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   221                                                         
   222   3796.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   223   3796.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   224   3796.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   225   3796.2 MiB      0.0 MiB           1                   vprint("User ready!")
   226   3796.2 MiB      0.0 MiB           1                   break    
   227                                             
   228   3796.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.2 MiB    521.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3786.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.7 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.7 MiB      0.0 MiB           1                                                           vidName, 
   188    537.7 MiB      0.0 MiB           1                                                           csvName, 
   189    537.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.8 MiB     11.1 MiB           1           disp.start_video_stream()
   199    557.0 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    557.0 MiB      0.0 MiB           1           if online:
   202   3789.6 MiB   3232.6 MiB           1               disp.init_online_processing()
   203                                         
   204   3789.6 MiB      0.0 MiB           1           print("Started projector")
   205                                                 # Waits for main or restart events to be set
   206   3789.6 MiB      0.0 MiB           1           while True:
   207                                         
   208   3801.0 MiB     10.9 MiB        5048               disp.update_stream()
   209   3801.0 MiB      0.4 MiB        5048               disp.update_projector()
   210                                                     
   211   3801.0 MiB      0.0 MiB        5048               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   212   3801.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   213   3801.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   214   3801.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   215   3800.2 MiB     -0.7 MiB           1                   disp.end_stream()
   216   3786.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   217   3786.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   218   3786.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   219   3786.5 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   220   3786.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   221                                                         
   222   3786.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   223   3786.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   224   3786.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   225   3786.5 MiB      0.0 MiB           1                   vprint("User ready!")
   226   3786.5 MiB      0.0 MiB           1                   break    
   227                                             
   228   3786.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.7 MiB    519.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3768.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    536.2 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    536.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    536.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    536.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    536.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    536.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    536.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    536.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    536.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    536.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    536.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    536.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    536.2 MiB      0.0 MiB           1                                                           vidName, 
   188    536.2 MiB      0.0 MiB           1                                                           csvName, 
   189    536.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    536.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    536.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    536.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    536.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    536.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    536.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.8 MiB     10.6 MiB           1           disp.start_video_stream()
   199    555.2 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    555.2 MiB      0.0 MiB           1           if online:
   202   3772.4 MiB   3217.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3772.4 MiB      0.0 MiB           1           print("Started projector")
   205                                                 # Waits for main or restart events to be set
   206   3772.4 MiB      0.0 MiB           1           while True:
   207                                         
   208   3783.4 MiB     10.4 MiB        2510               disp.update_stream()
   209   3783.4 MiB      0.6 MiB        2510               disp.update_projector()
   210                                                     
   211   3783.4 MiB      0.0 MiB        2510               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   212   3783.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   213   3783.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   214   3783.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   215   3782.6 MiB     -0.8 MiB           1                   disp.end_stream()
   216   3768.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   217   3768.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   218   3768.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   219   3768.9 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   220   3768.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   221                                                         
   222   3768.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   223   3768.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   224   3768.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   225   3768.9 MiB      0.0 MiB           1                   vprint("User ready!")
   226   3768.9 MiB      0.0 MiB           1                   break    
   227                                             
   228   3768.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.4 MiB    521.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3794.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.8 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.8 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.8 MiB      0.0 MiB           1                                                           vidName, 
   188    537.8 MiB      0.0 MiB           1                                                           csvName, 
   189    537.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.0 MiB     11.1 MiB           1           disp.start_video_stream()
   199    557.2 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    557.2 MiB      0.0 MiB           1           if online:
   202   3797.5 MiB   3240.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3797.5 MiB      0.0 MiB           1           print("Started projector")
   205                                                 # Waits for main or restart events to be set
   206   3797.5 MiB      0.0 MiB           1           while True:
   207                                         
   208   3809.0 MiB     11.0 MiB        3436               disp.update_stream()
   209   3809.0 MiB      0.4 MiB        3436               disp.update_projector()
   210                                                     
   211   3809.0 MiB      0.0 MiB        3436               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   212   3809.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   213   3809.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   214   3809.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   215   3808.1 MiB     -0.8 MiB           1                   disp.end_stream()
   216   3794.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   217   3794.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   218   3794.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   219   3794.4 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   220   3794.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   221                                                         
   222   3794.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   223   3794.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   224   3794.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   225   3794.4 MiB      0.0 MiB           1                   vprint("User ready!")
   226   3794.4 MiB      0.0 MiB           1                   break    
   227                                             
   228   3794.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.6 MiB    521.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3786.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.0 MiB      0.0 MiB           1                                                           vidName, 
   188    538.0 MiB      0.0 MiB           1                                                           csvName, 
   189    538.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.5 MiB     10.5 MiB           1           disp.start_video_stream()
   199    556.9 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    556.9 MiB      0.0 MiB           1           if online:
   202   3788.7 MiB   3231.8 MiB           1               disp.init_online_processing()
   203                                         
   204   3788.7 MiB      0.0 MiB           1           print("Started projector")
   205                                                 # Waits for main or restart events to be set
   206   3788.7 MiB      0.0 MiB           1           while True:
   207                                         
   208   3800.5 MiB      2.6 MiB        4201               disp.update_stream()
   209   3800.5 MiB      9.2 MiB        4201               disp.update_projector()
   210                                                     
   211   3800.5 MiB      0.1 MiB        4201               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   212   3800.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   213   3800.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   214   3800.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   215   3799.9 MiB     -0.6 MiB           1                   disp.end_stream()
   216   3786.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   217   3786.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   218   3786.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   219   3786.1 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   220   3786.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   221                                                         
   222   3786.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   223   3786.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   224   3786.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   225   3786.1 MiB      0.0 MiB           1                   vprint("User ready!")
   226   3786.1 MiB      0.0 MiB           1                   break    
   227                                             
   228   3786.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.2 MiB    520.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3769.0 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    536.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    536.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    536.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    536.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    536.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    536.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    536.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    536.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    536.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    536.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    536.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    536.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    536.6 MiB      0.0 MiB           1                                                           vidName, 
   188    536.6 MiB      0.0 MiB           1                                                           csvName, 
   189    536.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    536.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    536.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    536.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    536.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    536.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    536.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    547.3 MiB     10.6 MiB           1           disp.start_video_stream()
   199    555.5 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    555.5 MiB      0.0 MiB           1           if online:
   202   3772.8 MiB   3217.2 MiB           1               disp.init_online_processing()
   203                                         
   204   3772.8 MiB      0.0 MiB           1           t_interval = 10
   205   3772.8 MiB      0.0 MiB           1           t_avg = 0
   206   3772.8 MiB      0.0 MiB           1           t_print = time.time()
   207   3772.8 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3772.8 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3772.8 MiB      0.0 MiB           1           while True:
   212   3783.2 MiB      0.0 MiB        1503               t_start = time.time()
   213                                         
   214   3783.2 MiB     10.4 MiB        1503               disp.update_stream()
   215   3783.2 MiB      0.0 MiB        1503               disp.update_projector()
   216                                         
   217   3783.2 MiB      0.0 MiB        1503               t_end = time.time()
   218                                                     
   219   3783.2 MiB      0.0 MiB        1503               i += 1
   220   3783.2 MiB      0.0 MiB        1503               t_avg += t_end - t_start
   221                                         
   222   3783.2 MiB      0.0 MiB        1503               if t_end - t_print > t_interval:
   223   3783.2 MiB      0.0 MiB           5                   print(f"Average processing time: {t_avg / i}")
   224   3783.2 MiB      0.0 MiB           5                   i = 0
   225   3783.2 MiB      0.0 MiB           5                   t_print = time.time()
   226                                                             
   227   3783.2 MiB      0.0 MiB        1503               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   228   3783.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   229   3783.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   230   3783.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   231   3782.5 MiB     -0.7 MiB           1                   disp.end_stream()
   232   3768.7 MiB    -13.8 MiB           1                   disp.stop_projector()
   233   3768.7 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   234   3768.7 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   235   3769.0 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   236   3769.0 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   237                                                         
   238   3769.0 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.1 MiB    520.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3789.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    536.6 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    536.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    536.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    536.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    536.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    536.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    536.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    536.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    536.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    536.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    536.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    536.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    536.6 MiB      0.0 MiB           1                                                           vidName, 
   188    536.6 MiB      0.0 MiB           1                                                           csvName, 
   189    536.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    536.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    536.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    536.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    536.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    536.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    536.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    547.6 MiB     10.9 MiB           1           disp.start_video_stream()
   199    555.9 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    555.9 MiB      0.0 MiB           1           if online:
   202   3792.6 MiB   3236.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3792.6 MiB      0.0 MiB           1           t_interval = 5
   205   3792.6 MiB      0.0 MiB           1           t_avg = 0
   206   3792.6 MiB      0.0 MiB           1           t_print = time.time()
   207   3792.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3792.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3792.6 MiB      0.0 MiB           1           while True:
   212   3803.7 MiB      0.0 MiB        5116               t_start = time.time()
   213                                         
   214   3803.7 MiB     10.6 MiB        5116               disp.update_stream()
   215   3803.7 MiB      0.5 MiB        5116               disp.update_projector()
   216                                         
   217   3803.7 MiB      0.0 MiB        5116               t_end = time.time()
   218                                                     
   219   3803.7 MiB      0.0 MiB        5116               i += 1
   220   3803.7 MiB      0.0 MiB        5116               t_avg += t_end - t_start
   221                                         
   222   3803.7 MiB      0.0 MiB        5116               if t_end - t_print > t_interval:
   223   3803.7 MiB      0.0 MiB          65                   print(f"Average processing time: {t_avg / i}")
   224   3803.7 MiB      0.0 MiB          65                   i = 0
   225   3803.7 MiB      0.0 MiB          65                   t_print = time.time()
   226   3803.7 MiB      0.0 MiB          65                   t_avg = 0
   227                                                             
   228   3803.7 MiB      0.0 MiB        5116               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3803.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3803.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3803.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3802.9 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3789.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3789.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3789.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3789.2 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3789.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3789.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3789.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3789.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3789.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3789.2 MiB      0.0 MiB           1                   break
   244                                             
   245   3789.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.8 MiB    519.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3786.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    536.2 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    536.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    536.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    536.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    536.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    536.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    536.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    536.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    536.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    536.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    536.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    536.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    536.2 MiB      0.0 MiB           1                                                           vidName, 
   188    536.2 MiB      0.0 MiB           1                                                           csvName, 
   189    536.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    536.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    536.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    536.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    536.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    536.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    536.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    547.0 MiB     10.7 MiB           1           disp.start_video_stream()
   199    555.4 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    555.4 MiB      0.0 MiB           1           if online:
   202   3789.3 MiB   3233.9 MiB           1               disp.init_online_processing()
   203                                         
   204   3789.3 MiB      0.0 MiB           1           t_interval = 5
   205   3789.3 MiB      0.0 MiB           1           t_avg = 0
   206   3789.3 MiB      0.0 MiB           1           t_print = time.time()
   207   3789.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3789.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3789.3 MiB      0.0 MiB           1           while True:
   212   3801.1 MiB      0.0 MiB        2321               t_start = time.time()
   213                                         
   214   3801.1 MiB     10.7 MiB        2321               disp.update_stream()
   215   3801.2 MiB      1.1 MiB        2321               disp.update_projector()
   216                                         
   217   3801.2 MiB      0.0 MiB        2321               t_end = time.time()
   218                                                     
   219   3801.2 MiB      0.0 MiB        2321               i += 1
   220   3801.2 MiB      0.0 MiB        2321               t_avg += t_end - t_start
   221                                         
   222   3801.2 MiB      0.0 MiB        2321               if t_end - t_print > t_interval:
   223   3801.1 MiB      0.0 MiB          26                   print(f"Average processing time: {t_avg / i}")
   224   3801.1 MiB      0.0 MiB          26                   i = 0
   225   3801.1 MiB      0.0 MiB          26                   t_print = time.time()
   226   3801.1 MiB      0.0 MiB          26                   t_avg = 0
   227                                                             
   228   3801.2 MiB      0.0 MiB        2321               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3801.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3801.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3801.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3800.4 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3786.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3786.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3786.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3786.6 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3786.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3786.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3786.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3786.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3786.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3786.6 MiB      0.0 MiB           1                   break
   244                                             
   245   3786.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.3 MiB    522.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3778.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.7 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.7 MiB      0.0 MiB           1                                                           vidName, 
   188    538.7 MiB      0.0 MiB           1                                                           csvName, 
   189    538.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.5 MiB     10.8 MiB           1           disp.start_video_stream()
   199    557.9 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    557.9 MiB      0.0 MiB           1           if online:
   202   3781.7 MiB   3223.8 MiB           1               disp.init_online_processing()
   203                                         
   204   3781.7 MiB      0.0 MiB           1           t_interval = 5
   205   3781.7 MiB      0.0 MiB           1           t_avg = 0
   206   3781.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3781.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3781.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3781.7 MiB      0.0 MiB           1           while True:
   212   3793.3 MiB      0.0 MiB        1594               t_start = time.time()
   213                                         
   214   3793.5 MiB     11.0 MiB        1594               disp.update_stream()
   215   3793.5 MiB      0.7 MiB        1594               disp.update_projector()
   216                                         
   217   3793.5 MiB      0.0 MiB        1594               t_end = time.time()
   218                                                     
   219   3793.5 MiB      0.0 MiB        1594               i += 1
   220   3793.5 MiB      0.0 MiB        1594               t_avg += t_end - t_start
   221                                         
   222   3793.5 MiB      0.0 MiB        1594               if t_end - t_print > t_interval:
   223   3793.3 MiB      0.0 MiB          23                   print(f"Average processing time: {t_avg / i}")
   224   3793.3 MiB      0.0 MiB          23                   i = 0
   225   3793.3 MiB      0.0 MiB          23                   t_print = time.time()
   226   3793.3 MiB      0.0 MiB          23                   t_avg = 0
   227                                                             
   228   3793.5 MiB      0.0 MiB        1594               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3793.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3793.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3793.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3792.7 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3778.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3778.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3778.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3778.9 MiB     -0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3778.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3778.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3778.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3778.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3778.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3778.9 MiB      0.0 MiB           1                   break
   244                                             
   245   3778.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.5 MiB    520.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3811.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    536.9 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    536.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    536.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    536.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    536.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    536.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    536.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    536.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    536.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    536.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    536.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    536.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    536.9 MiB      0.0 MiB           1                                                           vidName, 
   188    536.9 MiB      0.0 MiB           1                                                           csvName, 
   189    536.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    536.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    547.8 MiB     10.8 MiB           1           disp.start_video_stream()
   199    556.1 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    556.1 MiB      0.0 MiB           1           if online:
   202   3814.8 MiB   3258.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3814.8 MiB      0.0 MiB           1           t_interval = 5
   205   3814.8 MiB      0.0 MiB           1           t_avg = 0
   206   3814.8 MiB      0.0 MiB           1           t_print = time.time()
   207   3814.8 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3814.8 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3814.8 MiB      0.0 MiB           1           while True:
   212   3825.5 MiB      0.0 MiB        8324               t_start = time.time()
   213                                         
   214   3825.5 MiB     10.5 MiB        8324               disp.update_stream()
   215   3825.5 MiB      0.2 MiB        8324               disp.update_projector()
   216                                         
   217   3825.6 MiB      0.0 MiB        8324               t_end = time.time()
   218                                                     
   219   3825.6 MiB      0.0 MiB        8324               i += 1
   220   3825.6 MiB      0.0 MiB        8324               t_avg += t_end - t_start
   221                                         
   222   3825.6 MiB      0.0 MiB        8324               if t_end - t_print > t_interval:
   223   3825.5 MiB      0.0 MiB          79                   print(f"Average processing time: {t_avg / i}")
   224   3825.5 MiB      0.0 MiB          79                   i = 0
   225   3825.5 MiB      0.0 MiB          79                   t_print = time.time()
   226   3825.5 MiB      0.0 MiB          79                   t_avg = 0
   227                                                             
   228   3825.6 MiB      0.0 MiB        8324               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3825.6 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3825.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3825.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3824.9 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3811.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3811.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3811.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3811.2 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3811.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3811.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3811.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3811.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3811.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3811.2 MiB      0.0 MiB           1                   break
   244                                             
   245   3811.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.4 MiB    520.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3783.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    536.8 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    536.8 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    536.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    536.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    536.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    536.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    536.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    536.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    536.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    536.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    536.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    536.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    536.8 MiB      0.0 MiB           1                                                           vidName, 
   188    536.8 MiB      0.0 MiB           1                                                           csvName, 
   189    536.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    536.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    536.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    536.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    536.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    536.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    536.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    547.3 MiB     10.5 MiB           1           disp.start_video_stream()
   199    555.6 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    555.6 MiB      0.0 MiB           1           if online:
   202   3786.1 MiB   3230.5 MiB           1               disp.init_online_processing()
   203                                         
   204   3786.1 MiB      0.0 MiB           1           t_interval = 5
   205   3786.1 MiB      0.0 MiB           1           t_avg = 0
   206   3786.1 MiB      0.0 MiB           1           t_print = time.time()
   207   3786.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3786.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3786.1 MiB      0.0 MiB           1           while True:
   212   3797.7 MiB      0.0 MiB        3149               t_start = time.time()
   213                                         
   214   3797.7 MiB     10.4 MiB        3149               disp.update_stream()
   215   3797.8 MiB      1.3 MiB        3149               disp.update_projector()
   216                                         
   217   3797.8 MiB      0.0 MiB        3149               t_end = time.time()
   218                                                     
   219   3797.8 MiB      0.0 MiB        3149               i += 1
   220   3797.8 MiB      0.0 MiB        3149               t_avg += t_end - t_start
   221                                         
   222   3797.8 MiB      0.0 MiB        3149               if t_end - t_print > t_interval:
   223   3797.7 MiB      0.0 MiB          34                   print(f"Average processing time: {t_avg / i}")
   224   3797.7 MiB      0.0 MiB          34                   i = 0
   225   3797.7 MiB      0.0 MiB          34                   t_print = time.time()
   226   3797.7 MiB      0.0 MiB          34                   t_avg = 0
   227                                                             
   228   3797.8 MiB      0.0 MiB        3149               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3797.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3797.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3797.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3796.9 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3783.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3783.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3783.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3783.2 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3783.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3783.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3783.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3783.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3783.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3783.2 MiB      0.0 MiB           1                   break
   244                                             
   245   3783.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.5 MiB    521.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3774.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.0 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.0 MiB      0.0 MiB           1                                                           vidName, 
   188    538.0 MiB      0.0 MiB           1                                                           csvName, 
   189    538.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.1 MiB     11.1 MiB           1           disp.start_video_stream()
   199    557.3 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    557.3 MiB      0.0 MiB           1           if online:
   202   3795.5 MiB   3238.2 MiB           1               disp.init_online_processing()
   203                                         
   204   3795.5 MiB      0.0 MiB           1           t_interval = 5
   205   3795.5 MiB      0.0 MiB           1           t_avg = 0
   206   3795.5 MiB      0.0 MiB           1           t_print = time.time()
   207   3795.5 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3795.5 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3795.5 MiB      0.0 MiB           1           while True:
   212   3805.1 MiB -92738.7 MiB        9486               t_start = time.time()
   213                                         
   214   3805.1 MiB -92729.5 MiB        9486               disp.update_stream()
   215   3805.1 MiB -92754.1 MiB        9486               disp.update_projector()
   216                                         
   217   3805.1 MiB -92754.5 MiB        9486               t_end = time.time()
   218                                                     
   219   3805.1 MiB -92754.5 MiB        9486               i += 1
   220   3805.1 MiB -92754.5 MiB        9486               t_avg += t_end - t_start
   221                                         
   222   3805.1 MiB -92754.4 MiB        9486               if t_end - t_print > t_interval:
   223   3805.0 MiB  -1044.1 MiB          93                   print(f"Average processing time: {t_avg / i}")
   224   3805.0 MiB  -1038.2 MiB          93                   i = 0
   225   3805.0 MiB  -1038.2 MiB          93                   t_print = time.time()
   226   3805.0 MiB  -1038.2 MiB          93                   t_avg = 0
   227                                                             
   228   3805.1 MiB -92748.4 MiB        9486               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3789.4 MiB    -15.7 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3789.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3789.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3788.7 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3774.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3774.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3774.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3774.9 MiB     -0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3774.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3774.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3774.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3774.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3774.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3774.9 MiB      0.0 MiB           1                   break
   244                                             
   245   3774.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.7 MiB    521.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3797.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.1 MiB      0.0 MiB           1                                                           vidName, 
   188    538.1 MiB      0.0 MiB           1                                                           csvName, 
   189    538.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.9 MiB     10.8 MiB           1           disp.start_video_stream()
   199    557.2 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    557.2 MiB      0.0 MiB           1           if online:
   202   3801.5 MiB   3244.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3801.5 MiB      0.0 MiB           1           t_interval = 5
   205   3801.5 MiB      0.0 MiB           1           t_avg = 0
   206   3801.5 MiB      0.0 MiB           1           t_print = time.time()
   207   3801.5 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3801.5 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3801.5 MiB      0.0 MiB           1           while True:
   212   3811.9 MiB      0.0 MiB        4535               t_start = time.time()
   213                                         
   214   3811.9 MiB     10.1 MiB        4535               disp.update_stream()
   215   3811.9 MiB      0.4 MiB        4535               disp.update_projector()
   216                                         
   217   3811.9 MiB      0.0 MiB        4535               t_end = time.time()
   218                                                     
   219   3811.9 MiB      0.0 MiB        4535               i += 1
   220   3811.9 MiB      0.0 MiB        4535               t_avg += t_end - t_start
   221                                         
   222   3811.9 MiB      0.0 MiB        4535               if t_end - t_print > t_interval:
   223   3811.9 MiB      0.0 MiB          41                   print(f"Average processing time: {t_avg / i}")
   224   3811.9 MiB      0.0 MiB          41                   i = 0
   225   3811.9 MiB      0.0 MiB          41                   t_print = time.time()
   226   3811.9 MiB      0.0 MiB          41                   t_avg = 0
   227                                                             
   228   3812.0 MiB      0.1 MiB        4535               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3812.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3812.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3812.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3811.2 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3797.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3797.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3797.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3797.5 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3797.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3797.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3797.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3797.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3797.5 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3797.5 MiB      0.0 MiB           1                   break
   244                                             
   245   3797.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.4 MiB    521.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3830.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.9 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.9 MiB      0.0 MiB           1                                                           vidName, 
   188    537.9 MiB      0.0 MiB           1                                                           csvName, 
   189    537.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.9 MiB     11.0 MiB           1           disp.start_video_stream()
   199    557.3 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    557.3 MiB      0.0 MiB           1           if online:
   202   3833.1 MiB   3275.9 MiB           1               disp.init_online_processing()
   203                                         
   204   3833.1 MiB      0.0 MiB           1           t_interval = 5
   205   3833.1 MiB      0.0 MiB           1           t_avg = 0
   206   3833.1 MiB      0.0 MiB           1           t_print = time.time()
   207   3833.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3833.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3833.1 MiB      0.0 MiB           1           while True:
   212   3844.7 MiB      0.0 MiB        1362               t_start = time.time()
   213                                         
   214   3844.7 MiB     11.4 MiB        1362               disp.update_stream()
   215   3844.7 MiB      0.2 MiB        1362               disp.update_projector()
   216                                         
   217   3844.7 MiB      0.0 MiB        1362               t_end = time.time()
   218                                                     
   219   3844.7 MiB      0.0 MiB        1362               i += 1
   220   3844.7 MiB      0.0 MiB        1362               t_avg += t_end - t_start
   221                                         
   222   3844.7 MiB      0.0 MiB        1362               if t_end - t_print > t_interval:
   223   3844.7 MiB      0.0 MiB          16                   print(f"Average processing time: {t_avg / i}")
   224   3844.7 MiB      0.0 MiB          16                   i = 0
   225   3844.7 MiB      0.0 MiB          16                   t_print = time.time()
   226   3844.7 MiB      0.0 MiB          16                   t_avg = 0
   227                                                             
   228   3844.7 MiB      0.0 MiB        1362               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3844.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3844.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3844.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3843.9 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3830.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3830.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3830.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3830.1 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3830.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3830.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3830.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3830.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3830.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3830.1 MiB      0.0 MiB           1                   break
   244                                             
   245   3830.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.9 MiB    521.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    556.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.3 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.3 MiB      0.0 MiB           1                                                           vidName, 
   188    538.3 MiB      0.0 MiB           1                                                           csvName, 
   189    538.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.4 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.3 MiB     11.0 MiB           1           disp.start_video_stream()
   199    557.6 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    557.6 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    557.6 MiB      0.0 MiB           1           t_interval = 5
   205    557.6 MiB      0.0 MiB           1           t_avg = 0
   206    557.6 MiB      0.0 MiB           1           t_print = time.time()
   207    557.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209    557.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    557.6 MiB      0.0 MiB           1           while True:
   212    569.7 MiB      0.0 MiB        7818               t_start = time.time()
   213                                         
   214    569.7 MiB      0.9 MiB        7818               disp.update_stream()
   215    569.8 MiB     11.2 MiB        7818               disp.update_projector()
   216                                         
   217    569.8 MiB      0.0 MiB        7818               t_end = time.time()
   218                                                     
   219    569.8 MiB      0.0 MiB        7818               i += 1
   220    569.8 MiB      0.1 MiB        7818               t_avg += t_end - t_start
   221                                         
   222    569.8 MiB      0.0 MiB        7818               if t_end - t_print > t_interval:
   223    569.7 MiB      0.0 MiB          72                   print(f"Average processing time: {t_avg / i}")
   224    569.7 MiB      0.0 MiB          72                   i = 0
   225    569.7 MiB      0.0 MiB          72                   t_print = time.time()
   226    569.7 MiB      0.0 MiB          72                   t_avg = 0
   227                                                             
   228    569.8 MiB      0.0 MiB        7818               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    569.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    569.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    569.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    569.7 MiB     -0.1 MiB           1                   disp.end_stream()
   233    555.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    555.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    555.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    556.1 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    556.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    556.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    556.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    556.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    556.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243    556.1 MiB      0.0 MiB           1                   break
   244                                             
   245    556.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.6 MiB    522.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3889.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    539.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    539.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    539.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    539.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    539.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    539.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    539.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    539.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    539.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    539.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    539.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    539.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    539.0 MiB      0.0 MiB           1                                                           vidName, 
   188    539.0 MiB      0.0 MiB           1                                                           csvName, 
   189    539.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    539.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    539.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    539.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    539.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    539.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    539.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.9 MiB     10.8 MiB           1           disp.start_video_stream()
   199    558.3 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    558.3 MiB      0.0 MiB           1           if online:
   202   3892.0 MiB   3333.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3892.0 MiB      0.0 MiB           1           t_interval = 5
   205   3892.0 MiB      0.0 MiB           1           t_avg = 0
   206   3892.0 MiB      0.0 MiB           1           t_print = time.time()
   207   3892.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3892.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3892.0 MiB      0.0 MiB           1           while True:
   212   3903.8 MiB      0.0 MiB        3301               t_start = time.time()
   213                                         
   214   3903.8 MiB     10.6 MiB        3301               disp.update_stream()
   215   3903.8 MiB      1.3 MiB        3301               disp.update_projector()
   216                                         
   217   3903.8 MiB      0.0 MiB        3301               t_end = time.time()
   218                                                     
   219   3903.8 MiB      0.0 MiB        3301               i += 1
   220   3903.8 MiB      0.0 MiB        3301               t_avg += t_end - t_start
   221                                         
   222   3903.8 MiB      0.0 MiB        3301               if t_end - t_print > t_interval:
   223   3903.8 MiB      0.0 MiB          28                   print(f"Average processing time: {t_avg / i}")
   224   3903.8 MiB      0.0 MiB          28                   i = 0
   225   3903.8 MiB      0.0 MiB          28                   t_print = time.time()
   226   3903.8 MiB      0.0 MiB          28                   t_avg = 0
   227                                                             
   228   3903.8 MiB      0.0 MiB        3301               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3903.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3903.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3903.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3903.0 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3889.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3889.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3889.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3889.3 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3889.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3889.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3889.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3889.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3889.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3889.3 MiB      0.0 MiB           1                   break
   244                                             
   245   3889.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.8 MiB    521.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3801.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.2 MiB      0.0 MiB           1                                                           vidName, 
   188    538.2 MiB      0.0 MiB           1                                                           csvName, 
   189    538.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.7 MiB     10.5 MiB           1           disp.start_video_stream()
   199    557.0 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    557.0 MiB      0.0 MiB           1           if online:
   202   3804.9 MiB   3247.9 MiB           1               disp.init_online_processing()
   203                                         
   204   3804.9 MiB      0.0 MiB           1           t_interval = 5
   205   3804.9 MiB      0.0 MiB           1           t_avg = 0
   206   3804.9 MiB      0.0 MiB           1           t_print = time.time()
   207   3804.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3804.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3804.9 MiB      0.0 MiB           1           while True:
   212   3816.3 MiB      0.0 MiB        5248               t_start = time.time()
   213                                         
   214   3816.3 MiB      9.9 MiB        5248               disp.update_stream()
   215   3816.3 MiB      1.5 MiB        5248               disp.update_projector()
   216                                         
   217   3816.3 MiB      0.0 MiB        5248               t_end = time.time()
   218                                                     
   219   3816.3 MiB      0.0 MiB        5248               i += 1
   220   3816.3 MiB      0.0 MiB        5248               t_avg += t_end - t_start
   221                                         
   222   3816.3 MiB      0.0 MiB        5248               if t_end - t_print > t_interval:
   223   3816.3 MiB      0.0 MiB          87                   print(f"Average processing time: {t_avg / i}")
   224   3816.3 MiB      0.0 MiB          87                   i = 0
   225   3816.3 MiB      0.0 MiB          87                   t_print = time.time()
   226   3816.3 MiB      0.0 MiB          87                   t_avg = 0
   227                                                             
   228   3816.3 MiB      0.0 MiB        5248               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3816.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3816.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3816.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3815.7 MiB     -0.6 MiB           1                   disp.end_stream()
   233   3801.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3801.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3801.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3801.9 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3801.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3801.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3801.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3801.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3801.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3801.9 MiB      0.0 MiB           1                   break
   244                                             
   245   3801.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.8 MiB    520.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3803.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.2 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.2 MiB      0.0 MiB           1                                                           vidName, 
   188    537.2 MiB      0.0 MiB           1                                                           csvName, 
   189    537.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.2 MiB     11.0 MiB           1           disp.start_video_stream()
   199    556.5 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    556.5 MiB      0.0 MiB           1           if online:
   202   3805.9 MiB   3249.4 MiB           1               disp.init_online_processing()
   203                                         
   204   3805.9 MiB      0.0 MiB           1           t_interval = 5
   205   3805.9 MiB      0.0 MiB           1           t_avg = 0
   206   3805.9 MiB      0.0 MiB           1           t_print = time.time()
   207   3805.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3805.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3805.9 MiB      0.0 MiB           1           while True:
   212   3818.5 MiB      0.0 MiB        4203               t_start = time.time()
   213                                         
   214   3818.5 MiB     11.0 MiB        4203               disp.update_stream()
   215   3818.5 MiB      1.6 MiB        4203               disp.update_projector()
   216                                         
   217   3818.5 MiB      0.0 MiB        4203               t_end = time.time()
   218                                                     
   219   3818.5 MiB      0.0 MiB        4203               i += 1
   220   3818.5 MiB      0.0 MiB        4203               t_avg += t_end - t_start
   221                                         
   222   3818.5 MiB      0.0 MiB        4203               if t_end - t_print > t_interval:
   223   3818.5 MiB      0.0 MiB          80                   print(f"Average processing time: {t_avg / i}")
   224   3818.5 MiB      0.0 MiB          80                   i = 0
   225   3818.5 MiB      0.0 MiB          80                   t_print = time.time()
   226   3818.5 MiB      0.0 MiB          80                   t_avg = 0
   227                                                             
   228   3818.5 MiB      0.0 MiB        4203               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3818.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3818.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3818.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3817.6 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3803.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3803.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3803.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3803.9 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3803.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3803.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3803.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3803.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3803.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3803.9 MiB      0.0 MiB           1                   break
   244                                             
   245   3803.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.9 MiB    520.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3796.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.3 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.4 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.4 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.4 MiB      0.0 MiB           1                                                           vidName, 
   188    537.4 MiB      0.0 MiB           1                                                           csvName, 
   189    537.4 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.4 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.4 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.5 MiB     11.1 MiB           1           disp.start_video_stream()
   199    556.8 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    556.8 MiB      0.0 MiB           1           if online:
   202   3799.2 MiB   3242.5 MiB           1               disp.init_online_processing()
   203                                         
   204   3799.2 MiB      0.0 MiB           1           t_interval = 5
   205   3799.2 MiB      0.0 MiB           1           t_avg = 0
   206   3799.2 MiB      0.0 MiB           1           t_print = time.time()
   207   3799.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3799.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3799.2 MiB      0.0 MiB           1           while True:
   212   3811.2 MiB      0.0 MiB        4480               t_start = time.time()
   213                                         
   214   3811.2 MiB     11.4 MiB        4480               disp.update_stream()
   215   3811.2 MiB      0.5 MiB        4480               disp.update_projector()
   216                                         
   217   3811.2 MiB      0.0 MiB        4480               t_end = time.time()
   218                                                     
   219   3811.2 MiB      0.0 MiB        4480               i += 1
   220   3811.2 MiB      0.0 MiB        4480               t_avg += t_end - t_start
   221                                         
   222   3811.2 MiB      0.0 MiB        4480               if t_end - t_print > t_interval:
   223   3811.2 MiB      0.0 MiB          64                   print(f"Average processing time: {t_avg / i}")
   224   3811.2 MiB      0.0 MiB          64                   i = 0
   225   3811.2 MiB      0.0 MiB          64                   t_print = time.time()
   226   3811.2 MiB      0.0 MiB          64                   t_avg = 0
   227                                                             
   228   3811.2 MiB      0.0 MiB        4480               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3811.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3811.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3811.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3810.4 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3796.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3796.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3796.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3796.8 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237   3796.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3796.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3796.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3796.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3796.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3796.8 MiB      0.0 MiB           1                   break
   244                                             
   245   3796.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.1 MiB    520.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3844.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    536.5 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    536.5 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    536.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    536.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    536.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    536.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    536.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    536.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    536.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    536.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    536.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    536.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    536.5 MiB      0.0 MiB           1                                                           vidName, 
   188    536.5 MiB      0.0 MiB           1                                                           csvName, 
   189    536.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    536.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    536.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    536.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    536.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    536.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    536.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    547.1 MiB     10.6 MiB           1           disp.start_video_stream()
   199    555.5 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    555.5 MiB      0.0 MiB           1           if online:
   202   3863.1 MiB   3307.5 MiB           1               disp.init_online_processing()
   203                                         
   204   3863.1 MiB      0.0 MiB           1           t_interval = 5
   205   3863.1 MiB      0.0 MiB           1           t_avg = 0
   206   3863.1 MiB      0.0 MiB           1           t_print = time.time()
   207   3863.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3863.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3863.1 MiB      0.0 MiB           1           while True:
   212   3875.0 MiB -41000.6 MiB        6517               t_start = time.time()
   213                                         
   214   3875.0 MiB -40989.4 MiB        6517               disp.update_stream()
   215   3875.0 MiB -41015.6 MiB        6517               disp.update_projector()
   216                                         
   217   3875.0 MiB -41016.4 MiB        6517               t_end = time.time()
   218                                                     
   219   3875.0 MiB -41016.4 MiB        6517               i += 1
   220   3875.0 MiB -41016.4 MiB        6517               t_avg += t_end - t_start
   221                                         
   222   3875.0 MiB -41016.4 MiB        6517               if t_end - t_print > t_interval:
   223   3875.0 MiB   -807.0 MiB         127                   print(f"Average processing time: {t_avg / i}")
   224   3875.0 MiB   -807.0 MiB         127                   i = 0
   225   3875.0 MiB   -807.0 MiB         127                   t_print = time.time()
   226   3875.0 MiB   -807.0 MiB         127                   t_avg = 0
   227                                                             
   228   3875.0 MiB -41016.4 MiB        6517               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3859.1 MiB    -15.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3859.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3859.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3858.4 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3844.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3844.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3844.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3844.6 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3844.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3844.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3844.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3844.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3844.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3844.6 MiB      0.0 MiB           1                   break
   244                                             
   245   3844.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    505.7 MiB    505.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    505.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    505.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    505.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    505.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    505.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    505.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    505.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    505.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    505.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    539.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    522.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    522.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    522.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    522.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    522.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    522.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    522.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    522.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    522.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    522.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    522.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    522.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    522.1 MiB      0.0 MiB           1                                                           vidName, 
   188    522.1 MiB      0.0 MiB           1                                                           csvName, 
   189    522.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    522.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    522.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    522.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    522.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    522.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    522.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    533.3 MiB     11.2 MiB           1           disp.start_video_stream()
   199    541.5 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    541.5 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    541.5 MiB      0.0 MiB           1           t_interval = 5
   205    541.5 MiB      0.0 MiB           1           t_avg = 0
   206    541.5 MiB      0.0 MiB           1           t_print = time.time()
   207    541.5 MiB      0.0 MiB           1           i = 0
   208                                         
   209    541.5 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    541.5 MiB      0.0 MiB           1           while True:
   212    553.6 MiB      0.0 MiB        3532               t_start = time.time()
   213                                         
   214    553.6 MiB      0.9 MiB        3532               disp.update_stream()
   215    553.6 MiB     11.0 MiB        3532               disp.update_projector()
   216                                         
   217    553.6 MiB      0.2 MiB        3532               t_end = time.time()
   218                                                     
   219    553.6 MiB      0.0 MiB        3532               i += 1
   220    553.6 MiB      0.0 MiB        3532               t_avg += t_end - t_start
   221                                         
   222    553.6 MiB      0.0 MiB        3532               if t_end - t_print > t_interval:
   223    553.6 MiB      0.0 MiB          24                   print(f"Average processing time: {t_avg / i}")
   224    553.6 MiB      0.0 MiB          24                   i = 0
   225    553.6 MiB      0.0 MiB          24                   t_print = time.time()
   226    553.6 MiB      0.0 MiB          24                   t_avg = 0
   227                                                             
   228    553.6 MiB      0.0 MiB        3532               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    553.6 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    553.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    553.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    553.0 MiB     -0.6 MiB           1                   disp.end_stream()
   233    539.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    539.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    539.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    539.5 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    539.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    539.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    539.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    539.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    539.5 MiB      0.0 MiB           1                   vprint("User ready!")
   243    539.5 MiB      0.0 MiB           1                   break
   244                                             
   245    539.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    508.5 MiB    508.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    508.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    508.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    508.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    508.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    508.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    508.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    508.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    508.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    508.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    541.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    524.9 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    524.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    524.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    524.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    524.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    524.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    524.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    524.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    524.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    524.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    524.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    524.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    524.9 MiB      0.0 MiB           1                                                           vidName, 
   188    524.9 MiB      0.0 MiB           1                                                           csvName, 
   189    524.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    524.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    524.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    524.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    524.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    524.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    524.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.4 MiB     10.5 MiB           1           disp.start_video_stream()
   199    543.8 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    543.8 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    543.8 MiB      0.0 MiB           1           t_interval = 5
   205    543.8 MiB      0.0 MiB           1           t_avg = 0
   206    543.8 MiB      0.0 MiB           1           t_print = time.time()
   207    543.8 MiB      0.0 MiB           1           i = 0
   208                                         
   209    543.8 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    543.8 MiB      0.0 MiB           1           while True:
   212    555.8 MiB      0.0 MiB        7095               t_start = time.time()
   213                                         
   214    555.8 MiB      1.0 MiB        7095               disp.update_stream()
   215    555.8 MiB     10.9 MiB        7095               disp.update_projector()
   216                                         
   217    555.8 MiB      0.0 MiB        7095               t_end = time.time()
   218                                                     
   219    555.8 MiB      0.0 MiB        7095               i += 1
   220    555.8 MiB      0.0 MiB        7095               t_avg += t_end - t_start
   221                                         
   222    555.8 MiB      0.0 MiB        7095               if t_end - t_print > t_interval:
   223    555.8 MiB      0.0 MiB          65                   print(f"Average processing time: {t_avg / i}")
   224    555.8 MiB      0.0 MiB          65                   i = 0
   225    555.8 MiB      0.0 MiB          65                   t_print = time.time()
   226    555.8 MiB      0.0 MiB          65                   t_avg = 0
   227                                                             
   228    555.8 MiB      0.0 MiB        7095               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    555.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    555.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    555.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    555.2 MiB     -0.6 MiB           1                   disp.end_stream()
   233    541.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    541.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    541.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    541.7 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    541.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    541.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    541.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    541.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    541.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243    541.7 MiB      0.0 MiB           1                   break
   244                                             
   245    541.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    507.3 MiB    507.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    507.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    507.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    507.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    507.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    507.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    507.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    507.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    507.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    507.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    540.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    523.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    523.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    523.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    523.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    523.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    523.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    523.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    523.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    523.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    523.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    523.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    523.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    523.6 MiB      0.0 MiB           1                                                           vidName, 
   188    523.6 MiB      0.0 MiB           1                                                           csvName, 
   189    523.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    523.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    523.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    523.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    523.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    523.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    523.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    534.2 MiB     10.5 MiB           1           disp.start_video_stream()
   199    542.4 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    542.4 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    542.4 MiB      0.0 MiB           1           t_interval = 5
   205    542.4 MiB      0.0 MiB           1           t_avg = 0
   206    542.4 MiB      0.0 MiB           1           t_print = time.time()
   207    542.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209    542.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    542.4 MiB      0.0 MiB           1           while True:
   212    554.3 MiB      0.0 MiB        2611               t_start = time.time()
   213                                         
   214    554.3 MiB      1.0 MiB        2611               disp.update_stream()
   215    554.3 MiB     10.6 MiB        2611               disp.update_projector()
   216                                         
   217    554.3 MiB      0.2 MiB        2611               t_end = time.time()
   218                                                     
   219    554.3 MiB      0.0 MiB        2611               i += 1
   220    554.3 MiB      0.0 MiB        2611               t_avg += t_end - t_start
   221                                         
   222    554.3 MiB      0.0 MiB        2611               if t_end - t_print > t_interval:
   223    554.3 MiB      0.0 MiB          17                   print(f"Average processing time: {t_avg / i}")
   224    554.3 MiB      0.0 MiB          17                   i = 0
   225    554.3 MiB      0.0 MiB          17                   t_print = time.time()
   226    554.3 MiB      0.0 MiB          17                   t_avg = 0
   227                                                             
   228    554.3 MiB      0.0 MiB        2611               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    554.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    554.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    554.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    553.6 MiB     -0.6 MiB           1                   disp.end_stream()
   233    539.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    539.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    539.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    540.2 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    540.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    540.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    540.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    540.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    540.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243    540.2 MiB      0.0 MiB           1                   break
   244                                             
   245    540.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    507.3 MiB    507.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    507.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    507.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    507.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    507.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    507.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    507.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    507.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    507.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    507.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    540.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    523.7 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    523.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    523.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    523.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    523.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    523.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    523.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    523.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    523.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    523.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    523.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    523.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    523.7 MiB      0.0 MiB           1                                                           vidName, 
   188    523.7 MiB      0.0 MiB           1                                                           csvName, 
   189    523.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    523.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    523.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    523.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    523.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    523.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    523.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    534.5 MiB     10.7 MiB           1           disp.start_video_stream()
   199    542.8 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    542.8 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    542.8 MiB      0.0 MiB           1           t_interval = 5
   205    542.8 MiB      0.0 MiB           1           t_avg = 0
   206    542.8 MiB      0.0 MiB           1           t_print = time.time()
   207    542.8 MiB      0.0 MiB           1           i = 0
   208                                         
   209    542.8 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    542.8 MiB      0.0 MiB           1           while True:
   212    554.8 MiB      0.0 MiB       11124               t_start = time.time()
   213                                         
   214    554.8 MiB      1.0 MiB       11124               disp.update_stream()
   215    554.8 MiB     11.1 MiB       11124               disp.update_projector()
   216                                         
   217    554.8 MiB      0.0 MiB       11124               t_end = time.time()
   218                                                     
   219    554.8 MiB      0.0 MiB       11124               i += 1
   220    554.8 MiB      0.0 MiB       11124               t_avg += t_end - t_start
   221                                         
   222    554.8 MiB      0.0 MiB       11124               if t_end - t_print > t_interval:
   223    554.8 MiB      0.0 MiB         105                   print(f"Average processing time: {t_avg / i}")
   224    554.8 MiB      0.0 MiB         105                   i = 0
   225    554.8 MiB      0.0 MiB         105                   t_print = time.time()
   226    554.8 MiB      0.0 MiB         105                   t_avg = 0
   227                                                             
   228    554.8 MiB      0.0 MiB       11124               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    554.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    554.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    554.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    554.2 MiB     -0.6 MiB           1                   disp.end_stream()
   233    540.5 MiB    -13.7 MiB           1                   disp.stop_projector()
   234    540.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    540.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    540.8 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    540.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    540.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    540.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    540.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    540.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243    540.8 MiB      0.0 MiB           1                   break
   244                                             
   245    540.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    506.7 MiB    506.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    506.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    506.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    506.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    506.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    506.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    506.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    506.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    506.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    506.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    540.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    523.2 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    523.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    523.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    523.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    523.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    523.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    523.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    523.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    523.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    523.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    523.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    523.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    523.2 MiB      0.0 MiB           1                                                           vidName, 
   188    523.2 MiB      0.0 MiB           1                                                           csvName, 
   189    523.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    523.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    523.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    523.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    523.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    523.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    523.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    534.2 MiB     11.0 MiB           1           disp.start_video_stream()
   199    542.4 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    542.4 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    542.4 MiB      0.0 MiB           1           t_interval = 5
   205    542.4 MiB      0.0 MiB           1           t_avg = 0
   206    542.4 MiB      0.0 MiB           1           t_print = time.time()
   207    542.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209    542.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    542.4 MiB      0.0 MiB           1           while True:
   212    554.3 MiB      0.0 MiB       10592               t_start = time.time()
   213                                         
   214    554.4 MiB      1.0 MiB       10592               disp.update_stream()
   215    554.4 MiB     11.0 MiB       10592               disp.update_projector()
   216                                         
   217    554.4 MiB      0.0 MiB       10592               t_end = time.time()
   218                                                     
   219    554.4 MiB      0.0 MiB       10592               i += 1
   220    554.4 MiB      0.0 MiB       10592               t_avg += t_end - t_start
   221                                         
   222    554.4 MiB      0.0 MiB       10592               if t_end - t_print > t_interval:
   223    554.3 MiB      0.0 MiB          96                   print(f"Average processing time: {t_avg / i}")
   224    554.3 MiB      0.0 MiB          96                   i = 0
   225    554.3 MiB      0.0 MiB          96                   t_print = time.time()
   226    554.3 MiB      0.0 MiB          96                   t_avg = 0
   227                                                             
   228    554.4 MiB      0.0 MiB       10592               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    554.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    554.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    554.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    553.8 MiB     -0.6 MiB           1                   disp.end_stream()
   233    540.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    540.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    540.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    540.2 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    540.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    540.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    540.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    540.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    540.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243    540.2 MiB      0.0 MiB           1                   break
   244                                             
   245    540.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    508.7 MiB    508.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    508.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    508.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    508.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    508.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    508.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    508.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    508.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    508.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    508.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3741.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    525.0 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    525.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    525.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    525.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    525.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    525.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    525.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    525.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    525.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    525.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    525.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    525.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    525.0 MiB      0.0 MiB           1                                                           vidName, 
   188    525.0 MiB      0.0 MiB           1                                                           csvName, 
   189    525.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    525.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.1 MiB      0.1 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.6 MiB     10.5 MiB           1           disp.start_video_stream()
   199    543.9 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    543.9 MiB      0.0 MiB           1           if online:
   202   3744.7 MiB   3200.8 MiB           1               disp.init_online_processing()
   203                                         
   204   3744.7 MiB      0.0 MiB           1           t_interval = 5
   205   3744.7 MiB      0.0 MiB           1           t_avg = 0
   206   3744.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3744.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3744.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3744.7 MiB      0.0 MiB           1           while True:
   212   3756.2 MiB      0.0 MiB       16340               t_start = time.time()
   213                                         
   214   3756.2 MiB     10.3 MiB       16340               disp.update_stream()
   215   3756.3 MiB      1.3 MiB       16340               disp.update_projector()
   216                                         
   217   3756.3 MiB      0.0 MiB       16340               t_end = time.time()
   218                                                     
   219   3756.3 MiB      0.0 MiB       16340               i += 1
   220   3756.3 MiB      0.0 MiB       16340               t_avg += t_end - t_start
   221                                         
   222   3756.3 MiB      0.0 MiB       16340               if t_end - t_print > t_interval:
   223   3756.2 MiB      0.0 MiB         180                   print(f"Average processing time: {t_avg / i}")
   224   3756.2 MiB      0.0 MiB         180                   i = 0
   225   3756.2 MiB      0.0 MiB         180                   t_print = time.time()
   226   3756.2 MiB      0.0 MiB         180                   t_avg = 0
   227                                                             
   228   3756.3 MiB      0.0 MiB       16340               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3756.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3756.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3756.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3755.5 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3741.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3741.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3741.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3741.8 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3741.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3741.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3741.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3741.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3741.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3741.8 MiB      0.0 MiB           1                   break
   244                                             
   245   3741.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    507.7 MiB    507.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    507.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    507.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    507.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    507.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    507.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    507.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    507.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    507.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    507.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3736.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    524.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    524.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    524.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    524.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    524.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    524.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    524.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    524.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    524.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    524.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    524.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    524.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    524.1 MiB      0.0 MiB           1                                                           vidName, 
   188    524.1 MiB      0.0 MiB           1                                                           csvName, 
   189    524.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    524.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    524.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    524.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    524.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    524.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    524.2 MiB      0.1 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.0 MiB     10.8 MiB           1           disp.start_video_stream()
   199    543.3 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    543.3 MiB      0.0 MiB           1           if online:
   202   3757.4 MiB   3214.1 MiB           1               disp.init_online_processing()
   203                                         
   204   3757.4 MiB      0.0 MiB           1           t_interval = 5
   205   3757.4 MiB      0.0 MiB           1           t_avg = 0
   206   3757.4 MiB      0.0 MiB           1           t_print = time.time()
   207   3757.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3757.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3757.4 MiB      0.0 MiB           1           while True:
   212   3768.9 MiB -31970.1 MiB       15405               t_start = time.time()
   213                                         
   214   3768.9 MiB -31959.9 MiB       15405               disp.update_stream()
   215   3768.9 MiB -31984.6 MiB       15405               disp.update_projector()
   216                                         
   217   3768.9 MiB -31985.9 MiB       15405               t_end = time.time()
   218                                                     
   219   3768.9 MiB -31985.9 MiB       15405               i += 1
   220   3768.9 MiB -31985.9 MiB       15405               t_avg += t_end - t_start
   221                                         
   222   3768.9 MiB -31985.9 MiB       15405               if t_end - t_print > t_interval:
   223   3768.9 MiB   -586.2 MiB         280                   print(f"Average processing time: {t_avg / i}")
   224   3768.9 MiB   -586.2 MiB         280                   i = 0
   225   3768.9 MiB   -586.2 MiB         280                   t_print = time.time()
   226   3768.9 MiB   -586.2 MiB         280                   t_avg = 0
   227                                                             
   228   3768.9 MiB -31985.9 MiB       15405               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3753.1 MiB    -15.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3753.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3753.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3752.2 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3738.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3738.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3738.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3736.6 MiB     -1.8 MiB           1                   cam_process.join() # Wrap up recording process
   237   3736.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3736.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3736.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3736.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3736.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3736.6 MiB      0.0 MiB           1                   break
   244                                             
   245   3736.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.4 MiB    519.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    552.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.8 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.8 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.8 MiB      0.0 MiB           1                                                           vidName, 
   188    535.8 MiB      0.0 MiB           1                                                           csvName, 
   189    535.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.6 MiB     10.8 MiB           1           disp.start_video_stream()
   199    554.8 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    554.8 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    554.8 MiB      0.0 MiB           1           t_interval = 5
   205    554.8 MiB      0.0 MiB           1           t_avg = 0
   206    554.8 MiB      0.0 MiB           1           t_print = time.time()
   207    554.8 MiB      0.0 MiB           1           i = 0
   208                                         
   209    554.8 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    554.8 MiB      0.0 MiB           1           while True:
   212    566.9 MiB      0.0 MiB        2144               t_start = time.time()
   213                                         
   214    566.9 MiB      1.0 MiB        2144               disp.update_stream()
   215    566.9 MiB     10.9 MiB        2144               disp.update_projector()
   216                                         
   217    566.9 MiB      0.2 MiB        2144               t_end = time.time()
   218                                                     
   219    566.9 MiB      0.0 MiB        2144               i += 1
   220    566.9 MiB      0.0 MiB        2144               t_avg += t_end - t_start
   221                                         
   222    566.9 MiB      0.0 MiB        2144               if t_end - t_print > t_interval:
   223    566.9 MiB      0.0 MiB          13                   print(f"Average processing time: {t_avg / i}")
   224    566.9 MiB      0.0 MiB          13                   i = 0
   225    566.9 MiB      0.0 MiB          13                   t_print = time.time()
   226    566.9 MiB      0.0 MiB          13                   t_avg = 0
   227                                                             
   228    566.9 MiB      0.0 MiB        2144               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    566.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    566.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    566.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    566.2 MiB     -0.7 MiB           1                   disp.end_stream()
   233    552.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    552.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    552.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    552.6 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    552.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    552.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    552.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    552.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    552.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243    552.6 MiB      0.0 MiB           1                   break
   244                                             
   245    552.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.6 MiB    522.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    556.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    539.0 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    539.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    539.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    539.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    539.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    539.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    539.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    539.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    539.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    539.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    539.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    539.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    539.0 MiB      0.0 MiB           1                                                           vidName, 
   188    539.0 MiB      0.0 MiB           1                                                           csvName, 
   189    539.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    539.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    539.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    539.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    539.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    539.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    539.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    550.1 MiB     11.0 MiB           1           disp.start_video_stream()
   199    558.3 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    558.3 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    558.3 MiB      0.0 MiB           1           t_interval = 5
   205    558.3 MiB      0.0 MiB           1           t_avg = 0
   206    558.3 MiB      0.0 MiB           1           t_print = time.time()
   207    558.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209    558.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    558.3 MiB      0.0 MiB           1           while True:
   212    570.5 MiB      0.1 MiB       38592               t_start = time.time()
   213                                         
   214    570.5 MiB      1.0 MiB       38592               disp.update_stream()
   215    570.5 MiB     10.9 MiB       38592               disp.update_projector()
   216                                         
   217    570.5 MiB      0.1 MiB       38592               t_end = time.time()
   218                                                     
   219    570.5 MiB      0.0 MiB       38592               i += 1
   220    570.5 MiB      0.0 MiB       38592               t_avg += t_end - t_start
   221                                         
   222    570.5 MiB      0.0 MiB       38592               if t_end - t_print > t_interval:
   223    570.5 MiB      0.0 MiB         422                   print(f"Average processing time: {t_avg / i}")
   224    570.5 MiB      0.0 MiB         422                   i = 0
   225    570.5 MiB      0.0 MiB         422                   t_print = time.time()
   226    570.5 MiB      0.0 MiB         422                   t_avg = 0
   227                                                             
   228    570.5 MiB      0.0 MiB       38592               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    570.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    570.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    570.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    569.9 MiB     -0.7 MiB           1                   disp.end_stream()
   233    556.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    556.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    556.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    556.3 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    556.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    556.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    556.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    556.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    556.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243    556.3 MiB      0.0 MiB           1                   break
   244                                             
   245    556.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.1 MiB    521.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    555.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.5 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.5 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.5 MiB      0.0 MiB           1                                                           vidName, 
   188    537.5 MiB      0.0 MiB           1                                                           csvName, 
   189    537.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.5 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.5 MiB     11.0 MiB           1           disp.start_video_stream()
   199    556.8 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    556.8 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    556.8 MiB      0.0 MiB           1           t_interval = 5
   205    556.8 MiB      0.0 MiB           1           t_avg = 0
   206    556.8 MiB      0.0 MiB           1           t_print = time.time()
   207    556.8 MiB      0.0 MiB           1           i = 0
   208                                         
   209    556.8 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    556.8 MiB      0.0 MiB           1           while True:
   212    569.4 MiB      0.0 MiB        1633               t_start = time.time()
   213                                         
   214    569.4 MiB      1.6 MiB        1633               disp.update_stream()
   215    569.4 MiB     10.9 MiB        1633               disp.update_projector()
   216                                         
   217    569.4 MiB      0.1 MiB        1633               t_end = time.time()
   218                                                     
   219    569.4 MiB      0.0 MiB        1633               i += 1
   220    569.4 MiB      0.0 MiB        1633               t_avg += t_end - t_start
   221                                         
   222    569.4 MiB      0.0 MiB        1633               if t_end - t_print > t_interval:
   223    569.4 MiB      0.0 MiB          10                   print(f"Average processing time: {t_avg / i}")
   224    569.4 MiB      0.0 MiB          10                   i = 0
   225    569.4 MiB      0.0 MiB          10                   t_print = time.time()
   226    569.4 MiB      0.0 MiB          10                   t_avg = 0
   227                                                             
   228    569.4 MiB      0.0 MiB        1633               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    569.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    569.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    569.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    569.0 MiB     -0.4 MiB           1                   disp.end_stream()
   233    555.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    555.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    555.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    555.4 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    555.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    555.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    555.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    555.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    555.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243    555.4 MiB      0.0 MiB           1                   break
   244                                             
   245    555.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.6 MiB    522.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    556.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    539.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    539.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    539.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    539.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    539.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    539.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    539.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    539.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    539.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    539.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    539.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    539.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    539.1 MiB      0.0 MiB           1                                                           vidName, 
   188    539.1 MiB      0.0 MiB           1                                                           csvName, 
   189    539.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    539.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    539.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    539.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    539.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    539.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    539.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    550.0 MiB     10.9 MiB           1           disp.start_video_stream()
   199    558.3 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    558.3 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    558.3 MiB      0.0 MiB           1           t_interval = 5
   205    558.3 MiB      0.0 MiB           1           t_avg = 0
   206    558.3 MiB      0.0 MiB           1           t_print = time.time()
   207    558.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209    558.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    558.3 MiB      0.0 MiB           1           while True:
   212    570.3 MiB      0.0 MiB       27565               t_start = time.time()
   213                                         
   214    570.3 MiB      1.1 MiB       27565               disp.update_stream()
   215    570.3 MiB     11.0 MiB       27565               disp.update_projector()
   216                                         
   217    570.3 MiB      0.0 MiB       27565               t_end = time.time()
   218                                                     
   219    570.3 MiB      0.0 MiB       27565               i += 1
   220    570.3 MiB      0.0 MiB       27565               t_avg += t_end - t_start
   221                                         
   222    570.3 MiB      0.0 MiB       27565               if t_end - t_print > t_interval:
   223    570.3 MiB      0.0 MiB         299                   print(f"Average processing time: {t_avg / i}")
   224    570.3 MiB      0.0 MiB         299                   i = 0
   225    570.3 MiB      0.0 MiB         299                   t_print = time.time()
   226    570.3 MiB      0.0 MiB         299                   t_avg = 0
   227                                                             
   228    570.4 MiB      0.1 MiB       27565               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    570.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    570.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    570.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    569.8 MiB     -0.6 MiB           1                   disp.end_stream()
   233    556.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    556.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    556.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    556.2 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    556.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    556.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    556.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    556.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    556.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243    556.2 MiB      0.0 MiB           1                   break
   244                                             
   245    556.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.6 MiB    521.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3793.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.0 MiB      0.0 MiB           1                                                           vidName, 
   188    538.0 MiB      0.0 MiB           1                                                           csvName, 
   189    538.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.1 MiB     11.0 MiB           1           disp.start_video_stream()
   199    557.3 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    557.3 MiB      0.0 MiB           1           if online:
   202   3797.7 MiB   3240.4 MiB           1               disp.init_online_processing()
   203                                         
   204   3797.7 MiB      0.0 MiB           1           t_interval = 5
   205   3797.7 MiB      0.0 MiB           1           t_avg = 0
   206   3797.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3797.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3797.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3797.7 MiB      0.0 MiB           1           while True:
   212   3807.6 MiB      0.0 MiB         327               t_start = time.time()
   213                                         
   214   3807.6 MiB      9.9 MiB         327               disp.update_stream()
   215   3807.6 MiB      0.0 MiB         327               disp.update_projector()
   216                                         
   217   3807.6 MiB      0.0 MiB         327               t_end = time.time()
   218                                                     
   219   3807.6 MiB      0.0 MiB         327               i += 1
   220   3807.6 MiB      0.0 MiB         327               t_avg += t_end - t_start
   221                                         
   222   3807.6 MiB      0.0 MiB         327               if t_end - t_print > t_interval:
   223   3807.6 MiB      0.0 MiB           2                   print(f"Average processing time: {t_avg / i}")
   224   3807.6 MiB      0.0 MiB           2                   i = 0
   225   3807.6 MiB      0.0 MiB           2                   t_print = time.time()
   226   3807.6 MiB      0.0 MiB           2                   t_avg = 0
   227                                                             
   228   3807.6 MiB      0.0 MiB         327               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3807.6 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3807.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3807.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3806.8 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3793.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3793.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3793.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3793.2 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237   3793.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3793.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.1 MiB    519.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3771.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.4 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.4 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.4 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.4 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.5 MiB      0.0 MiB           1                                                           vidName, 
   188    535.5 MiB      0.0 MiB           1                                                           csvName, 
   189    535.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.5 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.0 MiB     10.5 MiB           1           disp.start_video_stream()
   199    554.4 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    554.4 MiB      0.0 MiB           1           if online:
   202   3812.0 MiB   3257.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3812.0 MiB      0.0 MiB           1           t_interval = 5
   205   3812.0 MiB      0.0 MiB           1           t_avg = 0
   206   3812.0 MiB      0.0 MiB           1           t_print = time.time()
   207   3812.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3812.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3812.0 MiB      0.0 MiB           1           while True:
   212   3824.6 MiB -336835.8 MiB       29892               t_start = time.time()
   213                                         
   214   3824.6 MiB -336823.9 MiB       29892               disp.update_stream()
   215   3824.6 MiB -336850.7 MiB       29892               disp.update_projector()
   216                                         
   217   3824.6 MiB -336851.5 MiB       29892               t_end = time.time()
   218                                                     
   219   3824.6 MiB -336851.4 MiB       29892               i += 1
   220   3824.6 MiB -336851.4 MiB       29892               t_avg += t_end - t_start
   221                                         
   222   3824.6 MiB -336851.4 MiB       29892               if t_end - t_print > t_interval:
   223   3824.6 MiB  -7425.5 MiB         622                   print(f"Average processing time: {t_avg / i}")
   224   3824.6 MiB  -7425.5 MiB         622                   i = 0
   225   3824.6 MiB  -7425.5 MiB         622                   t_print = time.time()
   226   3824.6 MiB  -7425.5 MiB         622                   t_avg = 0
   227                                                             
   228   3824.6 MiB -336851.4 MiB       29892               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3809.0 MiB    -15.7 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3809.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3809.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3808.2 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3794.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3794.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3794.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3771.7 MiB    -22.7 MiB           1                   cam_process.join() # Wrap up recording process
   237   3771.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3771.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3771.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3771.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3771.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3771.7 MiB      0.0 MiB           1                   break
   244                                             
   245   3771.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    517.1 MiB    517.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    517.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    517.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    517.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    517.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    517.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    517.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    517.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    517.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    517.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    550.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    533.6 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    533.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    533.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    533.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    533.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    533.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    533.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    533.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    533.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    533.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    533.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    533.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    533.6 MiB      0.0 MiB           1                                                           vidName, 
   188    533.6 MiB      0.0 MiB           1                                                           csvName, 
   189    533.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    533.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    533.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    533.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    533.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    533.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    533.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    544.7 MiB     11.0 MiB           1           disp.start_video_stream()
   199    552.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    552.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    552.9 MiB      0.0 MiB           1           t_interval = 5
   205    552.9 MiB      0.0 MiB           1           t_avg = 0
   206    552.9 MiB      0.0 MiB           1           t_print = time.time()
   207    552.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    552.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    552.9 MiB      0.0 MiB           1           while True:
   212    564.7 MiB      0.0 MiB        1799               t_start = time.time()
   213                                         
   214    564.7 MiB      1.0 MiB        1799               disp.update_stream()
   215    564.7 MiB     10.7 MiB        1799               disp.update_projector()
   216                                         
   217    564.7 MiB      0.0 MiB        1799               t_end = time.time()
   218                                                     
   219    564.7 MiB      0.2 MiB        1799               i += 1
   220    564.7 MiB      0.0 MiB        1799               t_avg += t_end - t_start
   221                                         
   222    564.7 MiB      0.0 MiB        1799               if t_end - t_print > t_interval:
   223    564.7 MiB      0.0 MiB          10                   print(f"Average processing time: {t_avg / i}")
   224    564.7 MiB      0.0 MiB          10                   i = 0
   225    564.7 MiB      0.0 MiB          10                   t_print = time.time()
   226    564.7 MiB      0.0 MiB          10                   t_avg = 0
   227                                                             
   228    564.7 MiB      0.0 MiB        1799               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    564.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    564.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    564.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    564.1 MiB     -0.7 MiB           1                   disp.end_stream()
   233    550.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    550.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    550.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    550.4 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237    550.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    550.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    550.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    550.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    550.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243    550.4 MiB      0.0 MiB           1                   break
   244                                             
   245    550.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    516.2 MiB    516.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    516.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    516.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    516.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    516.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    516.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    516.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    516.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    516.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    516.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    549.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    532.5 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    532.5 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    532.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    532.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    532.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    532.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    532.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    532.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    532.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    532.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    532.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    532.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    532.5 MiB      0.0 MiB           1                                                           vidName, 
   188    532.5 MiB      0.0 MiB           1                                                           csvName, 
   189    532.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    532.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    532.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    532.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    532.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    532.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    532.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    543.1 MiB     10.5 MiB           1           disp.start_video_stream()
   199    551.3 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    551.3 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    551.3 MiB      0.0 MiB           1           t_interval = 5
   205    551.3 MiB      0.0 MiB           1           t_avg = 0
   206    551.3 MiB      0.0 MiB           1           t_print = time.time()
   207    551.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209    551.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    551.3 MiB      0.0 MiB           1           while True:
   212    563.3 MiB      0.0 MiB       18572               t_start = time.time()
   213                                         
   214    563.3 MiB      0.9 MiB       18572               disp.update_stream()
   215    563.4 MiB     11.1 MiB       18572               disp.update_projector()
   216                                         
   217    563.4 MiB      0.0 MiB       18572               t_end = time.time()
   218                                                     
   219    563.4 MiB      0.0 MiB       18572               i += 1
   220    563.4 MiB      0.0 MiB       18572               t_avg += t_end - t_start
   221                                         
   222    563.4 MiB      0.0 MiB       18572               if t_end - t_print > t_interval:
   223    563.3 MiB      0.0 MiB         190                   print(f"Average processing time: {t_avg / i}")
   224    563.3 MiB      0.0 MiB         190                   i = 0
   225    563.3 MiB      0.0 MiB         190                   t_print = time.time()
   226    563.3 MiB      0.0 MiB         190                   t_avg = 0
   227                                                             
   228    563.4 MiB      0.0 MiB       18572               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    563.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    563.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    563.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    562.8 MiB     -0.6 MiB           1                   disp.end_stream()
   233    549.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    549.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    549.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    549.3 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    549.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    549.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    549.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    549.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    549.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243    549.3 MiB      0.0 MiB           1                   break
   244                                             
   245    549.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    514.8 MiB    514.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    514.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    514.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    514.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    514.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    514.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    514.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    514.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    514.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    514.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    551.0 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.1 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.2 MiB      0.0 MiB           1                                                           vidName, 
   188    531.2 MiB      0.0 MiB           1                                                           csvName, 
   189    531.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    541.5 MiB     10.3 MiB           1           disp.start_video_stream()
   199    549.7 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    549.7 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    549.7 MiB      0.0 MiB           1           t_interval = 5
   205    549.7 MiB      0.0 MiB           1           t_avg = 0
   206    549.7 MiB      0.0 MiB           1           t_print = time.time()
   207    549.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209    549.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    549.7 MiB      0.0 MiB           1           while True:
   212    565.2 MiB    -37.5 MiB       12016               t_start = time.time()
   213                                         
   214    565.2 MiB    -36.5 MiB       12016               disp.update_stream()
   215    565.2 MiB    -23.3 MiB       12016               disp.update_projector()
   216                                         
   217    565.2 MiB    -37.3 MiB       12016               t_end = time.time()
   218                                                     
   219    565.2 MiB    -37.5 MiB       12016               i += 1
   220    565.2 MiB    -37.5 MiB       12016               t_avg += t_end - t_start
   221                                         
   222    565.2 MiB    -37.5 MiB       12016               if t_end - t_print > t_interval:
   223    565.2 MiB     -0.4 MiB         120                   print(f"Average processing time: {t_avg / i}")
   224    565.2 MiB     -0.4 MiB         120                   i = 0
   225    565.2 MiB     -0.4 MiB         120                   t_print = time.time()
   226    565.2 MiB     -0.4 MiB         120                   t_avg = 0
   227                                                             
   228    565.2 MiB    -37.3 MiB       12016               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    565.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    565.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    565.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    564.6 MiB     -0.5 MiB           1                   disp.end_stream()
   233    550.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    550.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    550.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    551.0 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    551.0 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    551.0 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    551.0 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    551.0 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    551.0 MiB      0.0 MiB           1                   vprint("User ready!")
   243    551.0 MiB      0.0 MiB           1                   break
   244                                             
   245    551.0 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.3 MiB    519.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    553.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.7 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.7 MiB      0.0 MiB           1                                                           vidName, 
   188    535.7 MiB      0.0 MiB           1                                                           csvName, 
   189    535.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.3 MiB     10.5 MiB           1           disp.start_video_stream()
   199    554.6 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    554.6 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    554.6 MiB      0.0 MiB           1           t_interval = 5
   205    554.6 MiB      0.0 MiB           1           t_avg = 0
   206    554.6 MiB      0.0 MiB           1           t_print = time.time()
   207    554.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209    554.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    554.6 MiB      0.0 MiB           1           while True:
   212    566.7 MiB      0.0 MiB        7957               t_start = time.time()
   213                                         
   214    566.7 MiB      1.2 MiB        7957               disp.update_stream()
   215    566.7 MiB     10.9 MiB        7957               disp.update_projector()
   216                                         
   217    566.7 MiB      0.0 MiB        7957               t_end = time.time()
   218                                                     
   219    566.7 MiB      0.0 MiB        7957               i += 1
   220    566.7 MiB      0.0 MiB        7957               t_avg += t_end - t_start
   221                                         
   222    566.7 MiB      0.0 MiB        7957               if t_end - t_print > t_interval:
   223    566.7 MiB      0.0 MiB          72                   print(f"Average processing time: {t_avg / i}")
   224    566.7 MiB      0.0 MiB          72                   i = 0
   225    566.7 MiB      0.0 MiB          72                   t_print = time.time()
   226    566.7 MiB      0.0 MiB          72                   t_avg = 0
   227                                                             
   228    566.7 MiB      0.0 MiB        7957               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    566.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    566.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    566.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    566.9 MiB      0.2 MiB           1                   disp.end_stream()
   233    553.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    553.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    553.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    553.3 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    553.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    553.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    553.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    553.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    553.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243    553.3 MiB      0.0 MiB           1                   break
   244                                             
   245    553.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    514.9 MiB    514.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    514.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    514.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    514.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    514.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    514.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    514.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    514.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    514.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    514.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    549.0 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.3 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.3 MiB      0.0 MiB           1                                                           vidName, 
   188    531.3 MiB      0.0 MiB           1                                                           csvName, 
   189    531.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    541.9 MiB     10.6 MiB           1           disp.start_video_stream()
   199    550.2 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    550.2 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    550.2 MiB      0.0 MiB           1           t_interval = 5
   205    550.2 MiB      0.0 MiB           1           t_avg = 0
   206    550.2 MiB      0.0 MiB           1           t_print = time.time()
   207    550.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209    550.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    550.2 MiB      0.0 MiB           1           while True:
   212    563.2 MiB      0.0 MiB        5983               t_start = time.time()
   213                                         
   214    563.2 MiB      1.0 MiB        5983               disp.update_stream()
   215    563.2 MiB     10.8 MiB        5983               disp.update_projector()
   216                                         
   217    563.2 MiB      0.0 MiB        5983               t_end = time.time()
   218                                                     
   219    563.2 MiB      1.2 MiB        5983               i += 1
   220    563.2 MiB      0.0 MiB        5983               t_avg += t_end - t_start
   221                                         
   222    563.2 MiB      0.0 MiB        5983               if t_end - t_print > t_interval:
   223    563.2 MiB      0.0 MiB          49                   print(f"Average processing time: {t_avg / i}")
   224    563.2 MiB      0.0 MiB          49                   i = 0
   225    563.2 MiB      0.0 MiB          49                   t_print = time.time()
   226    563.2 MiB      0.0 MiB          49                   t_avg = 0
   227                                                             
   228    563.2 MiB      0.0 MiB        5983               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    563.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    563.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    563.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    562.5 MiB     -0.7 MiB           1                   disp.end_stream()
   233    548.7 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    548.7 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    548.7 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    549.0 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    549.0 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    549.0 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    549.0 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    549.0 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    549.0 MiB      0.0 MiB           1                   vprint("User ready!")
   243    549.0 MiB      0.0 MiB           1                   break
   244                                             
   245    549.0 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.5 MiB    515.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3905.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    532.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    532.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    532.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    532.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    532.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    532.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    532.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    532.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    532.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    532.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    532.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    532.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    532.0 MiB      0.0 MiB           1                                                           vidName, 
   188    532.0 MiB      0.0 MiB           1                                                           csvName, 
   189    532.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    532.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    532.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    532.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    532.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    532.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    532.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    542.9 MiB     10.9 MiB           1           disp.start_video_stream()
   199    551.2 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    551.2 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    551.2 MiB      0.0 MiB           1           t_interval = 5
   205    551.2 MiB      0.0 MiB           1           t_avg = 0
   206    551.2 MiB      0.0 MiB           1           t_print = time.time()
   207    551.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209    551.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    551.2 MiB      0.0 MiB           1           while True:
   212   3919.8 MiB  -2360.0 MiB        9274               t_start = time.time()
   213                                         
   214   3919.8 MiB  -2357.9 MiB        9274               disp.update_stream()
   215   3919.8 MiB   1006.4 MiB        9274               disp.update_projector()
   216                                         
   217   3919.8 MiB  -2360.0 MiB        9274               t_end = time.time()
   218                                                     
   219   3919.8 MiB  -2359.8 MiB        9274               i += 1
   220   3919.8 MiB  -2359.9 MiB        9274               t_avg += t_end - t_start
   221                                         
   222   3919.8 MiB  -2360.0 MiB        9274               if t_end - t_print > t_interval:
   223   3919.8 MiB    -25.2 MiB          83                   print(f"Average processing time: {t_avg / i}")
   224   3919.8 MiB    -25.2 MiB          83                   i = 0
   225   3919.8 MiB    -25.2 MiB          83                   t_print = time.time()
   226   3919.8 MiB    -25.2 MiB          83                   t_avg = 0
   227                                                             
   228   3919.8 MiB  -2360.0 MiB        9274               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3919.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3919.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3919.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3918.9 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3905.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3905.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3905.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3905.3 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237   3905.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3905.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3905.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3905.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3905.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3905.3 MiB      0.0 MiB           1                   break
   244                                             
   245   3905.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    517.5 MiB    517.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    517.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    517.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    517.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    517.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    517.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    517.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    517.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    517.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    517.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3790.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    533.9 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    533.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    533.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    533.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    533.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    533.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    533.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    533.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    533.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    533.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    533.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    533.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    533.9 MiB      0.0 MiB           1                                                           vidName, 
   188    533.9 MiB      0.0 MiB           1                                                           csvName, 
   189    533.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    533.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    533.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    533.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    534.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.0 MiB     11.1 MiB           1           disp.start_video_stream()
   199    553.2 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    553.2 MiB      0.0 MiB           1           if online:
   202   3794.3 MiB   3241.1 MiB           1               disp.init_online_processing()
   203                                         
   204   3794.3 MiB      0.0 MiB           1           t_interval = 5
   205   3794.3 MiB      0.0 MiB           1           t_avg = 0
   206   3794.3 MiB      0.0 MiB           1           t_print = time.time()
   207   3794.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3794.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3794.3 MiB      0.0 MiB           1           while True:
   212   3804.8 MiB      0.0 MiB        7378               t_start = time.time()
   213                                         
   214   3804.8 MiB      9.4 MiB        7378               disp.update_stream()
   215   3804.8 MiB      0.4 MiB        7378               disp.update_projector()
   216                                         
   217   3804.8 MiB      0.0 MiB        7378               t_end = time.time()
   218                                                     
   219   3804.8 MiB      0.0 MiB        7378               i += 1
   220   3804.8 MiB      0.7 MiB        7378               t_avg += t_end - t_start
   221                                         
   222   3804.8 MiB      0.0 MiB        7378               if t_end - t_print > t_interval:
   223   3804.8 MiB      0.0 MiB          68                   print(f"Average processing time: {t_avg / i}")
   224   3804.8 MiB      0.0 MiB          68                   i = 0
   225   3804.8 MiB      0.0 MiB          68                   t_print = time.time()
   226   3804.8 MiB      0.0 MiB          68                   t_avg = 0
   227                                                             
   228   3804.8 MiB      0.1 MiB        7378               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3804.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3804.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3804.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3804.0 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3790.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3790.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3790.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3790.2 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3790.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3790.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3790.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3790.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3790.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3790.2 MiB      0.0 MiB           1                   break
   244                                             
   245   3790.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    517.2 MiB    517.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    517.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    517.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    517.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    517.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    517.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    517.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    517.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    517.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    517.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    551.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    533.6 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    533.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    533.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    533.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    533.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    533.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    533.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    533.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    533.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    533.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    533.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    533.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    533.6 MiB      0.0 MiB           1                                                           vidName, 
   188    533.6 MiB      0.0 MiB           1                                                           csvName, 
   189    533.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    533.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    533.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    533.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    533.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    533.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    533.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    544.7 MiB     11.0 MiB           1           disp.start_video_stream()
   199    552.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    552.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    552.9 MiB      0.0 MiB           1           t_interval = 5
   205    552.9 MiB      0.0 MiB           1           t_avg = 0
   206    552.9 MiB      0.0 MiB           1           t_print = time.time()
   207    552.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    552.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    552.9 MiB      0.0 MiB           1           while True:
   212    564.9 MiB      0.0 MiB        4381               t_start = time.time()
   213                                         
   214    564.9 MiB      1.1 MiB        4381               disp.update_stream()
   215    564.9 MiB     10.8 MiB        4381               disp.update_projector()
   216                                         
   217    564.9 MiB      0.0 MiB        4381               t_end = time.time()
   218                                                     
   219    564.9 MiB      0.1 MiB        4381               i += 1
   220    564.9 MiB      0.0 MiB        4381               t_avg += t_end - t_start
   221                                         
   222    564.9 MiB      0.0 MiB        4381               if t_end - t_print > t_interval:
   223    564.9 MiB      0.0 MiB          31                   print(f"Average processing time: {t_avg / i}")
   224    564.9 MiB      0.0 MiB          31                   i = 0
   225    564.9 MiB      0.0 MiB          31                   t_print = time.time()
   226    564.9 MiB      0.0 MiB          31                   t_avg = 0
   227                                                             
   228    564.9 MiB      0.0 MiB        4381               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    564.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    564.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    564.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    565.0 MiB      0.1 MiB           1                   disp.end_stream()
   233    551.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    551.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    551.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    551.5 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    551.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    551.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    551.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    551.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    551.5 MiB      0.0 MiB           1                   vprint("User ready!")
   243    551.5 MiB      0.0 MiB           1                   break
   244                                             
   245    551.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    518.4 MiB    518.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    518.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    518.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    518.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    518.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    518.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    518.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    518.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    518.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    518.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    552.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    534.8 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    534.8 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    534.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    534.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    534.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    534.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    534.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    534.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    534.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    534.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    534.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    534.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    534.8 MiB      0.0 MiB           1                                                           vidName, 
   188    534.8 MiB      0.0 MiB           1                                                           csvName, 
   189    534.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    534.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    534.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    534.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    534.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.9 MiB     11.1 MiB           1           disp.start_video_stream()
   199    554.1 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    554.1 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    554.1 MiB      0.0 MiB           1           t_interval = 5
   205    554.1 MiB      0.0 MiB           1           t_avg = 0
   206    554.1 MiB      0.0 MiB           1           t_print = time.time()
   207    554.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209    554.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    554.1 MiB      0.0 MiB           1           while True:
   212    567.1 MiB      0.0 MiB        6579               t_start = time.time()
   213                                         
   214    567.1 MiB      1.0 MiB        6579               disp.update_stream()
   215    567.1 MiB     11.8 MiB        6579               disp.update_projector()
   216                                         
   217    567.1 MiB      0.2 MiB        6579               t_end = time.time()
   218                                                     
   219    567.1 MiB      0.0 MiB        6579               i += 1
   220    567.1 MiB      0.0 MiB        6579               t_avg += t_end - t_start
   221                                         
   222    567.1 MiB      0.0 MiB        6579               if t_end - t_print > t_interval:
   223    567.1 MiB      0.0 MiB          55                   print(f"Average processing time: {t_avg / i}")
   224    567.1 MiB      0.0 MiB          55                   i = 0
   225    567.1 MiB      0.0 MiB          55                   t_print = time.time()
   226    567.1 MiB      0.0 MiB          55                   t_avg = 0
   227                                                             
   228    567.1 MiB      0.0 MiB        6579               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    567.1 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    567.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    567.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    566.3 MiB     -0.8 MiB           1                   disp.end_stream()
   233    552.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    552.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    552.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    552.9 MiB      0.4 MiB           1                   cam_process.join() # Wrap up recording process
   237    552.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    552.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    552.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    552.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    552.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243    552.9 MiB      0.0 MiB           1                   break
   244                                             
   245    552.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.2 MiB    519.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    553.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.7 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.7 MiB      0.0 MiB           1                                                           vidName, 
   188    535.7 MiB      0.0 MiB           1                                                           csvName, 
   189    535.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.7 MiB     11.0 MiB           1           disp.start_video_stream()
   199    554.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    554.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    554.9 MiB      0.0 MiB           1           t_interval = 5
   205    554.9 MiB      0.0 MiB           1           t_avg = 0
   206    554.9 MiB      0.0 MiB           1           t_print = time.time()
   207    554.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    554.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    554.9 MiB      0.0 MiB           1           while True:
   212    567.8 MiB      0.0 MiB       21048               t_start = time.time()
   213                                         
   214    567.8 MiB      2.0 MiB       21048               disp.update_stream()
   215    567.9 MiB     10.9 MiB       21048               disp.update_projector()
   216                                         
   217    567.9 MiB      0.0 MiB       21048               t_end = time.time()
   218                                                     
   219    567.9 MiB      0.0 MiB       21048               i += 1
   220    567.9 MiB      0.0 MiB       21048               t_avg += t_end - t_start
   221                                         
   222    567.9 MiB      0.0 MiB       21048               if t_end - t_print > t_interval:
   223    567.8 MiB      0.0 MiB         219                   print(f"Average processing time: {t_avg / i}")
   224    567.8 MiB      0.0 MiB         219                   i = 0
   225    567.8 MiB      0.0 MiB         219                   t_print = time.time()
   226    567.8 MiB      0.0 MiB         219                   t_avg = 0
   227                                                             
   228    567.9 MiB      0.0 MiB       21048               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    567.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    567.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    567.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    567.0 MiB     -0.8 MiB           1                   disp.end_stream()
   233    553.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    553.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    553.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    553.6 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    553.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    553.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    553.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    553.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    553.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243    553.6 MiB      0.0 MiB           1                   break
   244                                             
   245    553.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    517.5 MiB    517.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    517.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    517.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    517.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    517.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    517.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    517.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    517.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    517.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    517.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    551.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    533.9 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    533.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    534.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    534.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    534.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    534.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    534.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    534.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    534.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    534.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    534.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    534.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    534.0 MiB      0.0 MiB           1                                                           vidName, 
   188    534.0 MiB      0.0 MiB           1                                                           csvName, 
   189    534.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    534.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    534.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    534.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    534.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.0 MiB     11.1 MiB           1           disp.start_video_stream()
   199    553.2 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    553.2 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    553.2 MiB      0.0 MiB           1           t_interval = 5
   205    553.2 MiB      0.0 MiB           1           t_avg = 0
   206    553.2 MiB      0.0 MiB           1           t_print = time.time()
   207    553.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209    553.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    553.2 MiB      0.0 MiB           1           while True:
   212    566.0 MiB      0.0 MiB        7848               t_start = time.time()
   213                                         
   214    566.0 MiB      0.9 MiB        7848               disp.update_stream()
   215    566.0 MiB     11.9 MiB        7848               disp.update_projector()
   216                                         
   217    566.0 MiB      0.0 MiB        7848               t_end = time.time()
   218                                                     
   219    566.0 MiB      0.0 MiB        7848               i += 1
   220    566.0 MiB      0.0 MiB        7848               t_avg += t_end - t_start
   221                                         
   222    566.0 MiB      0.0 MiB        7848               if t_end - t_print > t_interval:
   223    566.0 MiB      0.0 MiB          68                   print(f"Average processing time: {t_avg / i}")
   224    566.0 MiB      0.0 MiB          68                   i = 0
   225    566.0 MiB      0.0 MiB          68                   t_print = time.time()
   226    566.0 MiB      0.0 MiB          68                   t_avg = 0
   227                                                             
   228    566.0 MiB      0.0 MiB        7848               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    566.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    566.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    566.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    565.2 MiB     -0.8 MiB           1                   disp.end_stream()
   233    551.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    551.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    551.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    551.6 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    551.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    551.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    551.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    551.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    551.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243    551.6 MiB      0.0 MiB           1                   break
   244                                             
   245    551.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    516.9 MiB    516.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    516.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    516.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    516.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    516.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    516.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    516.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    516.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    516.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    516.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    551.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    533.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    533.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    533.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    533.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    533.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    533.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    533.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    533.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    533.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    533.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    533.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    533.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    533.3 MiB      0.0 MiB           1                                                           vidName, 
   188    533.3 MiB      0.0 MiB           1                                                           csvName, 
   189    533.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    533.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    533.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    533.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    533.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    533.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    533.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    544.3 MiB     11.0 MiB           1           disp.start_video_stream()
   199    552.5 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    552.5 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    552.5 MiB      0.0 MiB           1           t_interval = 5
   205    552.5 MiB      0.0 MiB           1           t_avg = 0
   206    552.5 MiB      0.0 MiB           1           t_print = time.time()
   207    552.5 MiB      0.0 MiB           1           i = 0
   208                                         
   209    552.5 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    552.5 MiB      0.0 MiB           1           while True:
   212    565.5 MiB      0.0 MiB       10752               t_start = time.time()
   213                                         
   214    565.6 MiB      2.0 MiB       10752               disp.update_stream()
   215    565.6 MiB     11.0 MiB       10752               disp.update_projector()
   216                                         
   217    565.6 MiB      0.0 MiB       10752               t_end = time.time()
   218                                                     
   219    565.6 MiB      0.0 MiB       10752               i += 1
   220    565.6 MiB      0.0 MiB       10752               t_avg += t_end - t_start
   221                                         
   222    565.6 MiB      0.0 MiB       10752               if t_end - t_print > t_interval:
   223    565.5 MiB      0.0 MiB         103                   print(f"Average processing time: {t_avg / i}")
   224    565.5 MiB      0.0 MiB         103                   i = 0
   225    565.5 MiB      0.0 MiB         103                   t_print = time.time()
   226    565.5 MiB      0.0 MiB         103                   t_avg = 0
   227                                                             
   228    565.6 MiB      0.0 MiB       10752               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    565.6 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    565.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    565.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    564.8 MiB     -0.8 MiB           1                   disp.end_stream()
   233    551.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    551.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    551.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    551.3 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    551.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    551.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    551.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    551.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    551.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243    551.3 MiB      0.0 MiB           1                   break
   244                                             
   245    551.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.3 MiB    519.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    552.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.7 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.7 MiB      0.0 MiB           1                                                           vidName, 
   188    535.7 MiB      0.0 MiB           1                                                           csvName, 
   189    535.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.8 MiB     11.0 MiB           1           disp.start_video_stream()
   199    554.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    554.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    554.9 MiB      0.0 MiB           1           t_interval = 5
   205    554.9 MiB      0.0 MiB           1           t_avg = 0
   206    554.9 MiB      0.0 MiB           1           t_print = time.time()
   207    554.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    554.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    554.9 MiB      0.0 MiB           1           while True:
   212    566.9 MiB      0.0 MiB        5243               t_start = time.time()
   213                                         
   214    566.9 MiB      1.0 MiB        5243               disp.update_stream()
   215    566.9 MiB     10.7 MiB        5243               disp.update_projector()
   216                                         
   217    566.9 MiB      0.0 MiB        5243               t_end = time.time()
   218                                                     
   219    566.9 MiB      0.2 MiB        5243               i += 1
   220    566.9 MiB      0.0 MiB        5243               t_avg += t_end - t_start
   221                                         
   222    566.9 MiB      0.0 MiB        5243               if t_end - t_print > t_interval:
   223    566.9 MiB      0.0 MiB          41                   print(f"Average processing time: {t_avg / i}")
   224    566.9 MiB      0.0 MiB          41                   i = 0
   225    566.9 MiB      0.0 MiB          41                   t_print = time.time()
   226    566.9 MiB      0.0 MiB          41                   t_avg = 0
   227                                                             
   228    566.9 MiB      0.0 MiB        5243               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    566.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    566.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    566.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    566.2 MiB     -0.7 MiB           1                   disp.end_stream()
   233    552.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    552.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    552.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    552.7 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    552.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    552.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    552.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    552.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    552.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243    552.7 MiB      0.0 MiB           1                   break
   244                                             
   245    552.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.8 MiB    515.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    549.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    532.2 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    532.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    532.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    532.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    532.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    532.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    532.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    532.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    532.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    532.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    532.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    532.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    532.2 MiB      0.0 MiB           1                                                           vidName, 
   188    532.2 MiB      0.0 MiB           1                                                           csvName, 
   189    532.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    532.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    532.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    532.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    532.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    532.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    532.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    543.0 MiB     10.8 MiB           1           disp.start_video_stream()
   199    551.2 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    551.2 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    551.2 MiB      0.0 MiB           1           t_interval = 5
   205    551.2 MiB      0.0 MiB           1           t_avg = 0
   206    551.2 MiB      0.0 MiB           1           t_print = time.time()
   207    551.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209    551.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    551.2 MiB      0.0 MiB           1           while True:
   212    564.1 MiB      0.9 MiB       15041               t_start = time.time()
   213                                         
   214    564.1 MiB      0.9 MiB       15041               disp.update_stream()
   215    564.1 MiB     10.8 MiB       15041               disp.update_projector()
   216                                         
   217    564.2 MiB      0.3 MiB       15041               t_end = time.time()
   218                                                     
   219    564.2 MiB      0.0 MiB       15041               i += 1
   220    564.2 MiB      0.0 MiB       15041               t_avg += t_end - t_start
   221                                         
   222    564.2 MiB      0.0 MiB       15041               if t_end - t_print > t_interval:
   223    564.1 MiB      0.0 MiB         155                   print(f"Average processing time: {t_avg / i}")
   224    564.1 MiB      0.0 MiB         155                   i = 0
   225    564.1 MiB      0.0 MiB         155                   t_print = time.time()
   226    564.1 MiB      0.0 MiB         155                   t_avg = 0
   227                                                             
   228    564.2 MiB      0.0 MiB       15041               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    564.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    564.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    564.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    563.4 MiB     -0.8 MiB           1                   disp.end_stream()
   233    549.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    549.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    549.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    549.9 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    549.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    549.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    549.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    549.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    549.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243    549.9 MiB      0.0 MiB           1                   break
   244                                             
   245    549.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.1 MiB    515.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    551.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.5 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.5 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.5 MiB      0.0 MiB           1                                                           vidName, 
   188    531.5 MiB      0.0 MiB           1                                                           csvName, 
   189    531.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    542.3 MiB     10.7 MiB           1           disp.start_video_stream()
   199    550.6 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    550.6 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    550.6 MiB      0.0 MiB           1           t_interval = 5
   205    550.6 MiB      0.0 MiB           1           t_avg = 0
   206    550.6 MiB      0.0 MiB           1           t_print = time.time()
   207    550.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209    550.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    550.6 MiB      0.0 MiB           1           while True:
   212    566.0 MiB  -3466.8 MiB       11277               t_start = time.time()
   213                                         
   214    566.0 MiB  -3465.8 MiB       11277               disp.update_stream()
   215    566.0 MiB  -3452.8 MiB       11277               disp.update_projector()
   216                                         
   217    566.0 MiB  -3465.6 MiB       11277               t_end = time.time()
   218                                                     
   219    566.0 MiB  -3465.6 MiB       11277               i += 1
   220    566.0 MiB  -3465.4 MiB       11277               t_avg += t_end - t_start
   221                                         
   222    566.0 MiB  -3465.5 MiB       11277               if t_end - t_print > t_interval:
   223    566.0 MiB    -40.2 MiB         112                   print(f"Average processing time: {t_avg / i}")
   224    566.0 MiB    -40.2 MiB         112                   i = 0
   225    566.0 MiB    -40.2 MiB         112                   t_print = time.time()
   226    566.0 MiB    -40.2 MiB         112                   t_avg = 0
   227                                                             
   228    566.0 MiB  -3465.5 MiB       11277               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    565.7 MiB     -0.3 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    565.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    565.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    564.8 MiB     -0.8 MiB           1                   disp.end_stream()
   233    551.1 MiB    -13.7 MiB           1                   disp.stop_projector()
   234    551.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    551.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    551.2 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237    551.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    551.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    551.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    551.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    551.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243    551.2 MiB      0.0 MiB           1                   break
   244                                             
   245    551.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    520.7 MiB    520.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    520.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    520.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    520.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    520.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    520.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    520.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    520.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    520.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    520.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    554.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.1 MiB      0.0 MiB           1                                                           vidName, 
   188    537.1 MiB      0.0 MiB           1                                                           csvName, 
   189    537.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.1 MiB     11.0 MiB           1           disp.start_video_stream()
   199    556.4 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    556.4 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    556.4 MiB      0.0 MiB           1           t_interval = 5
   205    556.4 MiB      0.0 MiB           1           t_avg = 0
   206    556.4 MiB      0.0 MiB           1           t_print = time.time()
   207    556.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209    556.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    556.4 MiB      0.0 MiB           1           while True:
   212    568.4 MiB      0.0 MiB       12417               t_start = time.time()
   213                                         
   214    568.4 MiB      1.1 MiB       12417               disp.update_stream()
   215    568.4 MiB     10.7 MiB       12417               disp.update_projector()
   216                                         
   217    568.4 MiB      0.0 MiB       12417               t_end = time.time()
   218                                                     
   219    568.4 MiB      0.0 MiB       12417               i += 1
   220    568.4 MiB      0.0 MiB       12417               t_avg += t_end - t_start
   221                                         
   222    568.4 MiB      0.2 MiB       12417               if t_end - t_print > t_interval:
   223    568.4 MiB      0.0 MiB         121                   print(f"Average processing time: {t_avg / i}")
   224    568.4 MiB      0.0 MiB         121                   i = 0
   225    568.4 MiB      0.0 MiB         121                   t_print = time.time()
   226    568.4 MiB      0.0 MiB         121                   t_avg = 0
   227                                                             
   228    568.4 MiB      0.0 MiB       12417               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    568.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    568.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    568.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    567.8 MiB     -0.6 MiB           1                   disp.end_stream()
   233    554.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    554.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    554.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    554.3 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    554.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    554.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    554.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    554.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    554.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243    554.3 MiB      0.0 MiB           1                   break
   244                                             
   245    554.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    514.8 MiB    514.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    514.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    514.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    514.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    514.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    514.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    514.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    514.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    514.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    514.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    547.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.2 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.2 MiB      0.0 MiB           1                                                           vidName, 
   188    531.2 MiB      0.0 MiB           1                                                           csvName, 
   189    531.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    541.7 MiB     10.5 MiB           1           disp.start_video_stream()
   199    550.1 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    550.1 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    550.1 MiB      0.0 MiB           1           t_interval = 5
   205    550.1 MiB      0.0 MiB           1           t_avg = 0
   206    550.1 MiB      0.0 MiB           1           t_print = time.time()
   207    550.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209    550.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    550.1 MiB      0.0 MiB           1           while True:
   212    562.1 MiB      0.0 MiB         399               t_start = time.time()
   213                                         
   214    562.1 MiB      1.3 MiB         399               disp.update_stream()
   215    562.1 MiB     10.7 MiB         399               disp.update_projector()
   216                                         
   217    562.1 MiB      0.0 MiB         399               t_end = time.time()
   218                                                     
   219    562.1 MiB      0.0 MiB         399               i += 1
   220    562.1 MiB      0.0 MiB         399               t_avg += t_end - t_start
   221                                         
   222    562.1 MiB      0.0 MiB         399               if t_end - t_print > t_interval:
   223    562.1 MiB      0.0 MiB           1                   print(f"Average processing time: {t_avg / i}")
   224    562.1 MiB      0.0 MiB           1                   i = 0
   225    562.1 MiB      0.0 MiB           1                   t_print = time.time()
   226    562.1 MiB      0.0 MiB           1                   t_avg = 0
   227                                                             
   228    562.1 MiB      0.0 MiB         399               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    562.1 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    562.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    562.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    561.4 MiB     -0.6 MiB           1                   disp.end_stream()
   233    547.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    547.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    547.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    547.6 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    547.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    547.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    516.1 MiB    516.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    516.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    516.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    516.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    516.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    516.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    516.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    516.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    516.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    516.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    550.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    532.5 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    532.5 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    532.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    532.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    532.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    532.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    532.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    532.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    532.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    532.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    532.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    532.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    532.5 MiB      0.0 MiB           1                                                           vidName, 
   188    532.5 MiB      0.0 MiB           1                                                           csvName, 
   189    532.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    532.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    532.5 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    532.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    532.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    532.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    532.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    543.1 MiB     10.6 MiB           1           disp.start_video_stream()
   199    551.3 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    551.3 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    551.3 MiB      0.0 MiB           1           t_interval = 5
   205    551.3 MiB      0.0 MiB           1           t_avg = 0
   206    551.3 MiB      0.0 MiB           1           t_print = time.time()
   207    551.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209    551.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    551.3 MiB      0.0 MiB           1           while True:
   212    564.3 MiB      0.0 MiB       10845               t_start = time.time()
   213                                         
   214    564.3 MiB      0.8 MiB       10845               disp.update_stream()
   215    564.3 MiB     11.2 MiB       10845               disp.update_projector()
   216                                         
   217    564.3 MiB      0.1 MiB       10845               t_end = time.time()
   218                                                     
   219    564.3 MiB      1.0 MiB       10845               i += 1
   220    564.4 MiB      0.1 MiB       10845               t_avg += t_end - t_start
   221                                         
   222    564.4 MiB      0.0 MiB       10845               if t_end - t_print > t_interval:
   223    564.3 MiB      0.0 MiB         103                   print(f"Average processing time: {t_avg / i}")
   224    564.3 MiB      0.0 MiB         103                   i = 0
   225    564.3 MiB      0.0 MiB         103                   t_print = time.time()
   226    564.3 MiB      0.0 MiB         103                   t_avg = 0
   227                                                             
   228    564.4 MiB      0.0 MiB       10845               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    564.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    564.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    564.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    563.6 MiB     -0.8 MiB           1                   disp.end_stream()
   233    549.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    549.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    549.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    550.1 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    550.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    550.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    550.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    550.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    550.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243    550.1 MiB      0.0 MiB           1                   break
   244                                             
   245    550.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.1 MiB    515.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3781.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.4 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.4 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.4 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.4 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.5 MiB      0.0 MiB           1                                                           vidName, 
   188    531.5 MiB      0.0 MiB           1                                                           csvName, 
   189    531.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.5 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    541.9 MiB     10.4 MiB           1           disp.start_video_stream()
   199    550.2 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    550.2 MiB      0.0 MiB           1           if online:
   202   3821.2 MiB   3271.0 MiB           1               disp.init_online_processing()
   203                                         
   204   3821.2 MiB      0.0 MiB           1           t_interval = 5
   205   3821.2 MiB      0.0 MiB           1           t_avg = 0
   206   3821.2 MiB      0.0 MiB           1           t_print = time.time()
   207   3821.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3821.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3821.2 MiB      0.0 MiB           1           while True:
   212   3832.8 MiB      0.0 MiB       29848               t_start = time.time()
   213                                         
   214   3832.8 MiB     10.8 MiB       29848               disp.update_stream()
   215   3832.9 MiB      0.9 MiB       29848               disp.update_projector()
   216                                         
   217   3832.9 MiB      0.0 MiB       29848               t_end = time.time()
   218                                                     
   219   3832.9 MiB      0.0 MiB       29848               i += 1
   220   3832.9 MiB      0.0 MiB       29848               t_avg += t_end - t_start
   221                                         
   222   3832.9 MiB      0.0 MiB       29848               if t_end - t_print > t_interval:
   223   3832.8 MiB      0.0 MiB         476                   print(f"Average processing time: {t_avg / i}")
   224   3832.8 MiB      0.0 MiB         476                   i = 0
   225   3832.8 MiB      0.0 MiB         476                   t_print = time.time()
   226   3832.8 MiB      0.0 MiB         476                   t_avg = 0
   227                                                             
   228   3832.9 MiB      0.0 MiB       29848               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3832.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3832.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3832.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3832.1 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3818.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3818.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3818.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3781.4 MiB    -37.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3781.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3781.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3781.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3781.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3781.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3781.4 MiB      0.0 MiB           1                   break
   244                                             
   245   3781.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    509.1 MiB    509.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    509.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    509.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    509.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    509.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    509.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    509.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    509.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    509.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    509.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    542.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    525.5 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    525.5 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    525.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    525.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    525.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    525.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    525.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    525.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    525.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    525.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    525.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    525.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    525.5 MiB      0.0 MiB           1                                                           vidName, 
   188    525.5 MiB      0.0 MiB           1                                                           csvName, 
   189    525.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    525.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    536.2 MiB     10.6 MiB           1           disp.start_video_stream()
   199    544.4 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    544.4 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    544.4 MiB      0.0 MiB           1           t_interval = 5
   205    544.4 MiB      0.0 MiB           1           t_avg = 0
   206    544.4 MiB      0.0 MiB           1           t_print = time.time()
   207    544.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209    544.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    544.4 MiB      0.0 MiB           1           while True:
   212    557.0 MiB      0.0 MiB         966               t_start = time.time()
   213                                         
   214    557.0 MiB      1.0 MiB         966               disp.update_stream()
   215    557.0 MiB     11.6 MiB         966               disp.update_projector()
   216                                         
   217    557.0 MiB      0.1 MiB         966               t_end = time.time()
   218                                                     
   219    557.0 MiB      0.0 MiB         966               i += 1
   220    557.0 MiB      0.0 MiB         966               t_avg += t_end - t_start
   221                                         
   222    557.0 MiB      0.0 MiB         966               if t_end - t_print > t_interval:
   223    557.0 MiB      0.0 MiB           4                   print(f"Average processing time: {t_avg / i}")
   224    557.0 MiB      0.0 MiB           4                   i = 0
   225    557.0 MiB      0.0 MiB           4                   t_print = time.time()
   226    557.0 MiB      0.0 MiB           4                   t_avg = 0
   227                                                             
   228    557.0 MiB      0.0 MiB         966               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    557.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    557.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    557.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    556.6 MiB     -0.5 MiB           1                   disp.end_stream()
   233    542.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    542.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    542.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    542.8 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    542.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    542.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    509.1 MiB    509.1 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    509.1 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    509.1 MiB      0.0 MiB           1       faulthandler.enable()
   152    509.1 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    509.1 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    509.1 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    509.1 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    509.1 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    509.1 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    509.1 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    542.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    525.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    525.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    525.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    525.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    525.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    525.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    525.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    525.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    525.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    525.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    525.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    525.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    525.6 MiB      0.0 MiB           1                                                           vidName, 
   188    525.6 MiB      0.0 MiB           1                                                           csvName, 
   189    525.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    525.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    536.3 MiB     10.6 MiB           1           disp.start_video_stream()
   199    544.4 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    544.4 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    544.4 MiB      0.0 MiB           1           t_interval = 5
   205    544.4 MiB      0.0 MiB           1           t_avg = 0
   206    544.4 MiB      0.0 MiB           1           t_print = time.time()
   207    544.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209    544.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    544.4 MiB      0.0 MiB           1           while True:
   212    556.4 MiB      0.0 MiB         667               t_start = time.time()
   213                                         
   214    556.4 MiB      1.1 MiB         667               disp.update_stream()
   215    556.4 MiB     10.9 MiB         667               disp.update_projector()
   216                                         
   217    556.4 MiB      0.0 MiB         667               t_end = time.time()
   218                                                     
   219    556.4 MiB      0.0 MiB         667               i += 1
   220    556.4 MiB      0.0 MiB         667               t_avg += t_end - t_start
   221                                         
   222    556.4 MiB      0.0 MiB         667               if t_end - t_print > t_interval:
   223    556.4 MiB      0.0 MiB           2                   print(f"Average processing time: {t_avg / i}")
   224    556.4 MiB      0.0 MiB           2                   i = 0
   225    556.4 MiB      0.0 MiB           2                   t_print = time.time()
   226    556.4 MiB      0.0 MiB           2                   t_avg = 0
   227                                                             
   228    556.4 MiB      0.0 MiB         667               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    556.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    556.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    556.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    556.5 MiB      0.1 MiB           1                   disp.end_stream()
   233    542.7 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    542.7 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    542.7 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    542.7 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    542.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    542.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    542.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    542.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    542.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243    542.7 MiB      0.0 MiB           1                   break
   244                                             
   245    542.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    511.9 MiB    511.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    511.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    511.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    511.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    511.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    511.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    511.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    511.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    511.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    511.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    544.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    528.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    528.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    528.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    528.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    528.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    528.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    528.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    528.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    528.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    528.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    528.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    528.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    528.3 MiB      0.0 MiB           1                                                           vidName, 
   188    528.3 MiB      0.0 MiB           1                                                           csvName, 
   189    528.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    528.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    528.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    528.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    528.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    528.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    528.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    538.7 MiB     10.4 MiB           1           disp.start_video_stream()
   199    547.0 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    547.0 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    547.0 MiB      0.0 MiB           1           t_interval = 5
   205    547.0 MiB      0.0 MiB           1           t_avg = 0
   206    547.0 MiB      0.0 MiB           1           t_print = time.time()
   207    547.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209    547.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    547.0 MiB      0.0 MiB           1           while True:
   212    559.0 MiB      0.0 MiB        4514               t_start = time.time()
   213                                         
   214    559.0 MiB      1.1 MiB        4514               disp.update_stream()
   215    559.0 MiB     10.8 MiB        4514               disp.update_projector()
   216                                         
   217    559.1 MiB      0.1 MiB        4514               t_end = time.time()
   218                                                     
   219    559.1 MiB      0.0 MiB        4514               i += 1
   220    559.1 MiB      0.0 MiB        4514               t_avg += t_end - t_start
   221                                         
   222    559.1 MiB      0.0 MiB        4514               if t_end - t_print > t_interval:
   223    559.0 MiB      0.0 MiB          34                   print(f"Average processing time: {t_avg / i}")
   224    559.0 MiB      0.0 MiB          34                   i = 0
   225    559.0 MiB      0.0 MiB          34                   t_print = time.time()
   226    559.0 MiB      0.0 MiB          34                   t_avg = 0
   227                                                             
   228    559.1 MiB      0.0 MiB        4514               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    559.1 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    559.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    559.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    558.4 MiB     -0.6 MiB           1                   disp.end_stream()
   233    544.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    544.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    544.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    544.8 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237    544.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    544.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    544.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    544.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    544.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243    544.8 MiB      0.0 MiB           1                   break
   244                                             
   245    544.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    511.8 MiB    511.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    511.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    511.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    511.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    511.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    511.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    511.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    511.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    511.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    511.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    544.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    528.1 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    528.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    528.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    528.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    528.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    528.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    528.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    528.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    528.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    528.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    528.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    528.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    528.2 MiB      0.0 MiB           1                                                           vidName, 
   188    528.2 MiB      0.0 MiB           1                                                           csvName, 
   189    528.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    528.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    528.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    528.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    528.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    528.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    528.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    538.6 MiB     10.4 MiB           1           disp.start_video_stream()
   199    546.9 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    546.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    546.9 MiB      0.0 MiB           1           t_interval = 5
   205    546.9 MiB      0.0 MiB           1           t_avg = 0
   206    546.9 MiB      0.0 MiB           1           t_print = time.time()
   207    546.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    546.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    546.9 MiB      0.0 MiB           1           while True:
   212    558.9 MiB      0.0 MiB        4667               t_start = time.time()
   213                                         
   214    558.9 MiB      1.1 MiB        4667               disp.update_stream()
   215    558.9 MiB     10.9 MiB        4667               disp.update_projector()
   216                                         
   217    558.9 MiB      0.0 MiB        4667               t_end = time.time()
   218                                                     
   219    558.9 MiB      0.0 MiB        4667               i += 1
   220    558.9 MiB      0.0 MiB        4667               t_avg += t_end - t_start
   221                                         
   222    558.9 MiB      0.0 MiB        4667               if t_end - t_print > t_interval:
   223    558.9 MiB      0.0 MiB          32                   print(f"Average processing time: {t_avg / i}")
   224    558.9 MiB      0.0 MiB          32                   i = 0
   225    558.9 MiB      0.0 MiB          32                   t_print = time.time()
   226    558.9 MiB      0.0 MiB          32                   t_avg = 0
   227                                                             
   228    558.9 MiB      0.0 MiB        4667               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    558.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    558.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    558.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    558.4 MiB     -0.6 MiB           1                   disp.end_stream()
   233    544.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    544.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    544.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    544.8 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    544.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    544.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    544.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    544.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    544.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243    544.8 MiB      0.0 MiB           1                   break
   244                                             
   245    544.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    511.9 MiB    511.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    511.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    511.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    511.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    511.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    511.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    511.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    511.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    511.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    511.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    545.0 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    528.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    528.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    528.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    528.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    528.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    528.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    528.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    528.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    528.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    528.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    528.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    528.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    528.3 MiB      0.0 MiB           1                                                           vidName, 
   188    528.3 MiB      0.0 MiB           1                                                           csvName, 
   189    528.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    528.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    528.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    528.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    528.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    528.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    528.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    538.8 MiB     10.4 MiB           1           disp.start_video_stream()
   199    547.1 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    547.1 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    547.1 MiB      0.0 MiB           1           t_interval = 5
   205    547.1 MiB      0.0 MiB           1           t_avg = 0
   206    547.1 MiB      0.0 MiB           1           t_print = time.time()
   207    547.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209    547.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    547.1 MiB      0.0 MiB           1           while True:
   212    559.3 MiB      0.0 MiB        4156               t_start = time.time()
   213                                         
   214    559.3 MiB      1.0 MiB        4156               disp.update_stream()
   215    559.3 MiB     10.9 MiB        4156               disp.update_projector()
   216                                         
   217    559.3 MiB      0.3 MiB        4156               t_end = time.time()
   218                                                     
   219    559.4 MiB      0.1 MiB        4156               i += 1
   220    559.4 MiB      0.0 MiB        4156               t_avg += t_end - t_start
   221                                         
   222    559.4 MiB      0.0 MiB        4156               if t_end - t_print > t_interval:
   223    559.3 MiB      0.0 MiB          28                   print(f"Average processing time: {t_avg / i}")
   224    559.3 MiB      0.0 MiB          28                   i = 0
   225    559.3 MiB      0.0 MiB          28                   t_print = time.time()
   226    559.3 MiB      0.0 MiB          28                   t_avg = 0
   227                                                             
   228    559.4 MiB      0.0 MiB        4156               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    559.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    559.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    559.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    558.6 MiB     -0.8 MiB           1                   disp.end_stream()
   233    544.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    544.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    544.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    545.0 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    545.0 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    545.0 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    545.0 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    545.0 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    545.0 MiB      0.0 MiB           1                   vprint("User ready!")
   243    545.0 MiB      0.0 MiB           1                   break
   244                                             
   245    545.0 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    513.8 MiB    513.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    513.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    513.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    513.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    513.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    513.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    513.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    513.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    513.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    513.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    547.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    530.2 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    530.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    530.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    530.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    530.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    530.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    530.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    530.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    530.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    530.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    530.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    530.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    530.2 MiB      0.0 MiB           1                                                           vidName, 
   188    530.2 MiB      0.0 MiB           1                                                           csvName, 
   189    530.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    530.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    530.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    530.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    530.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    530.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    530.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    540.8 MiB     10.6 MiB           1           disp.start_video_stream()
   199    549.1 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    549.1 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    549.1 MiB      0.0 MiB           1           t_interval = 5
   205    549.1 MiB      0.0 MiB           1           t_avg = 0
   206    549.1 MiB      0.0 MiB           1           t_print = time.time()
   207    549.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209    549.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    549.1 MiB      0.0 MiB           1           while True:
   212    561.0 MiB      0.0 MiB        5860               t_start = time.time()
   213                                         
   214    561.0 MiB      0.9 MiB        5860               disp.update_stream()
   215    561.1 MiB     10.9 MiB        5860               disp.update_projector()
   216                                         
   217    561.1 MiB      0.2 MiB        5860               t_end = time.time()
   218                                                     
   219    561.1 MiB      0.0 MiB        5860               i += 1
   220    561.1 MiB      0.0 MiB        5860               t_avg += t_end - t_start
   221                                         
   222    561.1 MiB      0.0 MiB        5860               if t_end - t_print > t_interval:
   223    561.0 MiB      0.0 MiB          48                   print(f"Average processing time: {t_avg / i}")
   224    561.0 MiB      0.0 MiB          48                   i = 0
   225    561.0 MiB      0.0 MiB          48                   t_print = time.time()
   226    561.0 MiB      0.0 MiB          48                   t_avg = 0
   227                                                             
   228    561.1 MiB      0.0 MiB        5860               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    561.1 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    561.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    561.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    561.2 MiB      0.2 MiB           1                   disp.end_stream()
   233    547.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    547.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    547.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    547.7 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    547.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    547.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    547.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    547.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    547.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243    547.7 MiB      0.0 MiB           1                   break
   244                                             
   245    547.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    513.9 MiB    513.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    513.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    513.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    513.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    513.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    513.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    513.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    513.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    513.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    513.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    547.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    530.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    530.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    530.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    530.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    530.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    530.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    530.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    530.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    530.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    530.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    530.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    530.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    530.3 MiB      0.0 MiB           1                                                           vidName, 
   188    530.3 MiB      0.0 MiB           1                                                           csvName, 
   189    530.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    530.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    530.4 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    530.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    530.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    530.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    530.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    540.9 MiB     10.5 MiB           1           disp.start_video_stream()
   199    549.2 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    549.2 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    549.2 MiB      0.0 MiB           1           t_interval = 5
   205    549.2 MiB      0.0 MiB           1           t_avg = 0
   206    549.2 MiB      0.0 MiB           1           t_print = time.time()
   207    549.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209    549.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    549.2 MiB      0.0 MiB           1           while True:
   212    561.2 MiB      0.0 MiB        3387               t_start = time.time()
   213                                         
   214    561.2 MiB      1.2 MiB        3387               disp.update_stream()
   215    561.2 MiB     10.8 MiB        3387               disp.update_projector()
   216                                         
   217    561.2 MiB      0.0 MiB        3387               t_end = time.time()
   218                                                     
   219    561.2 MiB      0.0 MiB        3387               i += 1
   220    561.2 MiB      0.0 MiB        3387               t_avg += t_end - t_start
   221                                         
   222    561.2 MiB      0.0 MiB        3387               if t_end - t_print > t_interval:
   223    561.2 MiB      0.0 MiB          20                   print(f"Average processing time: {t_avg / i}")
   224    561.2 MiB      0.0 MiB          20                   i = 0
   225    561.2 MiB      0.0 MiB          20                   t_print = time.time()
   226    561.2 MiB      0.0 MiB          20                   t_avg = 0
   227                                                             
   228    561.2 MiB      0.0 MiB        3387               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    561.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    561.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    561.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    560.6 MiB     -0.6 MiB           1                   disp.end_stream()
   233    546.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    546.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    546.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    547.1 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    547.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    547.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    547.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    547.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    547.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243    547.1 MiB      0.0 MiB           1                   break
   244                                             
   245    547.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.6 MiB    515.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    548.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    532.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    532.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    532.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    532.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    532.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    532.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    532.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    532.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    532.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    532.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    532.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    532.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    532.0 MiB      0.0 MiB           1                                                           vidName, 
   188    532.0 MiB      0.0 MiB           1                                                           csvName, 
   189    532.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    532.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    532.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    532.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    532.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    532.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    532.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    542.4 MiB     10.4 MiB           1           disp.start_video_stream()
   199    550.7 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    550.7 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    550.7 MiB      0.0 MiB           1           t_interval = 5
   205    550.7 MiB      0.0 MiB           1           t_avg = 0
   206    550.7 MiB      0.0 MiB           1           t_print = time.time()
   207    550.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209    550.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    550.7 MiB      0.0 MiB           1           while True:
   212    562.7 MiB      0.0 MiB        5587               t_start = time.time()
   213                                         
   214    562.7 MiB      1.1 MiB        5587               disp.update_stream()
   215    562.7 MiB     10.7 MiB        5587               disp.update_projector()
   216                                         
   217    562.7 MiB      0.0 MiB        5587               t_end = time.time()
   218                                                     
   219    562.7 MiB      0.0 MiB        5587               i += 1
   220    562.7 MiB      0.2 MiB        5587               t_avg += t_end - t_start
   221                                         
   222    562.7 MiB      0.1 MiB        5587               if t_end - t_print > t_interval:
   223    562.7 MiB      0.0 MiB          43                   print(f"Average processing time: {t_avg / i}")
   224    562.7 MiB      0.0 MiB          43                   i = 0
   225    562.7 MiB      0.0 MiB          43                   t_print = time.time()
   226    562.7 MiB      0.0 MiB          43                   t_avg = 0
   227                                                             
   228    562.7 MiB      0.0 MiB        5587               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    562.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    562.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    562.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    562.2 MiB     -0.6 MiB           1                   disp.end_stream()
   233    548.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    548.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    548.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    548.6 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    548.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    548.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    548.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    548.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    548.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243    548.6 MiB      0.0 MiB           1                   break
   244                                             
   245    548.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    514.2 MiB    514.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    514.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    514.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    514.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    514.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    514.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    514.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    514.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    514.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    514.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    546.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    530.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    530.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    530.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    530.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    530.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    530.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    530.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    530.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    530.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    530.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    530.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    530.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    530.6 MiB      0.0 MiB           1                                                           vidName, 
   188    530.6 MiB      0.0 MiB           1                                                           csvName, 
   189    530.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    530.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    530.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    530.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    530.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    530.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    530.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    540.9 MiB     10.3 MiB           1           disp.start_video_stream()
   199    549.1 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    549.1 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    549.1 MiB      0.0 MiB           1           t_interval = 5
   205    549.1 MiB      0.0 MiB           1           t_avg = 0
   206    549.1 MiB      0.0 MiB           1           t_print = time.time()
   207    549.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209    549.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    549.1 MiB      0.0 MiB           1           while True:
   212    560.9 MiB      0.0 MiB         408               t_start = time.time()
   213                                         
   214    560.9 MiB      1.1 MiB         408               disp.update_stream()
   215    560.9 MiB     10.7 MiB         408               disp.update_projector()
   216                                         
   217    560.9 MiB      0.0 MiB         408               t_end = time.time()
   218                                                     
   219    560.9 MiB      0.0 MiB         408               i += 1
   220    560.9 MiB      0.0 MiB         408               t_avg += t_end - t_start
   221                                         
   222    560.9 MiB      0.0 MiB         408               if t_end - t_print > t_interval:
   223    560.9 MiB      0.0 MiB           1                   print(f"Average processing time: {t_avg / i}")
   224    560.9 MiB      0.0 MiB           1                   i = 0
   225    560.9 MiB      0.0 MiB           1                   t_print = time.time()
   226    560.9 MiB      0.0 MiB           1                   t_avg = 0
   227                                                             
   228    560.9 MiB      0.0 MiB         408               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    560.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    560.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    560.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    560.3 MiB     -0.6 MiB           1                   disp.end_stream()
   233    546.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    546.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    546.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    546.5 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    546.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    546.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    512.0 MiB    512.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    512.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    512.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    512.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    512.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    512.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    512.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    512.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    512.0 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    512.0 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    544.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    528.4 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    528.4 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    528.4 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    528.4 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    528.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    528.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    528.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    528.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    528.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    528.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    528.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    528.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    528.4 MiB      0.0 MiB           1                                                           vidName, 
   188    528.4 MiB      0.0 MiB           1                                                           csvName, 
   189    528.4 MiB      0.0 MiB           1                                                           spec_dict), 
   190    528.4 MiB      0.0 MiB           1                                                   daemon=False)
   191    528.4 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    528.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    528.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    528.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    528.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    538.8 MiB     10.3 MiB           1           disp.start_video_stream()
   199    547.1 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    547.1 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    547.1 MiB      0.0 MiB           1           t_interval = 5
   205    547.1 MiB      0.0 MiB           1           t_avg = 0
   206    547.1 MiB      0.0 MiB           1           t_print = time.time()
   207    547.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209    547.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    547.1 MiB      0.0 MiB           1           while True:
   212    559.1 MiB      0.0 MiB        1462               t_start = time.time()
   213                                         
   214    559.1 MiB      1.1 MiB        1462               disp.update_stream()
   215    559.1 MiB     10.7 MiB        1462               disp.update_projector()
   216                                         
   217    559.1 MiB      0.2 MiB        1462               t_end = time.time()
   218                                                     
   219    559.1 MiB      0.0 MiB        1462               i += 1
   220    559.1 MiB      0.0 MiB        1462               t_avg += t_end - t_start
   221                                         
   222    559.1 MiB      0.0 MiB        1462               if t_end - t_print > t_interval:
   223    559.1 MiB      0.0 MiB           8                   print(f"Average processing time: {t_avg / i}")
   224    559.1 MiB      0.0 MiB           8                   i = 0
   225    559.1 MiB      0.0 MiB           8                   t_print = time.time()
   226    559.1 MiB      0.0 MiB           8                   t_avg = 0
   227                                                             
   228    559.1 MiB      0.0 MiB        1462               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    559.1 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    559.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    559.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    558.4 MiB     -0.7 MiB           1                   disp.end_stream()
   233    544.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    544.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    544.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    544.8 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    544.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    544.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    544.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    544.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    544.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243    544.8 MiB      0.0 MiB           1                   break
   244                                             
   245    544.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    514.9 MiB    514.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    514.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    514.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    514.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    514.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    514.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    514.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    514.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    514.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    514.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    548.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.3 MiB      0.0 MiB           1                                                           vidName, 
   188    531.3 MiB      0.0 MiB           1                                                           csvName, 
   189    531.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    541.9 MiB     10.5 MiB           1           disp.start_video_stream()
   199    550.0 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    550.0 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    550.0 MiB      0.0 MiB           1           t_interval = 5
   205    550.0 MiB      0.0 MiB           1           t_avg = 0
   206    550.0 MiB      0.0 MiB           1           t_print = time.time()
   207    550.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209    550.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    550.0 MiB      0.0 MiB           1           while True:
   212    562.0 MiB      0.0 MiB        9666               t_start = time.time()
   213                                         
   214    562.0 MiB      1.2 MiB        9666               disp.update_stream()
   215    562.0 MiB     10.8 MiB        9666               disp.update_projector()
   216                                         
   217    562.0 MiB      0.0 MiB        9666               t_end = time.time()
   218                                                     
   219    562.0 MiB      0.0 MiB        9666               i += 1
   220    562.0 MiB      0.0 MiB        9666               t_avg += t_end - t_start
   221                                         
   222    562.0 MiB      0.0 MiB        9666               if t_end - t_print > t_interval:
   223    562.0 MiB      0.0 MiB          91                   print(f"Average processing time: {t_avg / i}")
   224    562.0 MiB      0.0 MiB          91                   i = 0
   225    562.0 MiB      0.0 MiB          91                   t_print = time.time()
   226    562.0 MiB      0.0 MiB          91                   t_avg = 0
   227                                                             
   228    562.0 MiB      0.0 MiB        9666               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    562.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    562.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    562.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    562.2 MiB      0.2 MiB           1                   disp.end_stream()
   233    548.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    548.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    548.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    548.7 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    548.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    548.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    548.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    548.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    548.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243    548.7 MiB      0.0 MiB           1                   break
   244                                             
   245    548.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    509.8 MiB    509.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    509.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    509.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    509.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    509.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    509.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    509.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    509.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    509.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    509.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    543.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    526.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    526.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    526.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    526.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    526.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    526.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    526.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    526.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    526.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    526.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    526.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    526.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    526.3 MiB      0.0 MiB           1                                                           vidName, 
   188    526.3 MiB      0.0 MiB           1                                                           csvName, 
   189    526.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    526.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    526.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    526.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    526.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    526.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    526.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    537.1 MiB     10.8 MiB           1           disp.start_video_stream()
   199    545.3 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    545.3 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    545.3 MiB      0.0 MiB           1           t_interval = 5
   205    545.3 MiB      0.0 MiB           1           t_avg = 0
   206    545.3 MiB      0.0 MiB           1           t_print = time.time()
   207    545.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209    545.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    545.3 MiB      0.0 MiB           1           while True:
   212    557.3 MiB      0.0 MiB        8495               t_start = time.time()
   213                                         
   214    557.3 MiB      0.9 MiB        8495               disp.update_stream()
   215    557.3 MiB     10.8 MiB        8495               disp.update_projector()
   216                                         
   217    557.3 MiB      0.3 MiB        8495               t_end = time.time()
   218                                                     
   219    557.3 MiB      0.1 MiB        8495               i += 1
   220    557.3 MiB      0.0 MiB        8495               t_avg += t_end - t_start
   221                                         
   222    557.3 MiB      0.0 MiB        8495               if t_end - t_print > t_interval:
   223    557.3 MiB      0.0 MiB          73                   print(f"Average processing time: {t_avg / i}")
   224    557.3 MiB      0.0 MiB          73                   i = 0
   225    557.3 MiB      0.0 MiB          73                   t_print = time.time()
   226    557.3 MiB      0.0 MiB          73                   t_avg = 0
   227                                                             
   228    557.3 MiB      0.0 MiB        8495               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    557.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    557.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    557.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    557.4 MiB      0.1 MiB           1                   disp.end_stream()
   233    543.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    543.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    543.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    543.8 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    543.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    543.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    543.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    543.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    543.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243    543.8 MiB      0.0 MiB           1                   break
   244                                             
   245    543.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    508.2 MiB    508.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    508.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    508.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    508.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    508.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    508.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    508.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    508.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    508.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    508.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    541.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    524.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    524.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    524.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    524.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    524.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    524.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    524.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    524.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    524.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    524.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    524.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    524.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    524.6 MiB      0.0 MiB           1                                                           vidName, 
   188    524.6 MiB      0.0 MiB           1                                                           csvName, 
   189    524.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    524.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    524.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    524.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    524.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    524.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    524.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.2 MiB     10.5 MiB           1           disp.start_video_stream()
   199    543.3 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    543.3 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    543.3 MiB      0.0 MiB           1           t_interval = 5
   205    543.3 MiB      0.0 MiB           1           t_avg = 0
   206    543.3 MiB      0.0 MiB           1           t_print = time.time()
   207    543.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209    543.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    543.3 MiB      0.0 MiB           1           while True:
   212    555.2 MiB      0.0 MiB        3058               t_start = time.time()
   213                                         
   214    555.2 MiB      1.0 MiB        3058               disp.update_stream()
   215    555.2 MiB     10.7 MiB        3058               disp.update_projector()
   216                                         
   217    555.2 MiB      0.0 MiB        3058               t_end = time.time()
   218                                                     
   219    555.2 MiB      0.0 MiB        3058               i += 1
   220    555.2 MiB      0.0 MiB        3058               t_avg += t_end - t_start
   221                                         
   222    555.2 MiB      0.2 MiB        3058               if t_end - t_print > t_interval:
   223    555.2 MiB      0.0 MiB          18                   print(f"Average processing time: {t_avg / i}")
   224    555.2 MiB      0.0 MiB          18                   i = 0
   225    555.2 MiB      0.0 MiB          18                   t_print = time.time()
   226    555.2 MiB      0.0 MiB          18                   t_avg = 0
   227                                                             
   228    555.2 MiB      0.0 MiB        3058               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    555.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    555.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    555.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    554.6 MiB     -0.6 MiB           1                   disp.end_stream()
   233    540.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    540.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    540.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    541.1 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    541.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    541.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    541.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    541.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    541.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243    541.1 MiB      0.0 MiB           1                   break
   244                                             
   245    541.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    513.6 MiB    513.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    513.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    513.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    513.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    513.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    513.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    513.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    513.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    513.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    513.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    546.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    530.1 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    530.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    530.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    530.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    530.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    530.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    530.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    530.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    530.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    530.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    530.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    530.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    530.1 MiB      0.0 MiB           1                                                           vidName, 
   188    530.1 MiB      0.0 MiB           1                                                           csvName, 
   189    530.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    530.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    530.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    530.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    530.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    530.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    530.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    540.7 MiB     10.6 MiB           1           disp.start_video_stream()
   199    548.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    548.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    548.9 MiB      0.0 MiB           1           t_interval = 5
   205    548.9 MiB      0.0 MiB           1           t_avg = 0
   206    548.9 MiB      0.0 MiB           1           t_print = time.time()
   207    548.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    548.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    548.9 MiB      0.0 MiB           1           while True:
   212    560.9 MiB      0.0 MiB        3070               t_start = time.time()
   213                                         
   214    560.9 MiB      1.1 MiB        3070               disp.update_stream()
   215    560.9 MiB     10.8 MiB        3070               disp.update_projector()
   216                                         
   217    560.9 MiB      0.0 MiB        3070               t_end = time.time()
   218                                                     
   219    560.9 MiB      0.1 MiB        3070               i += 1
   220    560.9 MiB      0.0 MiB        3070               t_avg += t_end - t_start
   221                                         
   222    560.9 MiB      0.0 MiB        3070               if t_end - t_print > t_interval:
   223    560.9 MiB      0.0 MiB          19                   print(f"Average processing time: {t_avg / i}")
   224    560.9 MiB      0.0 MiB          19                   i = 0
   225    560.9 MiB      0.0 MiB          19                   t_print = time.time()
   226    560.9 MiB      0.0 MiB          19                   t_avg = 0
   227                                                             
   228    560.9 MiB      0.0 MiB        3070               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    560.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    560.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    560.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    560.2 MiB     -0.6 MiB           1                   disp.end_stream()
   233    546.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    546.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    546.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    546.7 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    546.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    546.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    546.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    546.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    546.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243    546.7 MiB      0.0 MiB           1                   break
   244                                             
   245    546.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    514.2 MiB    514.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    514.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    514.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    514.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    514.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    514.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    514.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    514.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    514.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    514.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    547.0 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    530.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    530.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    530.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    530.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    530.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    530.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    530.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    530.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    530.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    530.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    530.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    530.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    530.6 MiB      0.0 MiB           1                                                           vidName, 
   188    530.6 MiB      0.0 MiB           1                                                           csvName, 
   189    530.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    530.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    530.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    530.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    530.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    530.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    530.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    541.0 MiB     10.4 MiB           1           disp.start_video_stream()
   199    549.3 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    549.3 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    549.3 MiB      0.0 MiB           1           t_interval = 5
   205    549.3 MiB      0.0 MiB           1           t_avg = 0
   206    549.3 MiB      0.0 MiB           1           t_print = time.time()
   207    549.3 MiB      0.0 MiB           1           i = 0
   208                                         
   209    549.3 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    549.3 MiB      0.0 MiB           1           while True:
   212    561.2 MiB      0.0 MiB        1895               t_start = time.time()
   213                                         
   214    561.2 MiB      1.0 MiB        1895               disp.update_stream()
   215    561.2 MiB     10.7 MiB        1895               disp.update_projector()
   216                                         
   217    561.2 MiB      0.2 MiB        1895               t_end = time.time()
   218                                                     
   219    561.2 MiB      0.0 MiB        1895               i += 1
   220    561.2 MiB      0.0 MiB        1895               t_avg += t_end - t_start
   221                                         
   222    561.2 MiB      0.0 MiB        1895               if t_end - t_print > t_interval:
   223    561.2 MiB      0.0 MiB          11                   print(f"Average processing time: {t_avg / i}")
   224    561.2 MiB      0.0 MiB          11                   i = 0
   225    561.2 MiB      0.0 MiB          11                   t_print = time.time()
   226    561.2 MiB      0.0 MiB          11                   t_avg = 0
   227                                                             
   228    561.2 MiB      0.0 MiB        1895               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    561.2 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    561.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    561.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    560.6 MiB     -0.6 MiB           1                   disp.end_stream()
   233    546.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    546.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    546.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    547.0 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237    547.0 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    547.0 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    547.0 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    547.0 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    547.0 MiB      0.0 MiB           1                   vprint("User ready!")
   243    547.0 MiB      0.0 MiB           1                   break
   244                                             
   245    547.0 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.0 MiB    515.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.0 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.0 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3764.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.4 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.4 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.4 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.4 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.4 MiB      0.0 MiB           1                                                           vidName, 
   188    531.4 MiB      0.0 MiB           1                                                           csvName, 
   189    531.4 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.4 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.4 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    542.1 MiB     10.6 MiB           1           disp.start_video_stream()
   199    550.3 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    550.3 MiB      0.0 MiB           1           if online:
   202   3766.4 MiB   3216.1 MiB           1               disp.init_online_processing()
   203                                         
   204   3766.4 MiB      0.0 MiB           1           t_interval = 5
   205   3766.4 MiB      0.0 MiB           1           t_avg = 0
   206   3766.4 MiB      0.0 MiB           1           t_print = time.time()
   207   3766.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3766.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3766.4 MiB      0.0 MiB           1           while True:
   212   3778.0 MiB      0.0 MiB       18147               t_start = time.time()
   213                                         
   214   3778.0 MiB     10.8 MiB       18147               disp.update_stream()
   215   3778.0 MiB      0.8 MiB       18147               disp.update_projector()
   216                                         
   217   3778.0 MiB      0.0 MiB       18147               t_end = time.time()
   218                                                     
   219   3778.0 MiB      0.0 MiB       18147               i += 1
   220   3778.0 MiB      0.0 MiB       18147               t_avg += t_end - t_start
   221                                         
   222   3778.0 MiB      0.0 MiB       18147               if t_end - t_print > t_interval:
   223   3778.0 MiB      0.0 MiB         293                   print(f"Average processing time: {t_avg / i}")
   224   3778.0 MiB      0.0 MiB         293                   i = 0
   225   3778.0 MiB      0.0 MiB         293                   t_print = time.time()
   226   3778.0 MiB      0.0 MiB         293                   t_avg = 0
   227                                                             
   228   3778.0 MiB      0.0 MiB       18147               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3778.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3778.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3778.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3778.1 MiB      0.1 MiB           1                   disp.end_stream()
   233   3764.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3764.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3764.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3764.3 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3764.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3764.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3764.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3764.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3764.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3764.3 MiB      0.0 MiB           1                   break
   244                                             
   245   3764.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    514.2 MiB    514.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    514.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    514.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    514.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    514.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    514.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    514.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    514.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    514.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    514.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3856.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    530.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    530.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    530.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    530.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    530.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    530.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    530.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    530.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    530.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    530.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    530.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    530.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    530.6 MiB      0.0 MiB           1                                                           vidName, 
   188    530.6 MiB      0.0 MiB           1                                                           csvName, 
   189    530.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    530.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    530.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    530.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    530.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    530.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    530.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    541.0 MiB     10.3 MiB           1           disp.start_video_stream()
   199    549.3 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    549.3 MiB      0.0 MiB           1           if online:
   202   3861.0 MiB   3311.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3861.0 MiB      0.0 MiB           1           t_interval = 5
   205   3861.0 MiB      0.0 MiB           1           t_avg = 0
   206   3861.0 MiB      0.0 MiB           1           t_print = time.time()
   207   3861.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3861.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3861.0 MiB      0.0 MiB           1           while True:
   212   3870.9 MiB      0.0 MiB        2271               t_start = time.time()
   213                                         
   214   3870.9 MiB      9.7 MiB        2271               disp.update_stream()
   215   3870.9 MiB      0.2 MiB        2271               disp.update_projector()
   216                                         
   217   3870.9 MiB      0.0 MiB        2271               t_end = time.time()
   218                                                     
   219   3870.9 MiB      0.0 MiB        2271               i += 1
   220   3870.9 MiB      0.0 MiB        2271               t_avg += t_end - t_start
   221                                         
   222   3870.9 MiB      0.0 MiB        2271               if t_end - t_print > t_interval:
   223   3870.9 MiB      0.0 MiB          25                   print(f"Average processing time: {t_avg / i}")
   224   3870.9 MiB      0.0 MiB          25                   i = 0
   225   3870.9 MiB      0.0 MiB          25                   t_print = time.time()
   226   3870.9 MiB      0.0 MiB          25                   t_avg = 0
   227                                                             
   228   3870.9 MiB      0.0 MiB        2271               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3870.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3870.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3870.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3870.2 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3856.4 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3856.4 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3856.4 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3856.4 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3856.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3856.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3856.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3856.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3856.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3856.4 MiB      0.0 MiB           1                   break
   244                                             
   245   3856.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    507.9 MiB    507.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    507.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    507.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    507.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    507.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    507.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    507.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    507.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    507.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    507.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    542.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    524.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    524.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    524.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    524.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    524.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    524.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    524.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    524.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    524.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    524.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    524.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    524.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    524.3 MiB      0.0 MiB           1                                                           vidName, 
   188    524.3 MiB      0.0 MiB           1                                                           csvName, 
   189    524.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    524.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    524.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    524.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    524.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    524.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    524.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    534.8 MiB     10.4 MiB           1           disp.start_video_stream()
   199    542.9 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    542.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    542.9 MiB      0.0 MiB           1           t_interval = 5
   205    542.9 MiB      0.0 MiB           1           t_avg = 0
   206    542.9 MiB      0.0 MiB           1           t_print = time.time()
   207    542.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    542.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    542.9 MiB      0.0 MiB           1           while True:
   212    556.5 MiB      0.0 MiB       15908               t_start = time.time()
   213                                         
   214    556.5 MiB      1.0 MiB       15908               disp.update_stream()
   215    556.5 MiB     11.1 MiB       15908               disp.update_projector()
   216                                         
   217    556.5 MiB      0.0 MiB       15908               t_end = time.time()
   218                                                     
   219    556.5 MiB      0.0 MiB       15908               i += 1
   220    556.5 MiB      0.0 MiB       15908               t_avg += t_end - t_start
   221                                         
   222    556.5 MiB      0.0 MiB       15908               if t_end - t_print > t_interval:
   223    556.5 MiB      0.0 MiB         152                   print(f"Average processing time: {t_avg / i}")
   224    556.5 MiB      0.0 MiB         152                   i = 0
   225    556.5 MiB      0.0 MiB         152                   t_print = time.time()
   226    556.5 MiB      0.0 MiB         152                   t_avg = 0
   227                                                             
   228    556.5 MiB      1.5 MiB       15908               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    556.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    556.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    556.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    556.5 MiB     -0.0 MiB           1                   disp.end_stream()
   233    542.7 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    542.7 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    542.7 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    542.7 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    542.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    542.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    542.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    542.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    542.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243    542.7 MiB      0.0 MiB           1                   break
   244                                             
   245    542.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.5 MiB    515.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    549.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    531.9 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    531.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    531.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    531.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    531.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    531.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    531.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    531.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    531.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    531.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    531.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    531.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    531.9 MiB      0.0 MiB           1                                                           vidName, 
   188    531.9 MiB      0.0 MiB           1                                                           csvName, 
   189    531.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    531.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    531.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    531.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    531.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    531.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    531.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    542.3 MiB     10.4 MiB           1           disp.start_video_stream()
   199    550.5 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    550.5 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    550.5 MiB      0.0 MiB           1           t_interval = 5
   205    550.5 MiB      0.0 MiB           1           t_avg = 0
   206    550.5 MiB      0.0 MiB           1           t_print = time.time()
   207    550.5 MiB      0.0 MiB           1           i = 0
   208                                         
   209    550.5 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    550.5 MiB      0.0 MiB           1           while True:
   212    563.7 MiB  -2082.9 MiB       19749               t_start = time.time()
   213                                         
   214    563.7 MiB  -2080.8 MiB       19749               disp.update_stream()
   215    563.7 MiB  -2072.1 MiB       19749               disp.update_projector()
   216                                         
   217    563.7 MiB  -2082.9 MiB       19749               t_end = time.time()
   218                                                     
   219    563.7 MiB  -2082.8 MiB       19749               i += 1
   220    563.7 MiB  -2083.0 MiB       19749               t_avg += t_end - t_start
   221                                         
   222    563.7 MiB  -2083.0 MiB       19749               if t_end - t_print > t_interval:
   223    563.7 MiB    -22.1 MiB         195                   print(f"Average processing time: {t_avg / i}")
   224    563.7 MiB    -22.1 MiB         195                   i = 0
   225    563.7 MiB    -22.1 MiB         195                   t_print = time.time()
   226    563.7 MiB    -22.1 MiB         195                   t_avg = 0
   227                                                             
   228    563.7 MiB  -2082.8 MiB       19749               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    563.6 MiB     -0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    563.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    563.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    563.0 MiB     -0.6 MiB           1                   disp.end_stream()
   233    549.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    549.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    549.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    549.5 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    549.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    549.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    549.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    549.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    549.5 MiB      0.0 MiB           1                   vprint("User ready!")
   243    549.5 MiB      0.0 MiB           1                   break
   244                                             
   245    549.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    515.7 MiB    515.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    515.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    515.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    515.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    515.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    515.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    515.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    515.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    515.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    515.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    549.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    532.0 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    532.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    532.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    532.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    532.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    532.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    532.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    532.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    532.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    532.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    532.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    532.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    532.0 MiB      0.0 MiB           1                                                           vidName, 
   188    532.0 MiB      0.0 MiB           1                                                           csvName, 
   189    532.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    532.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    532.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    532.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    532.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    532.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    532.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    542.5 MiB     10.4 MiB           1           disp.start_video_stream()
   199    550.7 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    550.7 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    550.7 MiB      0.0 MiB           1           t_interval = 5
   205    550.7 MiB      0.0 MiB           1           t_avg = 0
   206    550.7 MiB      0.0 MiB           1           t_print = time.time()
   207    550.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209    550.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    550.7 MiB      0.0 MiB           1           while True:
   212    562.7 MiB      0.0 MiB       14405               t_start = time.time()
   213                                         
   214    562.7 MiB      1.0 MiB       14405               disp.update_stream()
   215    562.8 MiB      9.5 MiB       14405               disp.update_projector()
   216                                         
   217    562.8 MiB      1.5 MiB       14405               t_end = time.time()
   218                                                     
   219    562.8 MiB      0.1 MiB       14405               i += 1
   220    562.8 MiB      0.0 MiB       14405               t_avg += t_end - t_start
   221                                         
   222    562.8 MiB      0.0 MiB       14405               if t_end - t_print > t_interval:
   223    562.7 MiB      0.0 MiB         130                   print(f"Average processing time: {t_avg / i}")
   224    562.7 MiB      0.0 MiB         130                   i = 0
   225    562.7 MiB      0.0 MiB         130                   t_print = time.time()
   226    562.7 MiB      0.0 MiB         130                   t_avg = 0
   227                                                             
   228    562.8 MiB      0.0 MiB       14405               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    562.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    562.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    562.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    563.0 MiB      0.3 MiB           1                   disp.end_stream()
   233    549.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    549.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    549.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    549.3 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    549.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    549.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    549.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    549.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    549.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243    549.3 MiB      0.0 MiB           1                   break
   244                                             
   245    549.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    508.6 MiB    508.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    508.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    508.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    508.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    508.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    508.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    508.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    508.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    508.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    508.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    541.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    525.1 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    525.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    525.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    525.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    525.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    525.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    525.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    525.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    525.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    525.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    525.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    525.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    525.1 MiB      0.0 MiB           1                                                           vidName, 
   188    525.1 MiB      0.0 MiB           1                                                           csvName, 
   189    525.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    525.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.5 MiB     10.4 MiB           1           disp.start_video_stream()
   199    543.7 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    543.7 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    543.7 MiB      0.0 MiB           1           t_interval = 5
   205    543.7 MiB      0.0 MiB           1           t_avg = 0
   206    543.7 MiB      0.0 MiB           1           t_print = time.time()
   207    543.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209    543.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    543.7 MiB      0.0 MiB           1           while True:
   212    555.5 MiB      0.0 MiB        5712               t_start = time.time()
   213                                         
   214    555.5 MiB      0.9 MiB        5712               disp.update_stream()
   215    555.5 MiB     10.9 MiB        5712               disp.update_projector()
   216                                         
   217    555.5 MiB      0.0 MiB        5712               t_end = time.time()
   218                                                     
   219    555.5 MiB      0.0 MiB        5712               i += 1
   220    555.5 MiB      0.0 MiB        5712               t_avg += t_end - t_start
   221                                         
   222    555.5 MiB      0.0 MiB        5712               if t_end - t_print > t_interval:
   223    555.5 MiB      0.0 MiB          43                   print(f"Average processing time: {t_avg / i}")
   224    555.5 MiB      0.0 MiB          43                   i = 0
   225    555.5 MiB      0.0 MiB          43                   t_print = time.time()
   226    555.5 MiB      0.0 MiB          43                   t_avg = 0
   227                                                             
   228    555.5 MiB      0.0 MiB        5712               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    555.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    555.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    555.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    555.6 MiB      0.1 MiB           1                   disp.end_stream()
   233    541.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    541.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    541.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    541.8 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    541.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    541.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    541.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    541.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    541.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243    541.8 MiB      0.0 MiB           1                   break
   244                                             
   245    541.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    508.3 MiB    508.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    508.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    508.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    508.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    508.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    508.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    508.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    508.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    508.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    508.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    541.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    524.7 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    524.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    524.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    524.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    524.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    524.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    524.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    524.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    524.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    524.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    524.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    524.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    524.8 MiB      0.0 MiB           1                                                           vidName, 
   188    524.8 MiB      0.0 MiB           1                                                           csvName, 
   189    524.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    524.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    524.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    524.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    524.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    524.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    524.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.3 MiB     10.5 MiB           1           disp.start_video_stream()
   199    543.4 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    543.4 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    543.4 MiB      0.0 MiB           1           t_interval = 5
   205    543.4 MiB      0.0 MiB           1           t_avg = 0
   206    543.4 MiB      0.0 MiB           1           t_print = time.time()
   207    543.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209    543.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    543.4 MiB      0.0 MiB           1           while True:
   212    556.4 MiB     -0.5 MiB       25757               t_start = time.time()
   213                                         
   214    556.4 MiB      0.4 MiB       25757               disp.update_stream()
   215    556.4 MiB     11.5 MiB       25757               disp.update_projector()
   216                                         
   217    556.4 MiB     -0.5 MiB       25757               t_end = time.time()
   218                                                     
   219    556.4 MiB     -0.5 MiB       25757               i += 1
   220    556.4 MiB     -0.5 MiB       25757               t_avg += t_end - t_start
   221                                         
   222    556.4 MiB     -0.5 MiB       25757               if t_end - t_print > t_interval:
   223    556.4 MiB     -0.5 MiB         252                   print(f"Average processing time: {t_avg / i}")
   224    556.4 MiB     -0.5 MiB         252                   i = 0
   225    556.4 MiB     -0.5 MiB         252                   t_print = time.time()
   226    556.4 MiB     -0.5 MiB         252                   t_avg = 0
   227                                                             
   228    556.4 MiB     -0.4 MiB       25757               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    556.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    556.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    556.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    555.7 MiB     -0.7 MiB           1                   disp.end_stream()
   233    541.9 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    541.9 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    541.9 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    541.9 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237    541.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    541.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    541.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    541.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    541.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243    541.9 MiB      0.0 MiB           1                   break
   244                                             
   245    541.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    508.5 MiB    508.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    508.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    508.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    508.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    508.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    508.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    508.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    508.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    508.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    508.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3791.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    524.9 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    524.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    524.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    524.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    524.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    524.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    524.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    524.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    524.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    524.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    524.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    524.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    524.9 MiB      0.0 MiB           1                                                           vidName, 
   188    524.9 MiB      0.0 MiB           1                                                           csvName, 
   189    524.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    524.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.4 MiB     10.4 MiB           1           disp.start_video_stream()
   199    543.5 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    543.5 MiB      0.0 MiB           1           if online:
   202   3795.6 MiB   3252.1 MiB           1               disp.init_online_processing()
   203                                         
   204   3795.6 MiB      0.0 MiB           1           t_interval = 5
   205   3795.6 MiB      0.0 MiB           1           t_avg = 0
   206   3795.6 MiB      0.0 MiB           1           t_print = time.time()
   207   3795.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3795.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3795.6 MiB      0.0 MiB           1           while True:
   212   3805.6 MiB      0.0 MiB       10185               t_start = time.time()
   213                                         
   214   3805.6 MiB      9.5 MiB       10185               disp.update_stream()
   215   3805.7 MiB      0.5 MiB       10185               disp.update_projector()
   216                                         
   217   3805.7 MiB      0.0 MiB       10185               t_end = time.time()
   218                                                     
   219   3805.7 MiB      0.0 MiB       10185               i += 1
   220   3805.7 MiB      0.0 MiB       10185               t_avg += t_end - t_start
   221                                         
   222   3805.7 MiB      0.0 MiB       10185               if t_end - t_print > t_interval:
   223   3805.6 MiB      0.0 MiB         203                   print(f"Average processing time: {t_avg / i}")
   224   3805.6 MiB      0.0 MiB         203                   i = 0
   225   3805.6 MiB      0.0 MiB         203                   t_print = time.time()
   226   3805.6 MiB      0.0 MiB         203                   t_avg = 0
   227                                                             
   228   3805.7 MiB      0.0 MiB       10185               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3805.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3805.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3805.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3804.9 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3791.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3791.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3791.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3791.1 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3791.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3791.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3791.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3791.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3791.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3791.1 MiB      0.0 MiB           1                   break
   244                                             
   245   3791.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.7 MiB    521.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3817.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.1 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.1 MiB      0.0 MiB           1                                                           vidName, 
   188    538.1 MiB      0.0 MiB           1                                                           csvName, 
   189    538.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.7 MiB     10.6 MiB           1           disp.start_video_stream()
   199    557.1 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    557.1 MiB      0.0 MiB           1           if online:
   202   3835.9 MiB   3278.8 MiB           1               disp.init_online_processing()
   203                                         
   204   3835.9 MiB      0.0 MiB           1           t_interval = 5
   205   3835.9 MiB      0.0 MiB           1           t_avg = 0
   206   3835.9 MiB      0.0 MiB           1           t_print = time.time()
   207   3835.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3835.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3835.9 MiB      0.0 MiB           1           while True:
   212   3847.7 MiB -207574.5 MiB       15815               t_start = time.time()
   213                                         
   214   3847.7 MiB -207563.1 MiB       15815               disp.update_stream()
   215   3847.7 MiB -207590.0 MiB       15815               disp.update_projector()
   216                                         
   217   3847.7 MiB -207590.3 MiB       15815               t_end = time.time()
   218                                                     
   219   3847.7 MiB -207590.3 MiB       15815               i += 1
   220   3847.7 MiB -207590.3 MiB       15815               t_avg += t_end - t_start
   221                                         
   222   3847.7 MiB -207590.3 MiB       15815               if t_end - t_print > t_interval:
   223   3847.7 MiB  -2609.7 MiB         200                   print(f"Average processing time: {t_avg / i}")
   224   3847.7 MiB  -2609.7 MiB         200                   i = 0
   225   3847.7 MiB  -2609.7 MiB         200                   t_print = time.time()
   226   3847.7 MiB  -2609.7 MiB         200                   t_avg = 0
   227                                                             
   228   3847.7 MiB -207590.3 MiB       15815               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3831.9 MiB    -15.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3831.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3831.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3831.0 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3817.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3817.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3817.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3817.3 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3817.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3817.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3817.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3817.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3817.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3817.3 MiB      0.0 MiB           1                   break
   244                                             
   245   3817.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    509.0 MiB    509.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    509.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    509.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    509.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    509.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    509.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    509.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    509.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    509.0 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    509.0 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    541.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    525.4 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    525.4 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    525.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    525.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    525.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    525.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    525.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    525.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    525.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    525.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    525.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    525.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    525.5 MiB      0.0 MiB           1                                                           vidName, 
   188    525.5 MiB      0.0 MiB           1                                                           csvName, 
   189    525.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    525.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.5 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.5 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.5 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.5 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.7 MiB     10.2 MiB           1           disp.start_video_stream()
   199    544.0 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    544.0 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    544.0 MiB      0.0 MiB           1           t_interval = 5
   205    544.0 MiB      0.0 MiB           1           t_avg = 0
   206    544.0 MiB      0.0 MiB           1           t_print = time.time()
   207    544.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209    544.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    544.0 MiB      0.0 MiB           1           while True:
   212    555.9 MiB      0.0 MiB         905               t_start = time.time()
   213                                         
   214    555.9 MiB      1.2 MiB         905               disp.update_stream()
   215    555.9 MiB     10.8 MiB         905               disp.update_projector()
   216                                         
   217    555.9 MiB      0.0 MiB         905               t_end = time.time()
   218                                                     
   219    555.9 MiB      0.0 MiB         905               i += 1
   220    555.9 MiB      0.0 MiB         905               t_avg += t_end - t_start
   221                                         
   222    555.9 MiB      0.0 MiB         905               if t_end - t_print > t_interval:
   223    555.9 MiB      0.0 MiB          10                   print(f"Average processing time: {t_avg / i}")
   224    555.9 MiB      0.0 MiB          10                   i = 0
   225    555.9 MiB      0.0 MiB          10                   t_print = time.time()
   226    555.9 MiB      0.0 MiB          10                   t_avg = 0
   227                                                             
   228    555.9 MiB      0.0 MiB         905               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    555.9 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    555.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    555.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    555.3 MiB     -0.6 MiB           1                   disp.end_stream()
   233    541.6 MiB    -13.7 MiB           1                   disp.stop_projector()
   234    541.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    541.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    541.8 MiB      0.3 MiB           1                   cam_process.join() # Wrap up recording process
   237    541.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    541.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    541.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    541.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    541.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243    541.8 MiB      0.0 MiB           1                   break
   244                                             
   245    541.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    511.8 MiB    511.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    511.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    511.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    511.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    511.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    511.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    511.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    511.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    511.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    511.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    545.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    528.2 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    528.2 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    528.2 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    528.2 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    528.2 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    528.2 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    528.2 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    528.2 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    528.2 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    528.2 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    528.2 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    528.2 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    528.2 MiB      0.0 MiB           1                                                           vidName, 
   188    528.2 MiB      0.0 MiB           1                                                           csvName, 
   189    528.2 MiB      0.0 MiB           1                                                           spec_dict), 
   190    528.2 MiB      0.0 MiB           1                                                   daemon=False)
   191    528.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    528.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    528.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    528.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    528.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    539.2 MiB     10.9 MiB           1           disp.start_video_stream()
   199    547.4 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    547.4 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    547.4 MiB      0.0 MiB           1           t_interval = 5
   205    547.4 MiB      0.0 MiB           1           t_avg = 0
   206    547.4 MiB      0.0 MiB           1           t_print = time.time()
   207    547.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209    547.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    547.4 MiB      0.0 MiB           1           while True:
   212    559.5 MiB      0.0 MiB       36252               t_start = time.time()
   213                                         
   214    559.5 MiB      0.9 MiB       36252               disp.update_stream()
   215    559.5 MiB     11.0 MiB       36252               disp.update_projector()
   216                                         
   217    559.5 MiB      0.0 MiB       36252               t_end = time.time()
   218                                                     
   219    559.5 MiB      0.2 MiB       36252               i += 1
   220    559.5 MiB      0.0 MiB       36252               t_avg += t_end - t_start
   221                                         
   222    559.5 MiB      0.0 MiB       36252               if t_end - t_print > t_interval:
   223    559.5 MiB      0.0 MiB         380                   print(f"Average processing time: {t_avg / i}")
   224    559.5 MiB      0.0 MiB         380                   i = 0
   225    559.5 MiB      0.0 MiB         380                   t_print = time.time()
   226    559.5 MiB      0.0 MiB         380                   t_avg = 0
   227                                                             
   228    559.5 MiB      0.0 MiB       36252               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    559.5 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    559.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    559.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    559.0 MiB     -0.6 MiB           1                   disp.end_stream()
   233    545.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    545.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    545.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    545.6 MiB      0.4 MiB           1                   cam_process.join() # Wrap up recording process
   237    545.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    545.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    545.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    545.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    545.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243    545.6 MiB      0.0 MiB           1                   break
   244                                             
   245    545.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    518.2 MiB    518.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    518.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    518.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    518.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    518.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    518.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    518.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    518.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    518.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    518.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3803.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    534.6 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    534.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    534.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    534.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    534.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    534.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    534.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    534.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    534.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    534.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    534.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    534.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    534.6 MiB      0.0 MiB           1                                                           vidName, 
   188    534.6 MiB      0.0 MiB           1                                                           csvName, 
   189    534.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    534.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    534.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    534.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    534.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.0 MiB     10.4 MiB           1           disp.start_video_stream()
   199    553.4 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    553.4 MiB      0.0 MiB           1           if online:
   202   3822.1 MiB   3268.8 MiB           1               disp.init_online_processing()
   203                                         
   204   3822.1 MiB      0.0 MiB           1           t_interval = 5
   205   3822.1 MiB      0.0 MiB           1           t_avg = 0
   206   3822.1 MiB      0.0 MiB           1           t_print = time.time()
   207   3822.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3822.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3822.1 MiB      0.0 MiB           1           while True:
   212   3833.3 MiB -102620.1 MiB       13667               t_start = time.time()
   213                                         
   214   3833.3 MiB -102609.3 MiB       13667               disp.update_stream()
   215   3833.3 MiB -102635.4 MiB       13667               disp.update_projector()
   216                                         
   217   3833.3 MiB -102635.9 MiB       13667               t_end = time.time()
   218                                                     
   219   3833.3 MiB -102635.9 MiB       13667               i += 1
   220   3833.3 MiB -102635.9 MiB       13667               t_avg += t_end - t_start
   221                                         
   222   3833.3 MiB -102635.9 MiB       13667               if t_end - t_print > t_interval:
   223   3833.3 MiB  -1851.4 MiB         238                   print(f"Average processing time: {t_avg / i}")
   224   3833.3 MiB  -1851.4 MiB         238                   i = 0
   225   3833.3 MiB  -1851.4 MiB         238                   t_print = time.time()
   226   3833.3 MiB  -1851.4 MiB         238                   t_avg = 0
   227                                                             
   228   3833.3 MiB -102635.9 MiB       13667               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3817.5 MiB    -15.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3817.5 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3817.5 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3816.9 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3803.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3803.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3803.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3803.1 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3803.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3803.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3803.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3803.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3803.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3803.1 MiB      0.0 MiB           1                   break
   244                                             
   245   3803.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.6 MiB    522.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3800.8 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    539.1 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    539.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    539.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    539.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    539.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    539.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    539.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    539.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    539.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    539.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    539.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    539.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    539.1 MiB      0.0 MiB           1                                                           vidName, 
   188    539.1 MiB      0.0 MiB           1                                                           csvName, 
   189    539.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    539.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    539.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    539.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    539.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    539.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    539.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    550.3 MiB     11.1 MiB           1           disp.start_video_stream()
   199    558.6 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    558.6 MiB      0.0 MiB           1           if online:
   202   3819.6 MiB   3261.0 MiB           1               disp.init_online_processing()
   203                                         
   204   3819.6 MiB      0.0 MiB           1           t_interval = 5
   205   3819.6 MiB      0.0 MiB           1           t_avg = 0
   206   3819.6 MiB      0.0 MiB           1           t_print = time.time()
   207   3819.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3819.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3819.6 MiB      0.0 MiB           1           while True:
   212   3830.0 MiB -365493.4 MiB       25015               t_start = time.time()
   213                                         
   214   3830.0 MiB -365482.6 MiB       25015               disp.update_stream()
   215   3830.0 MiB -365508.0 MiB       25015               disp.update_projector()
   216                                         
   217   3830.0 MiB -365508.1 MiB       25015               t_end = time.time()
   218                                                     
   219   3830.0 MiB -365508.1 MiB       25015               i += 1
   220   3830.0 MiB -365508.1 MiB       25015               t_avg += t_end - t_start
   221                                         
   222   3830.0 MiB -365508.1 MiB       25015               if t_end - t_print > t_interval:
   223   3829.9 MiB  -4953.4 MiB         333                   print(f"Average processing time: {t_avg / i}")
   224   3829.9 MiB  -4926.6 MiB         333                   i = 0
   225   3829.9 MiB  -4926.6 MiB         333                   t_print = time.time()
   226   3829.9 MiB  -4926.6 MiB         333                   t_avg = 0
   227                                                             
   228   3830.0 MiB -365481.3 MiB       25015               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3815.3 MiB    -14.7 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3815.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3815.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3814.6 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3800.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3800.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3800.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3800.8 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3800.8 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3800.8 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3800.8 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3800.8 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3800.8 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3800.8 MiB      0.0 MiB           1                   break
   244                                             
   245   3800.8 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    512.8 MiB    512.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    512.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    512.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    512.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    512.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    512.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    512.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    512.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    512.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    512.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3758.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    529.3 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    529.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    529.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    529.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    529.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    529.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    529.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    529.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    529.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    529.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    529.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    529.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    529.3 MiB      0.0 MiB           1                                                           vidName, 
   188    529.3 MiB      0.0 MiB           1                                                           csvName, 
   189    529.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    529.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    529.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    529.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    529.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    529.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    529.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    539.7 MiB     10.4 MiB           1           disp.start_video_stream()
   199    547.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    547.9 MiB      0.0 MiB           1           if online:
   202   3776.8 MiB   3228.8 MiB           1               disp.init_online_processing()
   203                                         
   204   3776.8 MiB      0.0 MiB           1           t_interval = 5
   205   3776.8 MiB      0.0 MiB           1           t_avg = 0
   206   3776.8 MiB      0.0 MiB           1           t_print = time.time()
   207   3776.8 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3776.8 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3776.8 MiB      0.0 MiB           1           while True:
   212   3788.8 MiB -64878.0 MiB        5541               t_start = time.time()
   213                                         
   214   3788.8 MiB -64866.8 MiB        5541               disp.update_stream()
   215   3788.8 MiB -64892.9 MiB        5541               disp.update_projector()
   216                                         
   217   3788.8 MiB -64893.7 MiB        5541               t_end = time.time()
   218                                                     
   219   3788.8 MiB -64893.7 MiB        5541               i += 1
   220   3788.8 MiB -64893.7 MiB        5541               t_avg += t_end - t_start
   221                                         
   222   3788.8 MiB -64893.7 MiB        5541               if t_end - t_print > t_interval:
   223   3788.8 MiB  -1432.7 MiB         111                   print(f"Average processing time: {t_avg / i}")
   224   3788.8 MiB  -1432.7 MiB         111                   i = 0
   225   3788.8 MiB  -1432.7 MiB         111                   t_print = time.time()
   226   3788.8 MiB  -1432.7 MiB         111                   t_avg = 0
   227                                                             
   228   3788.8 MiB -64893.7 MiB        5541               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3773.1 MiB    -15.7 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3773.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3773.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3772.4 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3758.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3758.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3758.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3758.6 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3758.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3758.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3758.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3758.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3758.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3758.6 MiB      0.0 MiB           1                   break
   244                                             
   245   3758.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    509.5 MiB    509.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    509.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    509.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    509.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    509.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    509.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    509.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    509.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    509.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    509.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166    547.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    525.8 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    525.8 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    525.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    525.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    525.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    525.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    525.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    525.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    525.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    525.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    525.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    525.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    525.8 MiB      0.0 MiB           1                                                           vidName, 
   188    525.8 MiB      0.0 MiB           1                                                           csvName, 
   189    525.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    525.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    536.6 MiB     10.7 MiB           1           disp.start_video_stream()
   199    544.9 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    544.9 MiB      0.0 MiB           1           if online:
   202                                                     disp.init_online_processing()
   203                                         
   204    544.9 MiB      0.0 MiB           1           t_interval = 5
   205    544.9 MiB      0.0 MiB           1           t_avg = 0
   206    544.9 MiB      0.0 MiB           1           t_print = time.time()
   207    544.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209    544.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211    544.9 MiB      0.0 MiB           1           while True:
   212    562.2 MiB  -1431.2 MiB        5893               t_start = time.time()
   213                                         
   214    562.2 MiB  -1430.2 MiB        5893               disp.update_stream()
   215    562.2 MiB  -1416.2 MiB        5893               disp.update_projector()
   216                                         
   217    562.2 MiB  -1431.4 MiB        5893               t_end = time.time()
   218                                                     
   219    562.2 MiB  -1431.8 MiB        5893               i += 1
   220    562.2 MiB  -1431.8 MiB        5893               t_avg += t_end - t_start
   221                                         
   222    562.2 MiB  -1431.8 MiB        5893               if t_end - t_print > t_interval:
   223    562.2 MiB    -20.0 MiB          59                   print(f"Average processing time: {t_avg / i}")
   224    562.2 MiB    -20.0 MiB          59                   i = 0
   225    562.2 MiB    -20.0 MiB          59                   t_print = time.time()
   226    562.2 MiB    -20.0 MiB          59                   t_avg = 0
   227                                                             
   228    562.2 MiB  -1431.8 MiB        5893               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229    561.6 MiB     -0.6 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230    561.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231    561.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232    560.8 MiB     -0.8 MiB           1                   disp.end_stream()
   233    547.0 MiB    -13.8 MiB           1                   disp.stop_projector()
   234    547.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235    547.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236    547.4 MiB      0.4 MiB           1                   cam_process.join() # Wrap up recording process
   237    547.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239    547.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240    547.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241    547.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242    547.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243    547.4 MiB      0.0 MiB           1                   break
   244                                             
   245    547.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    513.4 MiB    513.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    513.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    513.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    513.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    513.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    513.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    513.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    513.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    513.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    513.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3743.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    529.9 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    529.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    529.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    529.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    529.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    529.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    529.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    529.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    529.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    529.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    529.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    529.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    529.9 MiB      0.0 MiB           1                                                           vidName, 
   188    529.9 MiB      0.0 MiB           1                                                           csvName, 
   189    529.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    529.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    529.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    529.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    529.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    529.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    529.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    540.8 MiB     10.8 MiB           1           disp.start_video_stream()
   199    549.1 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    549.1 MiB      0.0 MiB           1           if online:
   202   3747.6 MiB   3198.5 MiB           1               disp.init_online_processing()
   203                                         
   204   3747.6 MiB      0.0 MiB           1           t_interval = 5
   205   3747.6 MiB      0.0 MiB           1           t_avg = 0
   206   3747.6 MiB      0.0 MiB           1           t_print = time.time()
   207   3747.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3747.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3747.6 MiB      0.0 MiB           1           while True:
   212   3758.1 MiB      0.0 MiB        1057               t_start = time.time()
   213                                         
   214   3758.1 MiB     10.5 MiB        1057               disp.update_stream()
   215   3758.1 MiB      0.0 MiB        1057               disp.update_projector()
   216                                         
   217   3758.1 MiB      0.0 MiB        1057               t_end = time.time()
   218                                                     
   219   3758.1 MiB      0.0 MiB        1057               i += 1
   220   3758.1 MiB      0.0 MiB        1057               t_avg += t_end - t_start
   221                                         
   222   3758.1 MiB      0.0 MiB        1057               if t_end - t_print > t_interval:
   223   3758.1 MiB      0.0 MiB           7                   print(f"Average processing time: {t_avg / i}")
   224   3758.1 MiB      0.0 MiB           7                   i = 0
   225   3758.1 MiB      0.0 MiB           7                   t_print = time.time()
   226   3758.1 MiB      0.0 MiB           7                   t_avg = 0
   227                                                             
   228   3758.1 MiB      0.0 MiB        1057               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3758.1 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3758.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3758.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3757.3 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3743.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3743.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3743.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3743.7 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237   3743.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3743.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    506.4 MiB    506.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    506.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    506.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    506.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    506.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    506.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    506.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    506.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    506.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    506.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3792.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    523.0 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    523.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    523.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    523.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    523.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    523.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    523.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    523.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    523.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    523.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    523.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    523.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    523.0 MiB      0.0 MiB           1                                                           vidName, 
   188    523.0 MiB      0.0 MiB           1                                                           csvName, 
   189    523.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    523.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    523.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    523.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    523.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    523.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    523.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    533.4 MiB     10.4 MiB           1           disp.start_video_stream()
   199    541.5 MiB      8.1 MiB           1           disp.start_projector()
   200                                         
   201    541.5 MiB      0.0 MiB           1           if online:
   202   3796.9 MiB   3255.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3796.9 MiB      0.0 MiB           1           t_interval = 5
   205   3796.9 MiB      0.0 MiB           1           t_avg = 0
   206   3796.9 MiB      0.0 MiB           1           t_print = time.time()
   207   3796.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3796.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3796.9 MiB      0.0 MiB           1           while True:
   212   3806.7 MiB      0.0 MiB         575               t_start = time.time()
   213                                         
   214   3806.7 MiB      9.6 MiB         575               disp.update_stream()
   215   3806.7 MiB      0.3 MiB         575               disp.update_projector()
   216                                         
   217   3806.7 MiB      0.0 MiB         575               t_end = time.time()
   218                                                     
   219   3806.7 MiB      0.0 MiB         575               i += 1
   220   3806.7 MiB      0.0 MiB         575               t_avg += t_end - t_start
   221                                         
   222   3806.7 MiB      0.0 MiB         575               if t_end - t_print > t_interval:
   223   3806.7 MiB      0.0 MiB           6                   print(f"Average processing time: {t_avg / i}")
   224   3806.7 MiB      0.0 MiB           6                   i = 0
   225   3806.7 MiB      0.0 MiB           6                   t_print = time.time()
   226   3806.7 MiB      0.0 MiB           6                   t_avg = 0
   227                                                             
   228   3806.7 MiB      0.0 MiB         575               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3806.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3806.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3806.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3805.9 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3792.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3792.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3792.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3792.2 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3792.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3792.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3792.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3792.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3792.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3792.2 MiB      0.0 MiB           1                   break
   244                                             
   245   3792.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    519.2 MiB    519.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    519.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    519.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    519.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    519.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    519.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    519.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    519.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    519.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    519.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3797.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.6 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.6 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.6 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.6 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.6 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.6 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.6 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.6 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.6 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.6 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.6 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.6 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.6 MiB      0.0 MiB           1                                                           vidName, 
   188    535.6 MiB      0.0 MiB           1                                                           csvName, 
   189    535.6 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.6 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    546.1 MiB     10.5 MiB           1           disp.start_video_stream()
   199    554.5 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    554.5 MiB      0.0 MiB           1           if online:
   202   3800.7 MiB   3246.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3800.7 MiB      0.0 MiB           1           t_interval = 5
   205   3800.7 MiB      0.0 MiB           1           t_avg = 0
   206   3800.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3800.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3800.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3800.7 MiB      0.0 MiB           1           while True:
   212   3811.7 MiB      0.0 MiB         594               t_start = time.time()
   213                                         
   214   3811.7 MiB     10.6 MiB         594               disp.update_stream()
   215   3811.7 MiB      0.3 MiB         594               disp.update_projector()
   216                                         
   217   3811.7 MiB      0.0 MiB         594               t_end = time.time()
   218                                                     
   219   3811.7 MiB      0.0 MiB         594               i += 1
   220   3811.7 MiB      0.0 MiB         594               t_avg += t_end - t_start
   221                                         
   222   3811.7 MiB      0.0 MiB         594               if t_end - t_print > t_interval:
   223   3811.7 MiB      0.0 MiB           7                   print(f"Average processing time: {t_avg / i}")
   224   3811.7 MiB      0.0 MiB           7                   i = 0
   225   3811.7 MiB      0.0 MiB           7                   t_print = time.time()
   226   3811.7 MiB      0.0 MiB           7                   t_avg = 0
   227                                                             
   228   3811.7 MiB      0.0 MiB         594               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3811.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3811.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3811.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3811.0 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3797.3 MiB    -13.7 MiB           1                   disp.stop_projector()
   234   3797.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3797.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3797.3 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3797.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3797.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3797.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3797.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3797.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3797.3 MiB      0.0 MiB           1                   break
   244                                             
   245   3797.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.6 MiB    521.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3810.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.0 MiB      0.0 MiB           1                                                           vidName, 
   188    538.0 MiB      0.0 MiB           1                                                           csvName, 
   189    538.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.5 MiB     10.4 MiB           1           disp.start_video_stream()
   199    556.8 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    556.8 MiB      0.0 MiB           1           if online:
   202   3812.4 MiB   3255.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3812.4 MiB      0.0 MiB           1           t_interval = 5
   205   3812.4 MiB      0.0 MiB           1           t_avg = 0
   206   3812.4 MiB      0.0 MiB           1           t_print = time.time()
   207   3812.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3812.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3812.4 MiB      0.0 MiB           1           while True:
   212   3824.7 MiB      0.0 MiB         457               t_start = time.time()
   213                                         
   214   3824.7 MiB     11.6 MiB         457               disp.update_stream()
   215   3824.7 MiB      0.7 MiB         457               disp.update_projector()
   216                                         
   217   3824.7 MiB      0.0 MiB         457               t_end = time.time()
   218                                                     
   219   3824.7 MiB      0.0 MiB         457               i += 1
   220   3824.7 MiB      0.0 MiB         457               t_avg += t_end - t_start
   221                                         
   222   3824.7 MiB      0.0 MiB         457               if t_end - t_print > t_interval:
   223   3824.7 MiB      0.0 MiB           4                   print(f"Average processing time: {t_avg / i}")
   224   3824.7 MiB      0.0 MiB           4                   i = 0
   225   3824.7 MiB      0.0 MiB           4                   t_print = time.time()
   226   3824.7 MiB      0.0 MiB           4                   t_avg = 0
   227                                                             
   228   3824.7 MiB      0.0 MiB         457               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3824.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3824.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3824.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3823.9 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3810.1 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3810.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3810.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3810.1 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3810.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3810.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3810.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3810.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3810.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3810.1 MiB      0.0 MiB           1                   break
   244                                             
   245   3810.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.0 MiB    522.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.0 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.0 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3791.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.5 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.5 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.5 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.5 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.5 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.5 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.5 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.5 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.5 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.5 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.5 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.5 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.5 MiB      0.0 MiB           1                                                           vidName, 
   188    538.5 MiB      0.0 MiB           1                                                           csvName, 
   189    538.5 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.5 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.6 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.6 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.6 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.6 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.6 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.7 MiB     11.1 MiB           1           disp.start_video_stream()
   199    557.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    557.9 MiB      0.0 MiB           1           if online:
   202   3796.1 MiB   3238.2 MiB           1               disp.init_online_processing()
   203                                         
   204   3796.1 MiB      0.0 MiB           1           t_interval = 5
   205   3796.1 MiB      0.0 MiB           1           t_avg = 0
   206   3796.1 MiB      0.0 MiB           1           t_print = time.time()
   207   3796.1 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3796.1 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3796.1 MiB      0.0 MiB           1           while True:
   212   3806.3 MiB      0.0 MiB         439               t_start = time.time()
   213                                         
   214   3806.3 MiB      9.8 MiB         439               disp.update_stream()
   215   3806.3 MiB      0.4 MiB         439               disp.update_projector()
   216                                         
   217   3806.3 MiB      0.0 MiB         439               t_end = time.time()
   218                                                     
   219   3806.3 MiB      0.0 MiB         439               i += 1
   220   3806.3 MiB      0.0 MiB         439               t_avg += t_end - t_start
   221                                         
   222   3806.3 MiB      0.0 MiB         439               if t_end - t_print > t_interval:
   223   3806.3 MiB      0.0 MiB           5                   print(f"Average processing time: {t_avg / i}")
   224   3806.3 MiB      0.0 MiB           5                   i = 0
   225   3806.3 MiB      0.0 MiB           5                   t_print = time.time()
   226   3806.3 MiB      0.0 MiB           5                   t_avg = 0
   227                                                             
   228   3806.3 MiB      0.0 MiB         439               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3806.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3806.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3806.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3805.6 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3791.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3791.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3791.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3791.9 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3791.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3791.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3791.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3791.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3791.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3791.9 MiB      0.0 MiB           1                   break
   244                                             
   245   3791.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.3 MiB    522.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3832.1 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.7 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.7 MiB      0.0 MiB           1                                                           vidName, 
   188    538.7 MiB      0.0 MiB           1                                                           csvName, 
   189    538.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.6 MiB     10.8 MiB           1           disp.start_video_stream()
   199    558.0 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    558.0 MiB      0.0 MiB           1           if online:
   202   3835.6 MiB   3277.6 MiB           1               disp.init_online_processing()
   203                                         
   204   3835.6 MiB      0.0 MiB           1           t_interval = 5
   205   3835.6 MiB      0.0 MiB           1           t_avg = 0
   206   3835.6 MiB      0.0 MiB           1           t_print = time.time()
   207   3835.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3835.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3835.6 MiB      0.0 MiB           1           while True:
   212   3846.6 MiB      0.0 MiB         446               t_start = time.time()
   213                                         
   214   3846.6 MiB     10.6 MiB         446               disp.update_stream()
   215   3846.6 MiB      0.4 MiB         446               disp.update_projector()
   216                                         
   217   3846.6 MiB      0.0 MiB         446               t_end = time.time()
   218                                                     
   219   3846.6 MiB      0.0 MiB         446               i += 1
   220   3846.6 MiB      0.0 MiB         446               t_avg += t_end - t_start
   221                                         
   222   3846.6 MiB      0.0 MiB         446               if t_end - t_print > t_interval:
   223   3846.6 MiB      0.0 MiB           6                   print(f"Average processing time: {t_avg / i}")
   224   3846.6 MiB      0.0 MiB           6                   i = 0
   225   3846.6 MiB      0.0 MiB           6                   t_print = time.time()
   226   3846.6 MiB      0.0 MiB           6                   t_avg = 0
   227                                                             
   228   3846.6 MiB      0.0 MiB         446               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3846.6 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3846.6 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3846.6 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3845.8 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3832.1 MiB    -13.7 MiB           1                   disp.stop_projector()
   234   3832.1 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3832.1 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3832.1 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3832.1 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3832.1 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3832.1 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3832.1 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3832.1 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3832.1 MiB      0.0 MiB           1                   break
   244                                             
   245   3832.1 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.8 MiB    521.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3802.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.1 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.1 MiB      0.0 MiB           1                                                           vidName, 
   188    538.1 MiB      0.0 MiB           1                                                           csvName, 
   189    538.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.2 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.2 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.2 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.2 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.2 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.6 MiB     10.5 MiB           1           disp.start_video_stream()
   199    557.0 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    557.0 MiB      0.0 MiB           1           if online:
   202   3806.7 MiB   3249.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3806.7 MiB      0.0 MiB           1           t_interval = 5
   205   3806.7 MiB      0.0 MiB           1           t_avg = 0
   206   3806.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3806.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3806.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3806.7 MiB      0.0 MiB           1           while True:
   212   3816.7 MiB      0.0 MiB         730               t_start = time.time()
   213                                         
   214   3816.7 MiB      9.7 MiB         730               disp.update_stream()
   215   3816.7 MiB      0.4 MiB         730               disp.update_projector()
   216                                         
   217   3816.7 MiB      0.0 MiB         730               t_end = time.time()
   218                                                     
   219   3816.7 MiB      0.0 MiB         730               i += 1
   220   3816.7 MiB      0.0 MiB         730               t_avg += t_end - t_start
   221                                         
   222   3816.7 MiB      0.0 MiB         730               if t_end - t_print > t_interval:
   223   3816.7 MiB      0.0 MiB           8                   print(f"Average processing time: {t_avg / i}")
   224   3816.7 MiB      0.0 MiB           8                   i = 0
   225   3816.7 MiB      0.0 MiB           8                   t_print = time.time()
   226   3816.7 MiB      0.0 MiB           8                   t_avg = 0
   227                                                             
   228   3816.7 MiB      0.0 MiB         730               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3816.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3816.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3816.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3816.1 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3802.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3802.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3802.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3802.4 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3802.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3802.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3802.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3802.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3802.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3802.4 MiB      0.0 MiB           1                   break
   244                                             
   245   3802.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.3 MiB    522.3 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.3 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.3 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.3 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.3 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.3 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.3 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.3 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.3 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.3 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3818.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.8 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.8 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.8 MiB      0.0 MiB           1                                                           vidName, 
   188    538.8 MiB      0.0 MiB           1                                                           csvName, 
   189    538.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.8 MiB     11.0 MiB           1           disp.start_video_stream()
   199    558.0 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    558.0 MiB      0.0 MiB           1           if online:
   202   3821.6 MiB   3263.6 MiB           1               disp.init_online_processing()
   203                                         
   204   3821.6 MiB      0.0 MiB           1           t_interval = 5
   205   3821.6 MiB      0.0 MiB           1           t_avg = 0
   206   3821.6 MiB      0.0 MiB           1           t_print = time.time()
   207   3821.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3821.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3821.6 MiB      0.0 MiB           1           while True:
   212   3832.8 MiB      0.0 MiB         455               t_start = time.time()
   213                                         
   214   3832.8 MiB     10.9 MiB         455               disp.update_stream()
   215   3832.8 MiB      0.3 MiB         455               disp.update_projector()
   216                                         
   217   3832.8 MiB      0.0 MiB         455               t_end = time.time()
   218                                                     
   219   3832.8 MiB      0.0 MiB         455               i += 1
   220   3832.8 MiB      0.0 MiB         455               t_avg += t_end - t_start
   221                                         
   222   3832.8 MiB      0.0 MiB         455               if t_end - t_print > t_interval:
   223   3832.8 MiB      0.0 MiB           5                   print(f"Average processing time: {t_avg / i}")
   224   3832.8 MiB      0.0 MiB           5                   i = 0
   225   3832.8 MiB      0.0 MiB           5                   t_print = time.time()
   226   3832.8 MiB      0.0 MiB           5                   t_avg = 0
   227                                                             
   228   3832.8 MiB      0.0 MiB         455               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3832.8 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3832.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3832.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3832.1 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3818.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3818.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3818.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3818.5 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3818.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3818.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3818.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3818.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3818.5 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3818.5 MiB      0.0 MiB           1                   break
   244                                             
   245   3818.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.6 MiB    521.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3779.3 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.0 MiB      0.0 MiB           1                                                           vidName, 
   188    538.0 MiB      0.0 MiB           1                                                           csvName, 
   189    538.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.6 MiB     10.7 MiB           1           disp.start_video_stream()
   199    556.9 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    556.9 MiB      0.0 MiB           1           if online:
   202   3799.0 MiB   3242.0 MiB           1               disp.init_online_processing()
   203                                         
   204   3799.0 MiB      0.0 MiB           1           t_interval = 5
   205   3799.0 MiB      0.0 MiB           1           t_avg = 0
   206   3799.0 MiB      0.0 MiB           1           t_print = time.time()
   207   3799.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3799.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3799.0 MiB      0.0 MiB           1           while True:
   212   3809.6 MiB -20215.0 MiB        1956               t_start = time.time()
   213                                         
   214   3809.6 MiB -20204.8 MiB        1956               disp.update_stream()
   215   3809.6 MiB -20230.4 MiB        1956               disp.update_projector()
   216                                         
   217   3809.6 MiB -20230.8 MiB        1956               t_end = time.time()
   218                                                     
   219   3809.6 MiB -20230.8 MiB        1956               i += 1
   220   3809.6 MiB -20230.8 MiB        1956               t_avg += t_end - t_start
   221                                         
   222   3809.6 MiB -20230.8 MiB        1956               if t_end - t_print > t_interval:
   223   3809.6 MiB   -268.5 MiB          24                   print(f"Average processing time: {t_avg / i}")
   224   3809.6 MiB   -268.5 MiB          24                   i = 0
   225   3809.6 MiB   -268.5 MiB          24                   t_print = time.time()
   226   3809.6 MiB   -268.5 MiB          24                   t_avg = 0
   227                                                             
   228   3809.6 MiB -20230.8 MiB        1956               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3793.8 MiB    -15.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3793.8 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3793.8 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3793.0 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3779.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3779.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3779.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3779.3 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3779.3 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3779.3 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3779.3 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3779.3 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3779.3 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3779.3 MiB      0.0 MiB           1                   break
   244                                             
   245   3779.3 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.6 MiB    521.6 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.6 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.6 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.6 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.6 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.6 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.6 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.6 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.6 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.6 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3798.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    537.9 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    537.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    537.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    537.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    537.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    537.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    537.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    537.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    537.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    537.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    537.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    537.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    537.9 MiB      0.0 MiB           1                                                           vidName, 
   188    537.9 MiB      0.0 MiB           1                                                           csvName, 
   189    537.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    537.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    537.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    537.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    537.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    537.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    537.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.4 MiB     10.5 MiB           1           disp.start_video_stream()
   199    556.8 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    556.8 MiB      0.0 MiB           1           if online:
   202   3801.9 MiB   3245.1 MiB           1               disp.init_online_processing()
   203                                         
   204   3801.9 MiB      0.0 MiB           1           t_interval = 5
   205   3801.9 MiB      0.0 MiB           1           t_avg = 0
   206   3801.9 MiB      0.0 MiB           1           t_print = time.time()
   207   3801.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3801.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3801.9 MiB      0.0 MiB           1           while True:
   212   3813.3 MiB      0.0 MiB         370               t_start = time.time()
   213                                         
   214   3813.3 MiB     11.1 MiB         370               disp.update_stream()
   215   3813.3 MiB      0.4 MiB         370               disp.update_projector()
   216                                         
   217   3813.3 MiB      0.0 MiB         370               t_end = time.time()
   218                                                     
   219   3813.3 MiB      0.0 MiB         370               i += 1
   220   3813.3 MiB      0.0 MiB         370               t_avg += t_end - t_start
   221                                         
   222   3813.3 MiB      0.0 MiB         370               if t_end - t_print > t_interval:
   223   3813.3 MiB      0.0 MiB           4                   print(f"Average processing time: {t_avg / i}")
   224   3813.3 MiB      0.0 MiB           4                   i = 0
   225   3813.3 MiB      0.0 MiB           4                   t_print = time.time()
   226   3813.3 MiB      0.0 MiB           4                   t_avg = 0
   227                                                             
   228   3813.3 MiB      0.0 MiB         370               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3813.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3813.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3813.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3812.6 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3798.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3798.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3798.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3798.9 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3798.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3798.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.9 MiB    521.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3787.5 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.3 MiB      0.0 MiB           1                                                           vidName, 
   188    538.3 MiB      0.0 MiB           1                                                           csvName, 
   189    538.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.2 MiB     10.8 MiB           1           disp.start_video_stream()
   199    557.4 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    557.4 MiB      0.0 MiB           1           if online:
   202   3806.2 MiB   3248.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3806.2 MiB      0.0 MiB           1           t_interval = 5
   205   3806.2 MiB      0.0 MiB           1           t_avg = 0
   206   3806.2 MiB      0.0 MiB           1           t_print = time.time()
   207   3806.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3806.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3806.2 MiB      0.0 MiB           1           while True:
   212   3817.8 MiB -23513.2 MiB        3292               t_start = time.time()
   213                                         
   214   3817.8 MiB -23502.1 MiB        3292               disp.update_stream()
   215   3817.8 MiB -23528.4 MiB        3292               disp.update_projector()
   216                                         
   217   3817.8 MiB -23529.0 MiB        3292               t_end = time.time()
   218                                                     
   219   3817.8 MiB -23529.0 MiB        3292               i += 1
   220   3817.8 MiB -23529.0 MiB        3292               t_avg += t_end - t_start
   221                                         
   222   3817.8 MiB -23529.0 MiB        3292               if t_end - t_print > t_interval:
   223   3817.8 MiB   -411.1 MiB          48                   print(f"Average processing time: {t_avg / i}")
   224   3817.8 MiB   -411.1 MiB          48                   i = 0
   225   3817.8 MiB   -411.1 MiB          48                   t_print = time.time()
   226   3817.8 MiB   -411.1 MiB          48                   t_avg = 0
   227                                                             
   228   3817.8 MiB -23529.0 MiB        3292               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3802.0 MiB    -15.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3802.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3802.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3801.3 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3787.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3787.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3787.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3787.5 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3787.5 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3787.5 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3787.5 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3787.5 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3787.5 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3787.5 MiB      0.0 MiB           1                   break
   244                                             
   245   3787.5 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    518.9 MiB    518.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    518.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    518.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    518.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    518.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    518.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    518.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    518.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    518.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    518.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3801.7 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.3 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.3 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.3 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.3 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.3 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.3 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.3 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.3 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.3 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.3 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.3 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.3 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.3 MiB      0.0 MiB           1                                                           vidName, 
   188    535.3 MiB      0.0 MiB           1                                                           csvName, 
   189    535.3 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.3 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.3 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.3 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.3 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.3 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.3 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.9 MiB     10.6 MiB           1           disp.start_video_stream()
   199    554.3 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    554.3 MiB      0.0 MiB           1           if online:
   202   3820.0 MiB   3265.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3820.0 MiB      0.0 MiB           1           t_interval = 5
   205   3820.0 MiB      0.0 MiB           1           t_avg = 0
   206   3820.0 MiB      0.0 MiB           1           t_print = time.time()
   207   3820.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3820.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3820.0 MiB      0.0 MiB           1           while True:
   212   3832.0 MiB -53596.6 MiB        8402               t_start = time.time()
   213                                         
   214   3832.0 MiB -53586.5 MiB        8402               disp.update_stream()
   215   3832.0 MiB -53610.6 MiB        8402               disp.update_projector()
   216                                         
   217   3832.0 MiB -53612.4 MiB        8402               t_end = time.time()
   218                                                     
   219   3832.0 MiB -53612.4 MiB        8402               i += 1
   220   3832.0 MiB -53612.4 MiB        8402               t_avg += t_end - t_start
   221                                         
   222   3832.0 MiB -53612.4 MiB        8402               if t_end - t_print > t_interval:
   223   3832.0 MiB   -996.9 MiB         147                   print(f"Average processing time: {t_avg / i}")
   224   3832.0 MiB   -996.9 MiB         147                   i = 0
   225   3832.0 MiB   -996.9 MiB         147                   t_print = time.time()
   226   3832.0 MiB   -996.9 MiB         147                   t_avg = 0
   227                                                             
   228   3832.0 MiB -53612.4 MiB        8402               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3816.2 MiB    -15.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3816.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3816.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3815.3 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3801.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3801.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3801.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3801.7 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3801.7 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3801.7 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3801.7 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3801.7 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3801.7 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3801.7 MiB      0.0 MiB           1                   break
   244                                             
   245   3801.7 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    521.7 MiB    521.7 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    521.7 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    521.7 MiB      0.0 MiB           1       faulthandler.enable()
   152    521.7 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    521.7 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    521.7 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    521.7 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    521.7 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    521.7 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    521.7 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3885.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.0 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.0 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.0 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.0 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.0 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.0 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.0 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.0 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.0 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.0 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.0 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.0 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.0 MiB      0.0 MiB           1                                                           vidName, 
   188    538.0 MiB      0.0 MiB           1                                                           csvName, 
   189    538.0 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.0 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.0 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.0 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.0 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    548.5 MiB     10.4 MiB           1           disp.start_video_stream()
   199    556.9 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    556.9 MiB      0.0 MiB           1           if online:
   202   3903.2 MiB   3346.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3903.2 MiB      0.0 MiB           1           t_interval = 5
   205   3903.2 MiB      0.0 MiB           1           t_avg = 0
   206   3903.2 MiB      0.0 MiB           1           t_print = time.time()
   207   3903.2 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3903.2 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3903.2 MiB      0.0 MiB           1           while True:
   212   3913.7 MiB -1043876.4 MiB       72299               t_start = time.time()
   213                                         
   214   3913.7 MiB -1043865.7 MiB       72299               disp.update_stream()
   215   3913.7 MiB -1043890.2 MiB       72299               disp.update_projector()
   216                                         
   217   3913.7 MiB -1043890.2 MiB       72299               t_end = time.time()
   218                                                     
   219   3913.7 MiB -1043890.2 MiB       72299               i += 1
   220   3913.7 MiB -1043890.2 MiB       72299               t_avg += t_end - t_start
   221                                         
   222   3913.7 MiB -1043890.2 MiB       72299               if t_end - t_print > t_interval:
   223   3899.8 MiB -17977.9 MiB        1244                   print(f"Average processing time: {t_avg / i}")
   224   3899.8 MiB    -48.7 MiB        1244                   i = 0
   225   3899.8 MiB    -48.7 MiB        1244                   t_print = time.time()
   226   3899.8 MiB    -48.7 MiB        1244                   t_avg = 0
   227                                                             
   228   3913.7 MiB -1025961.0 MiB       72299               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3899.9 MiB    -13.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3899.9 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3899.9 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3899.0 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3885.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3885.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3885.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3885.2 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3885.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3885.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3885.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3885.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3885.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3885.2 MiB      0.0 MiB           1                   break
   244                                             
   245   3885.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    508.4 MiB    508.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    508.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    508.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    508.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    508.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    508.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    508.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    508.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    508.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    508.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3741.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    524.8 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    524.8 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    524.8 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    524.8 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    524.8 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    524.8 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    524.8 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    524.8 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    524.8 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    524.8 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    524.8 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    524.8 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    524.8 MiB      0.0 MiB           1                                                           vidName, 
   188    524.8 MiB      0.0 MiB           1                                                           csvName, 
   189    524.8 MiB      0.0 MiB           1                                                           spec_dict), 
   190    524.8 MiB      0.0 MiB           1                                                   daemon=False)
   191    524.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    524.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    524.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    524.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    524.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    534.9 MiB     10.0 MiB           1           disp.start_video_stream()
   199    543.1 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    543.1 MiB      0.0 MiB           1           if online:
   202   3759.7 MiB   3216.6 MiB           1               disp.init_online_processing()
   203                                         
   204   3759.7 MiB      0.0 MiB           1           t_interval = 5
   205   3759.7 MiB      0.0 MiB           1           t_avg = 0
   206   3759.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3759.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3759.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3759.7 MiB      0.0 MiB           1           while True:
   212   3770.2 MiB -202902.6 MiB       14271               t_start = time.time()
   213                                         
   214   3770.2 MiB -202891.8 MiB       14271               disp.update_stream()
   215   3770.1 MiB -202916.6 MiB       14271               disp.update_projector()
   216                                         
   217   3770.1 MiB -201592.6 MiB       14271               t_end = time.time()
   218                                                     
   219   3770.2 MiB -201592.5 MiB       14271               i += 1
   220   3770.2 MiB -202916.6 MiB       14271               t_avg += t_end - t_start
   221                                         
   222   3770.2 MiB -202916.6 MiB       14271               if t_end - t_print > t_interval:
   223   3770.1 MiB  -3893.2 MiB         273                   print(f"Average processing time: {t_avg / i}")
   224   3770.1 MiB  -3867.7 MiB         273                   i = 0
   225   3770.1 MiB  -3867.7 MiB         273                   t_print = time.time()
   226   3770.1 MiB  -3867.7 MiB         273                   t_avg = 0
   227                                                             
   228   3770.2 MiB -202891.1 MiB       14271               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3756.2 MiB    -14.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3756.2 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3756.2 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3755.4 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3741.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3741.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3741.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3741.4 MiB     -0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237   3741.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3741.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3741.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3741.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3741.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3741.4 MiB      0.0 MiB           1                   break
   244                                             
   245   3741.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    518.5 MiB    518.5 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    518.5 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    518.5 MiB      0.0 MiB           1       faulthandler.enable()
   152    518.5 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    518.5 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    518.5 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    518.5 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    518.5 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    518.5 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    518.5 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3792.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    534.9 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    534.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    534.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    534.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    534.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    534.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    534.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    534.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    534.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    534.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    534.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    534.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    534.9 MiB      0.0 MiB           1                                                           vidName, 
   188    534.9 MiB      0.0 MiB           1                                                           csvName, 
   189    534.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    534.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    534.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    534.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    534.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.2 MiB     10.3 MiB           1           disp.start_video_stream()
   199    553.7 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    553.7 MiB      0.0 MiB           1           if online:
   202   3812.9 MiB   3259.3 MiB           1               disp.init_online_processing()
   203                                         
   204   3812.9 MiB      0.0 MiB           1           t_interval = 5
   205   3812.9 MiB      0.0 MiB           1           t_avg = 0
   206   3812.9 MiB      0.0 MiB           1           t_print = time.time()
   207   3812.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3812.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3812.9 MiB      0.0 MiB           1           while True:
   212   3822.2 MiB  -9634.7 MiB         693               t_start = time.time()
   213                                         
   214   3822.2 MiB  -9625.1 MiB         693               disp.update_stream()
   215   3822.2 MiB  -9649.8 MiB         693               disp.update_projector()
   216                                         
   217   3822.2 MiB  -9649.9 MiB         693               t_end = time.time()
   218                                                     
   219   3822.2 MiB  -9649.9 MiB         693               i += 1
   220   3822.2 MiB  -9649.9 MiB         693               t_avg += t_end - t_start
   221                                         
   222   3822.2 MiB  -9649.9 MiB         693               if t_end - t_print > t_interval:
   223   3807.1 MiB    -92.5 MiB           6                   print(f"Average processing time: {t_avg / i}")
   224   3807.1 MiB      0.0 MiB           6                   i = 0
   225   3807.1 MiB      0.0 MiB           6                   t_print = time.time()
   226   3807.1 MiB      0.0 MiB           6                   t_avg = 0
   227                                                             
   228   3822.2 MiB  -9557.4 MiB         693               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3807.1 MiB    -15.1 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3807.1 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3807.1 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3806.4 MiB     -0.7 MiB           1                   disp.end_stream()
   233   3792.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3792.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3792.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3792.6 MiB     -0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3792.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3792.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    509.0 MiB    509.0 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    509.0 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    509.0 MiB      0.0 MiB           1       faulthandler.enable()
   152    509.0 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    509.0 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    509.0 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    509.0 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    509.0 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    509.0 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    509.0 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3345.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    525.4 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    525.4 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    525.4 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    525.4 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    525.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    525.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    525.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    525.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    525.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    525.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    525.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    525.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    525.4 MiB      0.0 MiB           1                                                           vidName, 
   188    525.4 MiB      0.0 MiB           1                                                           csvName, 
   189    525.4 MiB      0.0 MiB           1                                                           spec_dict), 
   190    525.4 MiB      0.0 MiB           1                                                   daemon=False)
   191    525.4 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    525.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    525.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    525.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    525.4 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    535.6 MiB     10.2 MiB           1           disp.start_video_stream()
   199    543.8 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    543.8 MiB      0.0 MiB           1           if online:
   202   3854.9 MiB   3311.1 MiB           1               disp.init_online_processing()
   203                                         
   204   3854.9 MiB      0.0 MiB           1           t_interval = 5
   205   3854.9 MiB      0.0 MiB           1           t_avg = 0
   206   3854.9 MiB      0.0 MiB           1           t_print = time.time()
   207   3854.9 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3854.9 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3854.9 MiB      0.0 MiB           1           while True:
   212   3864.8 MiB -279745.5 MiB       20180               t_start = time.time()
   213                                         
   214   3864.9 MiB -279735.3 MiB       20180               disp.update_stream()
   215   3864.8 MiB -281714.7 MiB       20180               disp.update_projector()
   216                                         
   217   3864.8 MiB -279759.4 MiB       20180               t_end = time.time()
   218                                                     
   219   3864.8 MiB -279759.4 MiB       20180               i += 1
   220   3864.8 MiB -279759.4 MiB       20180               t_avg += t_end - t_start
   221                                         
   222   3864.8 MiB -279759.4 MiB       20180               if t_end - t_print > t_interval:
   223   3864.8 MiB  -4885.0 MiB         352                   print(f"Average processing time: {t_avg / i}")
   224   3864.8 MiB  -4885.0 MiB         352                   i = 0
   225   3864.8 MiB  -4885.0 MiB         352                   t_print = time.time()
   226   3864.8 MiB  -4885.0 MiB         352                   t_avg = 0
   227                                                             
   228   3864.8 MiB -279759.4 MiB       20180               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3851.0 MiB    -13.8 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3851.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3851.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3850.1 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3836.3 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3836.3 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3836.3 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3345.9 MiB   -490.4 MiB           1                   cam_process.join() # Wrap up recording process
   237   3345.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3345.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3345.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3345.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3345.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3345.9 MiB      0.0 MiB           1                   break
   244                                             
   245   3345.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    517.4 MiB    517.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    517.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    517.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    517.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    517.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    517.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    517.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    517.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    517.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    517.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3794.2 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    533.9 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    533.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    533.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    533.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    533.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    533.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    533.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    533.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    533.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    533.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    533.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    533.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    533.9 MiB      0.0 MiB           1                                                           vidName, 
   188    533.9 MiB      0.0 MiB           1                                                           csvName, 
   189    533.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    533.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    533.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    533.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    533.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.0 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.0 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    544.8 MiB     10.8 MiB           1           disp.start_video_stream()
   199    553.1 MiB      8.3 MiB           1           disp.start_projector()
   200                                         
   201    553.1 MiB      0.0 MiB           1           if online:
   202   3797.7 MiB   3244.6 MiB           1               disp.init_online_processing()
   203                                         
   204   3797.7 MiB      0.0 MiB           1           t_interval = 5
   205   3797.7 MiB      0.0 MiB           1           t_avg = 0
   206   3797.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3797.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3797.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3797.7 MiB      0.0 MiB           1           while True:
   212   3808.3 MiB      0.0 MiB       19119               t_start = time.time()
   213                                         
   214   3808.3 MiB     10.6 MiB       19119               disp.update_stream()
   215   3808.3 MiB      0.0 MiB       19119               disp.update_projector()
   216                                         
   217   3808.3 MiB      0.0 MiB       19119               t_end = time.time()
   218                                                     
   219   3808.3 MiB      0.0 MiB       19119               i += 1
   220   3808.3 MiB      0.0 MiB       19119               t_avg += t_end - t_start
   221                                         
   222   3808.3 MiB      0.1 MiB       19119               if t_end - t_print > t_interval:
   223   3808.3 MiB      0.0 MiB         210                   print(f"Average processing time: {t_avg / i}")
   224   3808.3 MiB      0.0 MiB         210                   i = 0
   225   3808.3 MiB      0.0 MiB         210                   t_print = time.time()
   226   3808.3 MiB      0.0 MiB         210                   t_avg = 0
   227                                                             
   228   3808.3 MiB      0.0 MiB       19119               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3808.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3808.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3808.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3807.7 MiB     -0.6 MiB           1                   disp.end_stream()
   233   3794.0 MiB    -13.7 MiB           1                   disp.stop_projector()
   234   3794.0 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3794.0 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3794.2 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3794.2 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3794.2 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3794.2 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3794.2 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3794.2 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3794.2 MiB      0.0 MiB           1                   break
   244                                             
   245   3794.2 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    518.8 MiB    518.8 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    518.8 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    518.8 MiB      0.0 MiB           1       faulthandler.enable()
   152    518.8 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    518.8 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    518.8 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    518.8 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    518.8 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    518.8 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    518.8 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3784.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    535.1 MiB     16.3 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    535.1 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    535.1 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    535.1 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    535.1 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    535.1 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    535.1 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    535.1 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    535.1 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    535.1 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    535.1 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    535.1 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    535.1 MiB      0.0 MiB           1                                                           vidName, 
   188    535.1 MiB      0.0 MiB           1                                                           csvName, 
   189    535.1 MiB      0.0 MiB           1                                                           spec_dict), 
   190    535.1 MiB      0.0 MiB           1                                                   daemon=False)
   191    535.1 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    535.1 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    535.1 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    535.1 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    535.1 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.7 MiB     10.6 MiB           1           disp.start_video_stream()
   199    554.2 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    554.2 MiB      0.0 MiB           1           if online:
   202   3787.4 MiB   3233.2 MiB           1               disp.init_online_processing()
   203                                         
   204   3787.4 MiB      0.0 MiB           1           t_interval = 5
   205   3787.4 MiB      0.0 MiB           1           t_avg = 0
   206   3787.4 MiB      0.0 MiB           1           t_print = time.time()
   207   3787.4 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3787.4 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3787.4 MiB      0.0 MiB           1           while True:
   212   3798.6 MiB      0.0 MiB       10572               t_start = time.time()
   213                                         
   214   3798.6 MiB     11.3 MiB       10572               disp.update_stream()
   215   3798.6 MiB      0.0 MiB       10572               disp.update_projector()
   216                                         
   217   3798.6 MiB      0.0 MiB       10572               t_end = time.time()
   218                                                     
   219   3798.6 MiB      0.0 MiB       10572               i += 1
   220   3798.6 MiB      0.0 MiB       10572               t_avg += t_end - t_start
   221                                         
   222   3798.7 MiB      0.1 MiB       10572               if t_end - t_print > t_interval:
   223   3798.6 MiB      0.0 MiB         107                   print(f"Average processing time: {t_avg / i}")
   224   3798.6 MiB      0.0 MiB         107                   i = 0
   225   3798.6 MiB      0.0 MiB         107                   t_print = time.time()
   226   3798.6 MiB      0.0 MiB         107                   t_avg = 0
   227                                                             
   228   3798.7 MiB      0.0 MiB       10572               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3798.7 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3798.7 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3798.7 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3798.4 MiB     -0.3 MiB           1                   disp.end_stream()
   233   3784.6 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3784.6 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3784.6 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3784.6 MiB      0.0 MiB           1                   cam_process.join() # Wrap up recording process
   237   3784.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3784.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3784.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3784.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3784.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3784.6 MiB      0.0 MiB           1                   break
   244                                             
   245   3784.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    518.2 MiB    518.2 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    518.2 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    518.2 MiB      0.0 MiB           1       faulthandler.enable()
   152    518.2 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    518.2 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    518.2 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    518.2 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    518.2 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    518.2 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    518.2 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3813.6 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    534.7 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    534.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    534.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    534.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    534.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    534.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    534.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    534.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    534.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    534.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    534.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    534.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    534.7 MiB      0.0 MiB           1                                                           vidName, 
   188    534.7 MiB      0.0 MiB           1                                                           csvName, 
   189    534.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    534.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    534.7 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    534.7 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    534.7 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.7 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.7 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.7 MiB     11.0 MiB           1           disp.start_video_stream()
   199    553.9 MiB      8.2 MiB           1           disp.start_projector()
   200                                         
   201    553.9 MiB      0.0 MiB           1           if online:
   202   3817.6 MiB   3263.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3817.6 MiB      0.0 MiB           1           t_interval = 5
   205   3817.6 MiB      0.0 MiB           1           t_avg = 0
   206   3817.6 MiB      0.0 MiB           1           t_print = time.time()
   207   3817.6 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3817.6 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3817.6 MiB      0.0 MiB           1           while True:
   212   3827.3 MiB      0.0 MiB       14232               t_start = time.time()
   213                                         
   214   3827.3 MiB      9.8 MiB       14232               disp.update_stream()
   215   3827.4 MiB      0.0 MiB       14232               disp.update_projector()
   216                                         
   217   3827.4 MiB      0.0 MiB       14232               t_end = time.time()
   218                                                     
   219   3827.4 MiB      0.0 MiB       14232               i += 1
   220   3827.4 MiB      0.0 MiB       14232               t_avg += t_end - t_start
   221                                         
   222   3827.4 MiB      0.0 MiB       14232               if t_end - t_print > t_interval:
   223   3827.3 MiB      0.0 MiB         147                   print(f"Average processing time: {t_avg / i}")
   224   3827.3 MiB      0.0 MiB         147                   i = 0
   225   3827.3 MiB      0.0 MiB         147                   t_print = time.time()
   226   3827.3 MiB      0.0 MiB         147                   t_avg = 0
   227                                                             
   228   3827.4 MiB      0.0 MiB       14232               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3827.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3827.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3827.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3827.3 MiB     -0.1 MiB           1                   disp.end_stream()
   233   3813.5 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3813.5 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3813.5 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3813.6 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3813.6 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3813.6 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3813.6 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3813.6 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3813.6 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3813.6 MiB      0.0 MiB           1                   break
   244                                             
   245   3813.6 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    518.4 MiB    518.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    518.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    518.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    518.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    518.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    518.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    518.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    518.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    518.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    518.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3800.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    534.9 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    534.9 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    534.9 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    534.9 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    534.9 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    534.9 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    534.9 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    534.9 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    534.9 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    534.9 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    534.9 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    534.9 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    534.9 MiB      0.0 MiB           1                                                           vidName, 
   188    534.9 MiB      0.0 MiB           1                                                           csvName, 
   189    534.9 MiB      0.0 MiB           1                                                           spec_dict), 
   190    534.9 MiB      0.0 MiB           1                                                   daemon=False)
   191    534.9 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    534.9 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    534.9 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    534.9 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    534.9 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    545.4 MiB     10.5 MiB           1           disp.start_video_stream()
   199    553.8 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    553.8 MiB      0.0 MiB           1           if online:
   202   3804.0 MiB   3250.2 MiB           1               disp.init_online_processing()
   203                                         
   204   3804.0 MiB      0.0 MiB           1           t_interval = 5
   205   3804.0 MiB      0.0 MiB           1           t_avg = 0
   206   3804.0 MiB      0.0 MiB           1           t_print = time.time()
   207   3804.0 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3804.0 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3804.0 MiB      0.0 MiB           1           while True:
   212   3815.4 MiB      0.0 MiB       20017               t_start = time.time()
   213                                         
   214   3815.4 MiB     10.1 MiB       20017               disp.update_stream()
   215   3815.4 MiB      1.3 MiB       20017               disp.update_projector()
   216                                         
   217   3815.4 MiB      0.0 MiB       20017               t_end = time.time()
   218                                                     
   219   3815.4 MiB      0.0 MiB       20017               i += 1
   220   3815.4 MiB      0.0 MiB       20017               t_avg += t_end - t_start
   221                                         
   222   3815.4 MiB      0.0 MiB       20017               if t_end - t_print > t_interval:
   223   3815.4 MiB      0.0 MiB         320                   print(f"Average processing time: {t_avg / i}")
   224   3815.4 MiB      0.0 MiB         320                   i = 0
   225   3815.4 MiB      0.0 MiB         320                   t_print = time.time()
   226   3815.4 MiB      0.0 MiB         320                   t_avg = 0
   227                                                             
   228   3815.4 MiB      0.0 MiB       20017               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3815.4 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3815.4 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3815.4 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3814.6 MiB     -0.8 MiB           1                   disp.end_stream()
   233   3800.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3800.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3800.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3800.9 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3800.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3800.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3800.9 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3800.9 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3800.9 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3800.9 MiB      0.0 MiB           1                   break
   244                                             
   245   3800.9 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.9 MiB    522.9 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.9 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.9 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.9 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.9 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.9 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.9 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.9 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.9 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.9 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3815.4 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    539.4 MiB     16.5 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    539.4 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    539.4 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    539.4 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    539.4 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    539.4 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    539.4 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    539.4 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    539.4 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    539.4 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    539.4 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    539.4 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    539.4 MiB      0.0 MiB           1                                                           vidName, 
   188    539.4 MiB      0.0 MiB           1                                                           csvName, 
   189    539.4 MiB      0.0 MiB           1                                                           spec_dict), 
   190    539.4 MiB      0.0 MiB           1                                                   daemon=False)
   191    539.4 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    539.4 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    539.4 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    539.4 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    539.5 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    550.3 MiB     10.9 MiB           1           disp.start_video_stream()
   199    558.7 MiB      8.4 MiB           1           disp.start_projector()
   200                                         
   201    558.7 MiB      0.0 MiB           1           if online:
   202   3817.5 MiB   3258.8 MiB           1               disp.init_online_processing()
   203                                         
   204   3817.5 MiB      0.0 MiB           1           t_interval = 5
   205   3817.5 MiB      0.0 MiB           1           t_avg = 0
   206   3817.5 MiB      0.0 MiB           1           t_print = time.time()
   207   3817.5 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3817.5 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3817.5 MiB      0.0 MiB           1           while True:
   212   3828.9 MiB      0.0 MiB       21300               t_start = time.time()
   213                                         
   214   3829.0 MiB     11.3 MiB       21300               disp.update_stream()
   215   3829.0 MiB      0.2 MiB       21300               disp.update_projector()
   216                                         
   217   3829.0 MiB      0.0 MiB       21300               t_end = time.time()
   218                                                     
   219   3829.0 MiB      0.0 MiB       21300               i += 1
   220   3829.0 MiB      0.0 MiB       21300               t_avg += t_end - t_start
   221                                         
   222   3829.0 MiB      0.0 MiB       21300               if t_end - t_print > t_interval:
   223   3828.9 MiB      0.0 MiB         344                   print(f"Average processing time: {t_avg / i}")
   224   3828.9 MiB      0.0 MiB         344                   i = 0
   225   3828.9 MiB      0.0 MiB         344                   t_print = time.time()
   226   3828.9 MiB      0.0 MiB         344                   t_avg = 0
   227                                                             
   228   3829.0 MiB      0.0 MiB       21300               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3829.0 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3829.0 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3829.0 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3829.0 MiB      0.1 MiB           1                   disp.end_stream()
   233   3815.2 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3815.2 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3815.2 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3815.4 MiB      0.1 MiB           1                   cam_process.join() # Wrap up recording process
   237   3815.4 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3815.4 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
   240   3815.4 MiB      0.0 MiB           1                   vprint("handle_cmamera: Waiting for user...")
   241   3815.4 MiB      0.0 MiB           1                   user_ready.wait()             # Wait for user to restart
   242   3815.4 MiB      0.0 MiB           1                   vprint("User ready!")
   243   3815.4 MiB      0.0 MiB           1                   break
   244                                             
   245   3815.4 MiB      0.0 MiB           1       print("Exiting cam_handler")


Filename: /home/titan/KI2020/Code/src/threadFuncs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   145    522.4 MiB    522.4 MiB           1   @profile(stream=open(f'memory_profiler_handle_camera.log','a+'))
   146                                         def handle_camera(main_event, cam_handler_ready, user_ready, proj_queue, dirTracker, optHandler):
   147                                             """
   148                                             Starts, restarts and stops the camera Process when main or restart events are set.
   149                                             """
   150    522.4 MiB      0.0 MiB           1       dirTracker.get_current_savepath
   151    522.4 MiB      0.0 MiB           1       faulthandler.enable()
   152    522.4 MiB      0.0 MiB           1       vprint = optHandler.get_vprint()
   153                                         
   154    522.4 MiB      0.0 MiB           1       cam_function = record_camera if optHandler.get_dict_value('useBlackFly') else record_fake_camera
   155                                         
   156    522.4 MiB      0.0 MiB           1       cam_recording_ready = multiprocessing.Event()
   157                                         
   158    522.4 MiB      0.0 MiB           1       spec_dict = optHandler.get_camera_specs()
   159                                         
   160    522.4 MiB      0.0 MiB           1       img_show_queue = multiprocessing.Queue(1)
   161                                             
   162    522.4 MiB      0.0 MiB           1       online = optHandler.get_dict_value('online')
   163    522.4 MiB      0.0 MiB           1       print(F"Online tracking: {online}")
   164                                             
   165                                             # Goes on until user stops
   166   3802.9 MiB      0.0 MiB           2       while not(main_event.is_set()):
   167                                         
   168                                                 # Handles projected images
   169    538.7 MiB     16.4 MiB           1           proj = Projector(bgr_col=1,use_fullscreen=True,push_window=4000,rotate=False)
   170    538.7 MiB      0.0 MiB           1           print("Setting up DisplayHandler")
   171                                                 
   172    538.7 MiB      0.0 MiB           1           disp = DisplayHandler(proj, img_show_queue, proj_queue,online)
   173    538.7 MiB      0.0 MiB           1           print("DisplayHandler setup complete")
   174                                         
   175    538.7 MiB      0.0 MiB           1           vidName = dirTracker.get_current_savepath(append_str=spec_dict['rec_string'],save_format=spec_dict['video_format'])
   176    538.7 MiB      0.0 MiB           1           csvName = dirTracker.get_current_savepath(append_str=spec_dict['frame_ID_string'],save_format=spec_dict['frame_ID_format'])
   177    538.7 MiB      0.0 MiB           1           stimName = dirTracker.get_current_savepath(append_str='stimuli',save_format='csv')
   178                                         
   179    538.7 MiB      0.0 MiB           1           disp.create_savefile(stimName)
   180                                         
   181    538.7 MiB      0.0 MiB           1           cam_recording_ready.clear()
   182                                         
   183                                         
   184    538.7 MiB      0.0 MiB           1           cam_process = multiprocessing.Process(  target=cam_function, 
   185    538.7 MiB      0.0 MiB           1                                                   args=(  img_show_queue, 
   186    538.7 MiB      0.0 MiB           1                                                           cam_recording_ready, 
   187    538.7 MiB      0.0 MiB           1                                                           vidName, 
   188    538.7 MiB      0.0 MiB           1                                                           csvName, 
   189    538.7 MiB      0.0 MiB           1                                                           spec_dict), 
   190    538.7 MiB      0.0 MiB           1                                                   daemon=False)
   191    538.8 MiB      0.0 MiB           1           cam_process.start()
   192                                          
   193    538.8 MiB      0.0 MiB           1           vprint("handle_camera: waiting for cam_recording_ready")
   194    538.8 MiB      0.0 MiB           1           cam_recording_ready.wait()
   195    538.8 MiB      0.0 MiB           1           vprint("handle_camera: cam ready! setting cam_handler_ready")
   196    538.8 MiB      0.0 MiB           1           cam_handler_ready.set()
   197                                         
   198    549.5 MiB     10.7 MiB           1           disp.start_video_stream()
   199    557.9 MiB      8.5 MiB           1           disp.start_projector()
   200                                         
   201    557.9 MiB      0.0 MiB           1           if online:
   202   3805.7 MiB   3247.7 MiB           1               disp.init_online_processing()
   203                                         
   204   3805.7 MiB      0.0 MiB           1           t_interval = 5
   205   3805.7 MiB      0.0 MiB           1           t_avg = 0
   206   3805.7 MiB      0.0 MiB           1           t_print = time.time()
   207   3805.7 MiB      0.0 MiB           1           i = 0
   208                                         
   209   3805.7 MiB      0.0 MiB           1           print("Started projector")
   210                                                 # Waits for main or restart events to be set
   211   3805.7 MiB      0.0 MiB           1           while True:
   212   3816.2 MiB      0.0 MiB       25513               t_start = time.time()
   213                                         
   214   3816.2 MiB     10.6 MiB       25513               disp.update_stream()
   215   3816.3 MiB      0.0 MiB       25513               disp.update_projector()
   216                                         
   217   3816.3 MiB      0.0 MiB       25513               t_end = time.time()
   218                                                     
   219   3816.3 MiB      0.0 MiB       25513               i += 1
   220   3816.3 MiB      0.0 MiB       25513               t_avg += t_end - t_start
   221                                         
   222   3816.3 MiB      0.0 MiB       25513               if t_end - t_print > t_interval:
   223   3816.2 MiB      0.0 MiB         279                   print(f"Average processing time: {t_avg / i}")
   224   3816.2 MiB      0.0 MiB         279                   i = 0
   225   3816.2 MiB      0.0 MiB         279                   t_print = time.time()
   226   3816.2 MiB      0.0 MiB         279                   t_avg = 0
   227                                                             
   228   3816.3 MiB      0.0 MiB       25513               if main_event.is_set() or not(cam_handler_ready.is_set()) :
   229   3816.3 MiB      0.0 MiB           1                   vprint("handle_camera: main_event or cam_handler_ready is cleared!")
   230   3816.3 MiB      0.0 MiB           1                   cam_recording_ready.clear() # Signal camera to stop recording
   231   3816.3 MiB      0.0 MiB           1                   vprint("Closing video stream")
   232   3816.6 MiB      0.3 MiB           1                   disp.end_stream()
   233   3802.8 MiB    -13.8 MiB           1                   disp.stop_projector()
   234   3802.8 MiB      0.0 MiB           1                   vprint("Video stream closed!")
   235   3802.8 MiB      0.0 MiB           1                   vprint("handle_camera: Joining cam_process")
   236   3802.9 MiB      0.2 MiB           1                   cam_process.join() # Wrap up recording process
   237   3802.9 MiB      0.0 MiB           1                   vprint("handle_camera: Cam pool joined!")
   238                                                         
   239   3802.9 MiB      0.0 MiB           1                   vprint(F"handle_camera: user ready? {user_ready.is_set()}")
